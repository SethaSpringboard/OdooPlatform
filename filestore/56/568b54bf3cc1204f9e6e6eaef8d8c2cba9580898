
/*********************************************************************
*  Filepath: /base/static/tests/test_ir_model_fields_translation.js  *
*  Lines: 55                                                         *
*********************************************************************/
odoo.define('@base/../tests/test_ir_model_fields_translation', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
function checkLoginColumn(translation) {
    return [
        stepUtils.showAppsMenuItem(), {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: 'click',
        }, {
            content: "Open Users & Companies",
            trigger: '[data-menu-xmlid="base.menu_users"]',
            run: "click",
        }, {
            content: "Open Users",
            trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
            run: "click",
        }, {
            content: `Login column should be ${translation}`,
            trigger: `[data-name="login"] span:contains("${translation}")`,
            isCheck: true,
        }
    ]
}

registry.category("web_tour.tours").add('ir_model_fields_translation_en_tour', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Login')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_en_tour2', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Login2')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_fr_tour', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_fr_tour2', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant2')
});

return __exports;
});
;

/***************************************************
*  Filepath: /web/static/tests/helpers/cleanup.js  *
*  Lines: 121                                      *
***************************************************/
odoo.define('@web/../tests/helpers/cleanup', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

// -----------------------------------------------------------------------------
// Cleanup
// -----------------------------------------------------------------------------

const cleanups = [];

/**
 * Register a cleanup callback that will be executed whenever the current test
 * is done.
 *
 * - the cleanups will be executed in reverse order
 * - they will be executed even if the test fails/crashes
 *
 * @param {Function} callback
 */
__exports.registerCleanup = registerCleanup; function registerCleanup(callback) {
    cleanups.push(callback);
}

if (window.QUnit) {
    QUnit.on("OdooAfterTestHook", (info) => {
        if (QUnit.config.debug) {
            return;
        }
        let cleanup;
        // note that this calls the cleanup callbacks in reverse order!
        while ((cleanup = cleanups.pop())) {
            try {
                cleanup(info);
            } catch (error) {
                console.error(error);
            }
        }
    });

    // -----------------------------------------------------------------------------
    // Check leftovers
    // -----------------------------------------------------------------------------

    /**
     * List of elements tolerated in the body after a test. The property "keep"
     * prevents the element from being removed (typically: qunit suite elements).
     */
    const validElements = [
        // always in the body:
        { tagName: "DIV", attr: "id", value: "qunit", keep: true },
        { tagName: "DIV", attr: "id", value: "qunit-fixture", keep: true },
        // shouldn't be in the body after a test but are tolerated:
        { tagName: "SCRIPT", attr: "id", value: "" },
        { tagName: "DIV", attr: "class", value: "o_notification_manager" },
        { tagName: "DIV", attr: "class", value: "tooltip fade bs-tooltip-auto" },
        { tagName: "DIV", attr: "class", value: "tooltip fade bs-tooltip-auto show" },
        { tagName: "DIV", attr: "class", value: "tooltip tooltip-field-info fade bs-tooltip-auto" },
        {
            tagName: "DIV",
            attr: "class",
            value: "tooltip tooltip-field-info fade bs-tooltip-auto show",
        },
        { tagName: "SPAN", attr: "class", value: "select2-hidden-accessible" },

        // Due to a Document Kanban bug (already present in 12.0)
        { tagName: "DIV", attr: "class", value: "ui-helper-hidden-accessible" },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete ui-front",
        },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete dropdown-menu ui-front", // many2ones
        },
    ];

    /**
     * After each test, we check that there is no leftover in the DOM.
     *
     * Note: this event is not QUnit standard, we added it for this specific use case.
     * As a payload, an object with keys 'moduleName' and 'testName' is provided. It
     * is used to indicate the test that left elements in the DOM, when it happens.
     */
    QUnit.on("OdooAfterTestHook", function (info) {
        if (QUnit.config.debug) {
            return;
        }
        const failed = info.testReport.getStatus() === "failed";
        const toRemove = [];
        // check for leftover elements in the body
        for (const bodyChild of document.body.children) {
            const tolerated = validElements.find(
                (e) => e.tagName === bodyChild.tagName && bodyChild.getAttribute(e.attr) === e.value
            );
            if (!failed && !tolerated) {
                QUnit.pushFailure(
                    `Body still contains undesirable elements:\n${bodyChild.outerHTML}`
                );
            }
            if (!tolerated || !tolerated.keep) {
                toRemove.push(bodyChild);
            }
        }
        // cleanup leftovers in #qunit-fixture
        const qunitFixture = document.getElementById("qunit-fixture");
        if (qunitFixture.children.length) {
            toRemove.push(...qunitFixture.children);
        }
        // remove unwanted elements if not in debug
        for (const el of toRemove) {
            el.remove();
        }
        document.body.classList.remove("modal-open");
    });
}

return __exports;
});
;

/*************************************************
*  Filepath: /web/static/tests/helpers/utils.js  *
*  Lines: 1106                                   *
*************************************************/
odoo.define('@web/../tests/helpers/utils', ['@web/core/assets', '@web/core/browser/browser', '@web/core/browser/feature_detection', '@web/core/network/download', '@web/core/utils/concurrency', '@web/core/utils/patch', '@web/core/utils/ui', '@web/core/l10n/translation', '@web/../tests/helpers/cleanup', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { templates } = require("@web/core/assets");
const { browser } = require("@web/core/browser/browser");
const { isMacOS } = require("@web/core/browser/feature_detection");
const { download } = require("@web/core/network/download");
const { Deferred } = require("@web/core/utils/concurrency");
const { patch } = require("@web/core/utils/patch");
const { isVisible } = require("@web/core/utils/ui");
const { _t } = require("@web/core/l10n/translation");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");

const {
    App,
    onError,
    onMounted,
    onPatched,
    onRendered,
    onWillDestroy,
    onWillPatch,
    onWillRender,
    onWillStart,
    onWillUnmount,
    onWillUpdateProps,
    useComponent,
} = require("@odoo/owl");

/**
 * @typedef {keyof HTMLElementEventMap | keyof WindowEventMap} EventType
 *
 * @typedef {Side | `${Side}-${Side}` | { x?: number, y?: number }} Position
 *
 * @typedef {"bottom" | "left" | "right" | "top"} Side
 *
 * @typedef TriggerEventOptions
 * @property {boolean} [skipVisibilityCheck=false]
 * @property {boolean} [sync=false]
 */

/**
 * Patch the native Date object
 *
 * Note that it will be automatically unpatched at the end of the test
 *
 * @param {number} [year]
 * @param {number} [month]
 * @param {number} [day]
 * @param {number} [hours]
 * @param {number} [minutes]
 * @param {number} [seconds]
 * @param {number} [ms=0]
 */
__exports.patchDate = patchDate; function patchDate(year, month, day, hours, minutes, seconds, ms = 0) {
    var RealDate = window.Date;
    var actualDate = new RealDate();

    // By default, RealDate uses the browser offset, so we must replace it with the offset fixed in luxon.
    var fakeDate = new RealDate(year, month, day, hours, minutes, seconds, ms);
    if (!(luxon.Settings.defaultZone instanceof luxon.FixedOffsetZone)) {
        throw new Error("luxon.Settings.defaultZone must be a FixedOffsetZone");
    }
    const browserOffset = -fakeDate.getTimezoneOffset();
    const patchedOffset = luxon.Settings.defaultZone.offset();
    const offsetDiff = patchedOffset - browserOffset;
    const correctedMinutes = fakeDate.getMinutes() - offsetDiff;
    fakeDate.setMinutes(correctedMinutes);

    var timeInterval = actualDate.getTime() - fakeDate.getTime();

    // eslint-disable-next-line no-global-assign
    window.Date = (function (NativeDate) {
        function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            let date;
            if (arguments.length > 0) {
                date =
                    length == 1 && String(Y) === Y // isString(Y)
                        ? // We explicitly pass it through parse:
                          new NativeDate(Date.parse(Y))
                        : // We have to manually make calls depending on argument
                        // length here
                        length >= 7
                        ? new NativeDate(Y, M, D, h, m, s, ms)
                        : length >= 6
                        ? new NativeDate(Y, M, D, h, m, s)
                        : length >= 5
                        ? new NativeDate(Y, M, D, h, m)
                        : length >= 4
                        ? new NativeDate(Y, M, D, h)
                        : length >= 3
                        ? new NativeDate(Y, M, D)
                        : length >= 2
                        ? new NativeDate(Y, M)
                        : length >= 1
                        ? new NativeDate(Y)
                        : new NativeDate();
                // Prevent mixups with unfixed Date object
                date.constructor = Date;
                return date;
            } else {
                date = new NativeDate();
                var time = date.getTime();
                time -= timeInterval;
                date.setTime(time);
                return date;
            }
        }

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            Date[key] = NativeDate[key];
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        // exception: 'now' uses fake date as reference
        Date.now = function () {
            var date = new NativeDate();
            var time = date.getTime();
            time -= timeInterval;
            return time;
        };
        Date.UTC = NativeDate.UTC;
        Date.prototype = NativeDate.prototype;
        Date.prototype.constructor = Date;

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        Date.parse = NativeDate.parse;
        return Date;
    })(Date);

    registerCleanup(() => {
        window.Date = RealDate;
    });
}

/**
 * Applies a fixed time zone to luxon based on an offset to the UTC time zone.
 *
 * @param {number} offset the number of minutes ahead or behind the UTC time zone
 *                          +120 => UTC+2
 *                          -120 => UTC-2
 */
__exports.patchTimeZone = patchTimeZone; function patchTimeZone(offset) {
    patchWithCleanup(luxon.Settings, { defaultZone: luxon.FixedOffsetZone.instance(offset) });
}

/**
 *
 * @param {Object} obj object to patch
 * @param {Object} patchValue the actual patch description
 */
__exports.patchWithCleanup = patchWithCleanup; function patchWithCleanup(obj, patchValue) {
    const unpatch = patch(obj, patchValue);
    registerCleanup(() => {
        unpatch();
    });
}

/**
 * @returns {Element}
 */
__exports.getFixture = getFixture; function getFixture() {
    if (!window.QUnit) {
        return document;
    }
    if (QUnit.config.debug) {
        return document.body;
    } else {
        return document.getElementById("qunit-fixture");
    }
}

__exports.nextTick = nextTick; async function nextTick() {
    await new Promise((resolve) => window.requestAnimationFrame(resolve));
    await new Promise((resolve) => setTimeout(resolve));
}

__exports.makeDeferred = makeDeferred; function makeDeferred() {
    return new Deferred();
}

__exports.findElement = findElement; function findElement(el, selector) {
    let target = el;
    if (selector) {
        const els = el.querySelectorAll(selector);
        if (els.length === 0) {
            throw new Error(`No element found (selector: ${selector})`);
        }
        if (els.length > 1) {
            throw new Error(`Found ${els.length} elements, instead of 1 (selector: ${selector})`);
        }
        target = els[0];
    }
    return target;
}

//-----------------------------------------------------------------------------
// Event init attributes mappers
//-----------------------------------------------------------------------------

/** @param {EventInit} [args] */
const mapBubblingEvent = (args) => ({ ...args, bubbles: true });

/** @param {EventInit} [args] */
const mapNonBubblingEvent = (args) => ({ ...args, bubbles: false });

/** @param {EventInit} [args={}] */
const mapBubblingPointerEvent = (args = {}) => ({
    clientX: args.pageX,
    clientY: args.pageY,
    ...args,
    bubbles: true,
    cancelable: true,
    view: window,
});

/** @param {EventInit} [args] */
const mapNonBubblingPointerEvent = (args) => ({
    ...mapBubblingPointerEvent(args),
    bubbles: false,
    cancelable: false,
});

/** @param {EventInit} [args={}] */
const mapCancelableTouchEvent = (args = {}) => ({
    ...args,
    bubbles: true,
    cancelable: true,
    composed: true,
    rotation: 0.0,
    touches: args.touches ? [...args.touches.map((e) => new Touch(e))] : undefined,
    view: window,
    zoom: 1.0,
});

/** @param {EventInit} [args] */
const mapNonCancelableTouchEvent = (args) => ({
    ...mapCancelableTouchEvent(args),
    cancelable: false,
});

/** @param {EventInit} [args] */
const mapKeyboardEvent = (args) => ({
    ...args,
    bubbles: true,
    cancelable: true,
});

/**
 * @template {typeof Event} T
 * @param {EventType} eventType
 * @returns {[T, (attrs: EventInit) => EventInit]}
 */
const getEventConstructor = (eventType) => {
    switch (eventType) {
        // Mouse events
        case "auxclick":
        case "click":
        case "contextmenu":
        case "dblclick":
        case "mousedown":
        case "mouseup":
        case "mousemove":
        case "mouseover":
        case "mouseout": {
            return [MouseEvent, mapBubblingPointerEvent];
        }
        case "mouseenter":
        case "mouseleave": {
            return [MouseEvent, mapNonBubblingPointerEvent];
        }
        // Pointer events
        case "pointerdown":
        case "pointerup":
        case "pointermove":
        case "pointerover":
        case "pointerout": {
            return [PointerEvent, mapBubblingPointerEvent];
        }
        case "pointerenter":
        case "pointerleave": {
            return [PointerEvent, mapNonBubblingPointerEvent];
        }
        // Focus events
        case "focusin": {
            return [FocusEvent, mapBubblingEvent];
        }
        case "focus":
        case "blur": {
            return [FocusEvent, mapNonBubblingEvent];
        }
        // Clipboard events
        case "cut":
        case "copy":
        case "paste": {
            return [ClipboardEvent, mapBubblingEvent];
        }
        // Keyboard events
        case "keydown":
        case "keypress":
        case "keyup": {
            return [KeyboardEvent, mapKeyboardEvent];
        }
        // Drag events
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragstart":
        case "dragleave":
        case "dragover":
        case "drop": {
            return [DragEvent, mapBubblingEvent];
        }
        // Input events
        case "input": {
            return [InputEvent, mapBubblingEvent];
        }
        // Composition events
        case "compositionstart":
        case "compositionend": {
            return [CompositionEvent, mapBubblingEvent];
        }
        // UI events
        case "scroll": {
            return [UIEvent, mapNonBubblingEvent];
        }
        // Touch events
        case "touchstart":
        case "touchend":
        case "touchmove": {
            return [TouchEvent, mapCancelableTouchEvent];
        }
        case "touchcancel": {
            return [TouchEvent, mapNonCancelableTouchEvent];
        }
        // Default: base Event constructor
        default: {
            return [Event, mapBubblingEvent];
        }
    }
};

/**
 * @template {EventType} T
 * @param {Element} el
 * @param {string | null | undefined | false} selector
 * @param {T} eventType
 * @param {EventInit} [eventInit]
 * @param {TriggerEventOptions} [options={}]
 * @returns {GlobalEventHandlersEventMap[T] | Promise<GlobalEventHandlersEventMap[T]>}
 */
__exports.triggerEvent = triggerEvent; function triggerEvent(el, selector, eventType, eventInit, options = {}) {
    const errors = [];
    const target = findElement(el, selector);

    // Error handling
    if (typeof eventType !== "string") {
        errors.push("event type must be a string");
    }
    if (!target) {
        errors.push("cannot find target");
    } else if (!options.skipVisibilityCheck && !isVisible(target)) {
        errors.push("target is not visible");
    }
    if (errors.length) {
        throw new Error(
            `Cannot trigger event${eventType ? ` "${eventType}"` : ""}${
                selector ? ` (with selector "${selector}")` : ""
            }: ${errors.join(" and ")}`
        );
    }

    // Actual dispatch
    const [Constructor, processParams] = getEventConstructor(eventType);
    const event = new Constructor(eventType, processParams(eventInit));
    target.dispatchEvent(event);

    if (window.QUnit && QUnit.config.debug) {
        const group = `%c[${event.type.toUpperCase()}]`;
        console.groupCollapsed(group, "color: #b52c9b");
        console.log(target, event);
        console.groupEnd(group, "color: #b52c9b");
    }

    if (options.sync) {
        return event;
    } else {
        return nextTick().then(() => event);
    }
}

/**
 * @param {Element} el
 * @param {string | null | undefined | false} selector
 * @param {(EventType | [EventType, EventInit])[]} [eventDefs]
 * @param {TriggerEventOptions} [options={}]
 */
__exports.triggerEvents = triggerEvents; function triggerEvents(el, selector, eventDefs, options = {}) {
    const events = [...eventDefs].map((eventDef) => {
        const [eventType, eventInit] = Array.isArray(eventDef) ? eventDef : [eventDef, {}];
        return triggerEvent(el, selector, eventType, eventInit, options);
    });
    if (options.sync) {
        return events;
    } else {
        return nextTick().then(() => events);
    }
}

/**
 * Triggers a scroll event on the given target
 *
 * If the target cannot be scrolled or an axis has reached
 * the end of the scrollable area, the event can be transmitted
 * to its nearest parent until it can be triggered
 *
 * @param {Element} target target of the scroll event
 * @param {Object} coordinates
 * @param {number} coordinates.left coordinates to scroll horizontally
 * @param {number} coordinates.top coordinates to scroll vertically
 * @param {boolean} canPropagate states if the scroll can propagate to a scrollable parent
 */
__exports.triggerScroll = triggerScroll; async function triggerScroll(
    target,
    coordinates = { left: null, top: null },
    canPropagate = true
) {
    const isScrollable =
        (target.scrollHeight > target.clientHeight && target.clientHeight > 0) ||
        (target.scrollWidth > target.clientWidth && target.clientWidth > 0);
    if (!isScrollable && !canPropagate) {
        return;
    }
    if (isScrollable) {
        const canScrollFrom = {
            left:
                coordinates.left > target.scrollLeft
                    ? target.scrollLeft + target.clientWidth < target.scrollWidth
                    : target.scrollLeft > 0,
            top:
                coordinates.top > target.scrollTop
                    ? target.scrollTop + target.clientHeight < target.scrollHeight
                    : target.scrollTop > 0,
        };
        const scrollCoordinates = {};
        Object.entries(coordinates).forEach(([key, value]) => {
            if (value !== null && canScrollFrom[key]) {
                scrollCoordinates[key] = value;
                delete coordinates[key];
            }
        });
        target.scrollTo(scrollCoordinates);
        await triggerEvent(target, null, "scroll");
        if (!canPropagate || !Object.entries(coordinates).length) {
            return;
        }
    }
    target.parentElement
        ? triggerScroll(target.parentElement, coordinates)
        : triggerEvent(window, null, "scroll");
    await nextTick();
}

__exports.click = click; function click(
    el,
    selector,
    { mouseEventInit = {}, skipDisabledCheck = false, skipVisibilityCheck = false } = {}
) {
    if (!skipDisabledCheck && el.disabled) {
        throw new Error("Can't click on a disabled button");
    }
    return triggerEvents(
        el,
        selector,
        ["pointerdown", "mousedown", "focus", "pointerup", "mouseup", ["click", mouseEventInit]],
        { skipVisibilityCheck }
    );
}

__exports.clickCreate = clickCreate; function clickCreate(htmlElement) {
    if (
        htmlElement.querySelectorAll(
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_form_button_create"
        ).length
    ) {
        return click(
            htmlElement,
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_form_button_create"
        );
    } else if (
        htmlElement.querySelectorAll(
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_list_button_create"
        ).length
    ) {
        return click(
            htmlElement,
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_list_button_create"
        );
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickEdit = clickEdit; function clickEdit(htmlElement) {
    if (htmlElement.querySelectorAll(".o_list_button_edit").length) {
        return click(htmlElement, ".o_list_button_edit");
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickSave = clickSave; async function clickSave(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_save").length) {
        return click(htmlElement, ".o_form_button_save");
    }
    const listSaveButtons = htmlElement.querySelectorAll(".o_list_button_save");
    if (listSaveButtons.length) {
        return listSaveButtons.length >= 2 ? click(listSaveButtons[1]) : click(listSaveButtons[0]);
    } else {
        throw new Error("No save button found to be clicked.");
    }
}

__exports.clickDiscard = clickDiscard; async function clickDiscard(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_cancel").length) {
        return click(htmlElement, ".o_form_button_cancel");
    } else if ($(htmlElement).find(".o_list_button_discard:visible").length) {
        return click($(htmlElement).find(".o_list_button_discard:visible").get(0));
    } else {
        throw new Error("No discard button found to be clicked.");
    }
}

/**
 * Trigger pointerenter and mouseenter events on the given target. If no
 * coordinates are given, the event is located by default
 * in the middle of the target to simplify the test process
 *
 * @param {Element} el
 * @param {string} selector
 * @param {Object} coordinates position of the mouseenter event
 */
__exports.mouseEnter = mouseEnter; async function mouseEnter(el, selector, coordinates) {
    const target = el.querySelector(selector) || el;
    const atPos = coordinates || {
        clientX: target.getBoundingClientRect().left + target.getBoundingClientRect().width / 2,
        clientY: target.getBoundingClientRect().top + target.getBoundingClientRect().height / 2,
    };
    return triggerEvents(target, null, ["pointerenter", "mouseenter"], atPos);
}

/**
 * Trigger pointerleave and mouseleave events on the given target.
 *
 * @param {Element} el
 * @param {string} selector
 */
__exports.mouseLeave = mouseLeave; async function mouseLeave(el, selector) {
    const target = el.querySelector(selector) || el;
    return triggerEvents(target, null, ["pointerleave", "mouseleave"]);
}

__exports.editInput = editInput; async function editInput(el, selector, value) {
    const input = findElement(el, selector);
    if (!(input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement)) {
        throw new Error("Only 'input' and 'textarea' elements can be edited with 'editInput'.");
    }
    if (
        !["text", "textarea", "email", "search", "color", "number", "file", "tel"].includes(
            input.type
        )
    ) {
        throw new Error(`Type "${input.type}" not supported by 'editInput'.`);
    }

    const eventOpts = {};
    if (input.type === "file") {
        const files = Array.isArray(value) ? value : [value];
        const dataTransfer = new DataTransfer();
        for (const file of files) {
            if (!(file instanceof File)) {
                throw new Error(`File input value should be one or several File objects.`);
            }
            dataTransfer.items.add(file);
        }
        input.files = dataTransfer.files;
        eventOpts.skipVisibilityCheck = true;
    } else {
        input.value = value;
    }

    await triggerEvents(input, null, ["input", "change"], eventOpts);

    if (input.type === "file") {
        // Need to wait for the file to be loaded by the input
        await nextTick();
        await nextTick();
    }
}

__exports.editSelect = editSelect; function editSelect(el, selector, value) {
    const select = findElement(el, selector);
    if (select.tagName !== "SELECT") {
        throw new Error("Only select tag can be edited with selectInput.");
    }
    select.value = value;
    return triggerEvent(select, null, "change");
}

__exports.editSelectMenu = editSelectMenu; async function editSelectMenu(el, selector, value) {
    const dropdown = el.querySelector(selector);
    await click(dropdown.querySelector(".dropdown-toggle"));
    for (const item of Array.from(dropdown.querySelectorAll(".dropdown-item"))) {
        if (item.textContent === value) {
            return click(item);
        }
    }
}

/**
 * Triggers an hotkey properly disregarding the operating system.
 *
 * @param {string} hotkey
 * @param {boolean} addOverlayModParts
 * @param {KeyboardEventInit} eventAttrs
 */
__exports.triggerHotkey = triggerHotkey; async function triggerHotkey(hotkey, addOverlayModParts = false, eventAttrs = {}) {
    eventAttrs.key = hotkey.split("+").pop();

    if (/shift/i.test(hotkey)) {
        eventAttrs.shiftKey = true;
    }

    if (/control/i.test(hotkey)) {
        if (isMacOS()) {
            eventAttrs.metaKey = true;
        } else {
            eventAttrs.ctrlKey = true;
        }
    }

    if (/alt/i.test(hotkey) || addOverlayModParts) {
        if (isMacOS()) {
            eventAttrs.ctrlKey = true;
        } else {
            eventAttrs.altKey = true;
        }
    }

    if (!("bubbles" in eventAttrs)) {
        eventAttrs.bubbles = true;
    }

    const [keydownEvent, keyupEvent] = await triggerEvents(
        document.activeElement,
        null,
        [
            ["keydown", eventAttrs],
            ["keyup", eventAttrs],
        ],
        { skipVisibilityCheck: true }
    );

    return { keydownEvent, keyupEvent };
}

__exports.mockDownload = mockDownload; function mockDownload(cb) {
    patchWithCleanup(download, { _download: cb });
}

const hushConsole = __exports.hushConsole = Object.create(null);
for (const propName of Object.keys(window.console)) {
    hushConsole[propName] = () => {};
}

__exports.mockSendBeacon = mockSendBeacon; function mockSendBeacon(mock) {
    patchWithCleanup(navigator, {
        sendBeacon: (url, blob) => {
            return mock(url, blob) !== false;
        },
    });
}

__exports.mockTimeout = mockTimeout; function mockTimeout() {
    const timeouts = new Map();
    let currentTime = 0;
    let id = 1;
    patchWithCleanup(browser, {
        setTimeout(fn, delay = 0) {
            timeouts.set(id, { fn, scheduledFor: delay + currentTime, id });
            return id++;
        },
        clearTimeout(id) {
            timeouts.delete(id);
        },
    });
    return {
        execRegisteredTimeouts() {
            for (const { fn } of timeouts.values()) {
                fn();
            }
            timeouts.clear();
        },
        async advanceTime(duration) {
            // wait here so all microtasktick scheduled in this frame can be
            // executed and possibly register their own timeout
            await nextTick();
            currentTime += duration;
            for (const { fn, scheduledFor, id } of timeouts.values()) {
                if (scheduledFor <= currentTime) {
                    fn();
                    timeouts.delete(id);
                }
            }
            // wait here to make sure owl can update the UI
            await nextTick();
        },
    };
}

__exports.mockAnimationFrame = mockAnimationFrame; function mockAnimationFrame() {
    const callbacks = new Map();
    let currentTime = 0;
    let id = 1;
    patchWithCleanup(browser, {
        requestAnimationFrame(fn) {
            callbacks.set(id, { fn, scheduledFor: 16 + currentTime, id });
            return id++;
        },
        cancelAnimationFrame(id) {
            callbacks.delete(id);
        },
        performance: { now: () => currentTime },
    });
    return {
        execRegisteredAnimationFrames() {
            for (const { fn } of callbacks.values()) {
                fn(currentTime);
            }
            callbacks.clear();
        },
        async advanceFrame(count = 1) {
            // wait here so all microtasktick scheduled in this frame can be
            // executed and possibly register their own timeout
            await nextTick();
            currentTime += 16 * count;
            for (const { fn, scheduledFor, id } of callbacks.values()) {
                if (scheduledFor <= currentTime) {
                    fn(currentTime);
                    callbacks.delete(id);
                }
            }
            // wait here to make sure owl can update the UI
            await nextTick();
        },
    };
}

__exports.mount = mount; async function mount(Comp, target, config = {}) {
    let { props, env } = config;
    env = env || {};
    const configuration = {
        env,
        templates,
        test: true,
        props,
    };
    if (env.services && "localization" in env.services) {
        configuration.translateFn = _t;
    }
    const app = new App(Comp, configuration);
    registerCleanup(() => app.destroy());
    return app.mount(target);
}

__exports.destroy = destroy; function destroy(comp) {
    comp.__owl__.app.destroy();
}

__exports.findChildren = findChildren; function findChildren(comp, predicate = (e) => e) {
    const queue = [];
    [].unshift.apply(queue, Object.values(comp.__owl__.children));

    while (queue.length > 0) {
        const curNode = queue.pop();
        if (predicate(curNode)) {
            return curNode;
        }
        [].unshift.apply(queue, Object.values(curNode.component.__owl__.children));
    }
}

// partial replacement of t-ref on component
__exports.useChild = useChild; function useChild() {
    const node = useComponent().__owl__;
    const setChild = () => {
        const componentNode = Object.values(node.children)[0];
        node.component.child = componentNode.component;
    };
    onMounted(setChild);
    onPatched(setChild);
}

__exports.useLogLifeCycle = useLogLifeCycle; function useLogLifeCycle(logFn, name = "") {
    const component = useComponent();
    let loggedName = `${component.constructor.name}`;
    if (name) {
        loggedName = `${component.constructor.name} ${name}`;
    }
    onError(() => {
        logFn(`onError ${loggedName}`);
    });
    onMounted(() => {
        logFn(`onMounted ${loggedName}`);
    });
    onPatched(() => {
        logFn(`onPatched ${loggedName}`);
    });
    onRendered(() => {
        logFn(`onRendered ${loggedName}`);
    });
    onWillDestroy(() => {
        logFn(`onWillDestroy ${loggedName}`);
    });
    onWillPatch(() => {
        logFn(`onWillPatch ${loggedName}`);
    });
    onWillRender(() => {
        logFn(`onWillRender ${loggedName}`);
    });
    onWillStart(() => {
        logFn(`onWillStart ${loggedName}`);
    });
    onWillUnmount(() => {
        logFn(`onWillUnmount ${loggedName}`);
    });
    onWillUpdateProps(() => {
        logFn(`onWillUpdateProps ${loggedName}`);
    });
}

/**
 * Returns the list of nodes containing n2 (included) that do not contain n1.
 *
 * @param {Node} n1
 * @param {Node} n2
 * @returns {Node[]}
 */
function getDifferentParents(n1, n2) {
    const parents = [n2];
    while (parents[0].parentNode) {
        const parent = parents[0].parentNode;
        if (parent.contains(n1)) {
            break;
        }
        parents.unshift(parent);
    }
    return parents;
}

/**
 * Helper performing a drag and drop sequence.
 *
 * - 'from' is used to determine the element on which the drag will start;
 * - 'target' will determine the element on which the first one will be dropped.
 *
 * The first element will be dragged by its center, and will be dropped on the
 * bottom-right inner pixel of the target element. This behavior covers both
 * cases of appending the first element to the end of a list (toSelector =
 * target list) or moving it at the position of another element, effectively
 * placing the first element before the second (toSelector = other element).
 *
 * A position can be given to drop the first element above, below, or on the
 * side of the second (default is inside, as specified above).
 *
 * Note that only the last event is awaited, since all the others are
 * considered to be synchronous.
 *
 * @param {Element | string} from
 * @param {Element | string} to
 * @param {Position} [position]
 */
__exports.dragAndDrop = dragAndDrop; async function dragAndDrop(from, to, position) {
    const { drop } = await drag(from);
    await drop(to, position);
}

/**
 * Helper performing a drag.
 *
 * - the 'from' selector is used to determine the element on which the drag will
 *  start;
 * - the 'target' selector will determine the element on which the dragged element will be
 * moved.
 *
 * Returns a drop function
 *
 * @param {Element | string} from
 */
__exports.drag = drag; async function drag(from, pointerType = "mouse") {
    const assertIsDragging = (fn, endDrag) => {
        return {
            async [fn.name](...args) {
                if (dragEndReason) {
                    throw new Error(
                        `Cannot execute drag helper '${fn.name}': drag sequence has been ended by '${dragEndReason}'.`
                    );
                }
                await fn(...args);
                if (endDrag) {
                    dragEndReason = fn.name;
                }
            },
        }[fn.name];
    };

    const cancel = assertIsDragging(async function cancel() {
        await triggerEvent(window, null, "keydown", { key: "Escape" });
    }, true);

    /**
     * @param {Element | string} [to]
     * @param {Position} [position]
     */
    const drop = assertIsDragging(async function drop(to, position) {
        if (to) {
            await moveTo(to, position);
        }
        await triggerEvent(target || source, null, "pointerup", targetPosition);
    }, true);

    /**
     * @param {Element | string} selector
     */
    const getEl = (selector) =>
        selector instanceof Element ? selector : fixture.querySelector(selector);

    /**
     * @param {Position} [position]
     */
    const getTargetPosition = (position) => {
        const tRect = target.getBoundingClientRect();
        const tPos = {
            clientX: Math.floor(tRect.x),
            clientY: Math.floor(tRect.y),
        };
        if (position && typeof position === "object") {
            // x and y coordinates start from the element's initial coordinates
            tPos.clientX += position.x || 0;
            tPos.clientY += position.y || 0;
        } else {
            const positions = typeof position === "string" ? position.split("-") : [];

            // X position
            if (positions.includes("left")) {
                tPos.clientX -= 1;
            } else if (positions.includes("right")) {
                tPos.clientX += Math.ceil(tRect.width) + 1;
            } else {
                tPos.clientX += Math.floor(tRect.width / 2);
            }

            // Y position
            if (positions.includes("top")) {
                tPos.clientY -= 1;
            } else if (positions.includes("bottom")) {
                tPos.clientY += Math.ceil(tRect.height) + 1;
            } else {
                tPos.clientY += Math.floor(tRect.height / 2);
            }
        }
        return tPos;
    };

    /**
     * @param {Element | string} [to]
     * @param {Position} [position]
     */
    const moveTo = assertIsDragging(async function moveTo(to, position) {
        target = getEl(to);
        if (!target) {
            return;
        }

        // Recompute target position
        targetPosition = getTargetPosition(position);

        // Move, enter and drop the element on the target
        await triggerEvent(source, null, "pointermove", targetPosition);

        // "pointerenter" is fired on every parent of `target` that do not contain
        // `from` (typically: different parent lists).
        for (const parent of getDifferentParents(source, target)) {
            triggerEvent(parent, null, "pointerenter", targetPosition);
        }
        await nextTick();

        return dragHelpers;
    }, false);

    const dragHelpers = { cancel, drop, moveTo };
    const fixture = getFixture();

    const source = getEl(from instanceof Element ? from : fixture.querySelector(from));
    const sourceRect = source.getBoundingClientRect();

    let dragEndReason = null;
    let target;
    let targetPosition;

    // Pointer down on main target
    await triggerEvent(source, null, "pointerdown", {
        pointerType,
        clientX: sourceRect.x + sourceRect.width / 2,
        clientY: sourceRect.y + sourceRect.height / 2,
    });

    return dragHelpers;
}

__exports.clickDropdown = clickDropdown; async function clickDropdown(target, fieldName) {
    const dropdownInput = target.querySelector(`[name='${fieldName}'] .dropdown input`);
    dropdownInput.focus();
    await nextTick();
    await click(dropdownInput);
}

__exports.clickOpenedDropdownItem = clickOpenedDropdownItem; async function clickOpenedDropdownItem(target, fieldName, itemContent) {
    const dropdowns = target.querySelectorAll(`[name='${fieldName}'] .dropdown .dropdown-menu`);
    if (dropdowns.length === 0) {
        throw new Error(`No dropdown found for field ${fieldName}`);
    } else if (dropdowns.length > 1) {
        throw new Error(`Found ${dropdowns.length} dropdowns for field ${fieldName}`);
    }
    const dropdownItems = dropdowns[0].querySelectorAll("li");
    const indexToClick = Array.from(dropdownItems)
        .map((html) => html.textContent)
        .indexOf(itemContent);
    if (indexToClick === -1) {
        throw new Error(`The element '${itemContent}' does not exist in the dropdown`);
    }
    await click(dropdownItems[indexToClick]);
}

__exports.selectDropdownItem = selectDropdownItem; async function selectDropdownItem(target, fieldName, itemContent) {
    await clickDropdown(target, fieldName);
    await clickOpenedDropdownItem(target, fieldName, itemContent);
}

__exports.getNodesTextContent = getNodesTextContent; function getNodesTextContent(nodes) {
    return Array.from(nodes).map((n) => n.textContent);
}

/**
 * Click to open the dropdown on a many2one
 */
__exports.clickOpenM2ODropdown = clickOpenM2ODropdown; async function clickOpenM2ODropdown(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }

    await click(matches[0]);
    return matches[0];
}

/**
 * Click on the active (highlighted) selection in a m2o dropdown.
 */
// TO FIX
__exports.clickM2OHighlightedItem = clickM2OHighlightedItem; async function clickM2OHighlightedItem(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    // const $dropdown = $(m2oSelector).autocomplete('widget');
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }
    // clicking on an li (no matter which one), will select the focussed one
    return click(matches[0].parentElement.querySelector("li"));
}

// X2Many
__exports.addRow = addRow; async function addRow(target, selector) {
    await click(target.querySelector(`${selector ? selector : ""} .o_field_x2many_list_row_add a`));
}

__exports.removeRow = removeRow; async function removeRow(target, index) {
    await click(target.querySelectorAll(".o_list_record_remove")[index]);
}

return __exports;
});
;

/*****************************************
*  Filepath: /web/static/tests/utils.js  *
*  Lines: 724                            *
*****************************************/
odoo.define('@web/../tests/utils', ['@web/core/utils/ui', '@web/../tests/helpers/cleanup', '@web/../tests/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { isVisible } = require("@web/core/utils/ui");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");
const {
    click: webClick,
    getFixture,
    makeDeferred,
    triggerEvents: webTriggerEvents,
} = require("@web/../tests/helpers/utils");

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
__exports.createFile = createFile; function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error("FileSystem API is not supported");
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([data.content], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Create a fake object 'dataTransfer', linked to some files,
 * which is passed to drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function createFakeDataTransfer(files) {
    return {
        dropEffect: "all",
        effectAllowed: "all",
        files,
        items: [],
        types: ["Files"],
    };
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then clicks on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.shiftKey]
 */
__exports.click = click; async function click(selector, options = {}) {
    const { shiftKey } = options;
    delete options.shiftKey;
    await contains(selector, { click: { shiftKey }, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragenters `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragenterFiles = dragenterFiles; async function dragenterFiles(selector, files, options) {
    await contains(selector, { dragenterFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragovers `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragoverFiles = dragoverFiles; async function dragoverFiles(selector, files, options) {
    await contains(selector, { dragoverFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then drops `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dropFiles = dropFiles; async function dropFiles(selector, files, options) {
    await contains(selector, { dropFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inputs `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.inputFiles = inputFiles; async function inputFiles(selector, files, options) {
    await contains(selector, { inputFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then pastes `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.pasteFiles = pasteFiles; async function pasteFiles(selector, files, options) {
    await contains(selector, { pasteFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then focuses on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.focus = focus; async function focus(selector, options) {
    await contains(selector, { setFocus: true, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inserts the given `content`.
 *
 * @param {string} selector
 * @param {string} content
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.replace=false]
 */
__exports.insertText = insertText; async function insertText(selector, content, options = {}) {
    const { replace = false } = options;
    delete options.replace;
    await contains(selector, { ...options, insertText: { content, replace } });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then sets its `scrollTop` to the given value.
 *
 * @param {string} selector
 * @param {number|"bottom"} scrollTop
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.scroll = scroll; async function scroll(selector, scrollTop, options) {
    await contains(selector, { setScroll: scrollTop, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then triggers `event` on it.
 *
 * @param {string} selector
 * @param {(import("@web/../tests/helpers/utils").EventType|[import("@web/../tests/helpers/utils").EventType, EventInit])[]} events
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.triggerEvents = triggerEvents; async function triggerEvents(selector, events, options) {
    await contains(selector, { triggerEvents: events, ...options });
}

function log(ok, message) {
    if (window.QUnit) {
        QUnit.assert.ok(ok, message);
    } else {
        if (ok) {
            console.log(message);
        } else {
            console.error(message);
        }
    }
}

let hasUsedContainsPositively = false;
if (window.QUnit) {
    QUnit.testStart(() => (hasUsedContainsPositively = false));
}
/**
 * @typedef {[string, ContainsOptions]} ContainsTuple tuple representing params of the contains
 *  function, where the first element is the selector, and the second element is the options param.
 * @typedef {Object} ContainsOptions
 * @property {ContainsTuple} [after] if provided, the found element(s) must be after the element
 *  matched by this param.
 * @property {ContainsTuple} [before] if provided, the found element(s) must be before the element
 *  matched by this param.
 * @property {Object} [click] if provided, clicks on the first found element
 * @property {ContainsTuple|ContainsTuple[]} [contains] if provided, the found element(s) must
 *  contain the provided sub-elements.
 * @property {number} [count=1] numbers of elements to be found to declare the contains check
 *  as successful. Elements are counted after applying all other filters.
 * @property {Object[]} [dragenterFiles] if provided, dragenters the given files on the found element
 * @property {Object[]} [dragoverFiles] if provided, dragovers the given files on the found element
 * @property {Object[]} [dropFiles] if provided, drops the given files on the found element
 * @property {Object[]} [inputFiles] if provided, inputs the given files on the found element
 * @property {{content:string, replace:boolean}} [insertText] if provided, adds to (or replace) the
 *  value of the first found element by the given content.
 * @property {ContainsTuple} [parent] if provided, the found element(s) must have as
 *  parent the node matching the parent parameter.
 * @property {Object[]} [pasteFiles] if provided, pastes the given files on the found element
 * @property {number|"bottom"} [scroll] if provided, the scrollTop of the found element(s)
 *  must match.
 *  Note: when using one of the scrollTop options, it is advised to ensure the height is not going
 *  to change soon, by checking with a preceding contains that all the expected elements are in DOM.
 * @property {boolean} [setFocus] if provided, focuses the first found element.
 * @property {boolean} [shadowRoot] if provided, targets the shadowRoot of the found elements.
 * @property {number|"bottom"} [setScroll] if provided, sets the scrollTop on the first found
 *  element.
 * @property {HTMLElement} [target=getFixture()]
 * @property {string[]} [triggerEvents] if provided, triggers the given events on the found element
 * @property {string} [text] if provided, the textContent of the found element(s) or one of their
 *  descendants must match. Use `textContent` option for a match on the found element(s) only.
 * @property {string} [textContent] if provided, the textContent of the found element(s) must match.
 *  Prefer `text` option for a match on the found element(s) or any of their descendants, usually
 *  allowing for a simpler and less specific selector.
 * @property {string} [value] if provided, the input value of the found element(s) must match.
 *  Note: value changes are not observed directly, another mutation must happen to catch them.
 * @property {boolean} [visible] if provided, the found element(s) must be (in)visible
 */
class Contains {
    /**
     * @param {string} selector
     * @param {ContainsOptions} [options={}]
     */
    constructor(selector, options = {}) {
        this.selector = selector;
        this.options = options;
        this.options.count ??= 1;
        this.options.targetParam = this.options.target;
        this.options.target ??= getFixture();
        let selectorMessage = `${this.options.count} of "${this.selector}"`;
        if (this.options.visible !== undefined) {
            selectorMessage = `${selectorMessage} ${
                this.options.visible ? "visible" : "invisible"
            }`;
        }
        if (this.options.targetParam) {
            selectorMessage = `${selectorMessage} inside a specific target`;
        }
        if (this.options.parent) {
            selectorMessage = `${selectorMessage} inside a specific parent`;
        }
        if (this.options.contains) {
            selectorMessage = `${selectorMessage} with a specified sub-contains`;
        }
        if (this.options.text !== undefined) {
            selectorMessage = `${selectorMessage} with text "${this.options.text}"`;
        }
        if (this.options.textContent !== undefined) {
            selectorMessage = `${selectorMessage} with textContent "${this.options.textContent}"`;
        }
        if (this.options.value !== undefined) {
            selectorMessage = `${selectorMessage} with value "${this.options.value}"`;
        }
        if (this.options.scroll !== undefined) {
            selectorMessage = `${selectorMessage} with scroll "${this.options.scroll}"`;
        }
        if (this.options.after !== undefined) {
            selectorMessage = `${selectorMessage} after a specified element`;
        }
        if (this.options.before !== undefined) {
            selectorMessage = `${selectorMessage} before a specified element`;
        }
        this.selectorMessage = selectorMessage;
        if (this.options.contains && !Array.isArray(this.options.contains[0])) {
            this.options.contains = [this.options.contains];
        }
        if (this.options.count) {
            hasUsedContainsPositively = true;
        } else if (!hasUsedContainsPositively) {
            throw new Error(
                `Starting a test with "contains" of count 0 for selector "${this.selector}" is useless because it might immediately resolve. Start the test by checking that an expected element actually exists.`
            );
        }
        /** @type {string} */
        this.successMessage = undefined;
        /** @type {function} */
        this.executeError = undefined;
    }

    /**
     * Starts this contains check, either immediately resolving if there is a
     * match, or registering appropriate listeners and waiting until there is a
     * match or a timeout (resolving or rejecting respectively).
     *
     * Success or failure messages will be logged with QUnit as well.
     *
     * @returns {Promise}
     */
    run() {
        this.done = false;
        this.def = makeDeferred();
        this.scrollListeners = new Set();
        this.onScroll = () => this.runOnce("after scroll");
        if (!this.runOnce("immediately")) {
            this.timer = setTimeout(
                () => this.runOnce("Timeout of 5 seconds", { crashOnFail: true }),
                5000
            );
            this.observer = new MutationObserver((mutations) => {
                try {
                    this.runOnce("after mutations");
                } catch (e) {
                    this.def.reject(e); // prevents infinite loop in case of programming error
                }
            });
            this.observer.observe(this.options.target, {
                attributes: true,
                childList: true,
                subtree: true,
            });
            registerCleanup(() => {
                if (!this.done) {
                    this.runOnce("Test ended", { crashOnFail: true });
                }
            });
        }
        return this.def;
    }

    /**
     * Runs this contains check once, immediately returning the result (or
     * undefined), and possibly resolving or rejecting the main promise
     * (and printing QUnit log) depending on options.
     * If undefined is returned it means the check was not successful.
     *
     * @param {string} whenMessage
     * @param {Object} [options={}]
     * @param {boolean} [options.crashOnFail=false]
     * @param {boolean} [options.executeOnSuccess=true]
     * @returns {HTMLElement[]|undefined}
     */
    runOnce(whenMessage, { crashOnFail = false, executeOnSuccess = true } = {}) {
        const res = this.select();
        if (res?.length === this.options.count || crashOnFail) {
            // clean before doing anything else to avoid infinite loop due to side effects
            this.observer?.disconnect();
            clearTimeout(this.timer);
            for (const el of this.scrollListeners ?? []) {
                el.removeEventListener("scroll", this.onScroll);
            }
            this.done = true;
        }
        if (res?.length === this.options.count) {
            this.successMessage = `Found ${this.selectorMessage} (${whenMessage})`;
            if (executeOnSuccess) {
                this.executeAction(res[0]);
            }
            return res;
        } else {
            this.executeError = () => {
                let message = `Failed to find ${this.selectorMessage} (${whenMessage}).`;
                message = res
                    ? `${message} Found ${res.length} instead.`
                    : `${message} Parent not found.`;
                if (this.parentContains) {
                    if (this.parentContains.successMessage) {
                        log(true, this.parentContains.successMessage);
                    } else {
                        this.parentContains.executeError();
                    }
                }
                log(false, message);
                this.def?.reject(new Error(message));
                for (const childContains of this.childrenContains || []) {
                    if (childContains.successMessage) {
                        log(true, childContains.successMessage);
                    } else {
                        childContains.executeError();
                    }
                }
            };
            if (crashOnFail) {
                this.executeError();
            }
        }
    }

    /**
     * Executes the action(s) given to this constructor on the found element,
     * prints the success messages, and resolves the main deferred.

     * @param {HTMLElement} el
     */
    executeAction(el) {
        let message = this.successMessage;
        if (this.options.click) {
            message = `${message} and clicked it`;
            webClick(el, undefined, {
                mouseEventInit: this.options.click,
                skipDisabledCheck: true,
                skipVisibilityCheck: true,
            });
        }
        if (this.options.dragenterFiles) {
            message = `${message} and dragentered ${this.options.dragenterFiles.length} file(s)`;
            const ev = new Event("dragenter", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragenterFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dragoverFiles) {
            message = `${message} and dragovered ${this.options.dragoverFiles.length} file(s)`;
            const ev = new Event("dragover", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragoverFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dropFiles) {
            message = `${message} and dropped ${this.options.dropFiles.length} file(s)`;
            const ev = new Event("drop", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dropFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.inputFiles) {
            message = `${message} and inputted ${this.options.inputFiles.length} file(s)`;
            // could not use _createFakeDataTransfer as el.files assignation will only
            // work with a real FileList object.
            const dataTransfer = new window.DataTransfer();
            for (const file of this.options.inputFiles) {
                dataTransfer.items.add(file);
            }
            el.files = dataTransfer.files;
            /**
             * Changing files programatically is not supposed to trigger the event but
             * it does in Chrome versions before 73 (which is on runbot), so in that
             * case there is no need to make a manual dispatch, because it would lead to
             * the files being added twice.
             */
            const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
            const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
            if (!chromeVersion || chromeVersion >= 73) {
                el.dispatchEvent(new Event("change"));
            }
        }
        if (this.options.insertText !== undefined) {
            message = `${message} and inserted text "${this.options.insertText.content}" (replace: ${this.options.insertText.replace})`;
            el.focus();
            if (this.options.insertText.replace) {
                el.value = "";
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: "Backspace" }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: "Backspace" }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
            for (const char of this.options.insertText.content) {
                el.value += char;
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: char }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: char }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
            el.dispatchEvent(new window.InputEvent("change"));
        }
        if (this.options.pasteFiles) {
            message = `${message} and pasted ${this.options.pasteFiles.length} file(s)`;
            const ev = new Event("paste", { bubbles: true });
            Object.defineProperty(ev, "clipboardData", {
                value: createFakeDataTransfer(this.options.pasteFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.setFocus) {
            message = `${message} and focused it`;
            el.focus();
        }
        if (this.options.setScroll !== undefined) {
            message = `${message} and set scroll to "${this.options.setScroll}"`;
            el.scrollTop =
                this.options.setScroll === "bottom" ? el.scrollHeight : this.options.setScroll;
        }
        if (this.options.triggerEvents) {
            message = `${message} and triggered "${this.options.triggerEvents.join(", ")}" events`;
            webTriggerEvents(el, null, this.options.triggerEvents, {
                skipVisibilityCheck: true,
            });
        }
        if (this.parentContains) {
            log(true, this.parentContains.successMessage);
        }
        log(true, message);
        for (const childContains of this.childrenContains) {
            log(true, childContains.successMessage);
        }
        this.def?.resolve();
    }

    /**
     * Returns the found element(s) according to this constructor setup.
     * If undefined is returned it means the parent cannot be found
     *
     * @returns {HTMLElement[]|undefined}
     */
    select() {
        const target = this.selectParent();
        if (!target) {
            return;
        }
        const baseRes = [...target.querySelectorAll(this.selector)]
            .map((el) => (this.options.shadowRoot ? el.shadowRoot : el))
            .filter((el) => el);
        /** @type {Contains[]} */
        this.childrenContains = [];
        const res = baseRes.filter((el, currentIndex) => {
            let condition =
                (this.options.textContent === undefined ||
                    el.textContent.trim() === this.options.textContent) &&
                (this.options.value === undefined || el.value === this.options.value) &&
                (this.options.scroll === undefined ||
                    (this.options.scroll === "bottom"
                        ? Math.abs(el.scrollHeight - el.clientHeight - el.scrollTop) <= 1
                        : Math.abs(el.scrollTop - this.options.scroll) <= 1));
            if (condition && this.options.text !== undefined) {
                if (
                    el.textContent.trim() !== this.options.text &&
                    [...el.querySelectorAll("*")].every(
                        (el) => el.textContent.trim() !== this.options.text
                    )
                ) {
                    condition = false;
                }
            }
            if (condition && this.options.contains) {
                for (const param of this.options.contains) {
                    const childContains = new Contains(param[0], { ...param[1], target: el });
                    if (
                        !childContains.runOnce(`as child of el ${currentIndex + 1})`, {
                            executeOnSuccess: false,
                        })
                    ) {
                        condition = false;
                    }
                    this.childrenContains.push(childContains);
                }
            }
            if (condition && this.options.visible !== undefined) {
                if (isVisible(el) !== this.options.visible) {
                    condition = false;
                }
            }
            if (condition && this.options.after) {
                const afterContains = new Contains(this.options.after[0], {
                    ...this.options.after[1],
                    target,
                });
                const afterEl = afterContains.runOnce(`as "after"`, {
                    executeOnSuccess: false,
                })?.[0];
                if (
                    !afterEl ||
                    !(el.compareDocumentPosition(afterEl) & Node.DOCUMENT_POSITION_PRECEDING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(afterContains);
            }
            if (condition && this.options.before) {
                const beforeContains = new Contains(this.options.before[0], {
                    ...this.options.before[1],
                    target,
                });
                const beforeEl = beforeContains.runOnce(`as "before"`, {
                    executeOnSuccess: false,
                })?.[0];
                if (
                    !beforeEl ||
                    !(el.compareDocumentPosition(beforeEl) & Node.DOCUMENT_POSITION_FOLLOWING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(beforeContains);
            }
            return condition;
        });
        if (
            this.options.scroll !== undefined &&
            this.scrollListeners &&
            baseRes.length === this.options.count &&
            res.length !== this.options.count
        ) {
            for (const el of baseRes) {
                if (!this.scrollListeners.has(el)) {
                    this.scrollListeners.add(el);
                    el.addEventListener("scroll", this.onScroll);
                }
            }
        }
        return res;
    }

    /**
     * Returns the found element that should act as the target (parent) for the
     * main selector.
     * If undefined is returned it means the parent cannot be found.
     *
     * @returns {HTMLElement|undefined}
     */
    selectParent() {
        if (this.options.parent) {
            this.parentContains = new Contains(this.options.parent[0], {
                ...this.options.parent[1],
                target: this.options.target,
            });
            return this.parentContains.runOnce(`as parent`, { executeOnSuccess: false })?.[0];
        }
        return this.options.target;
    }
}

/**
 * Waits until `count` elements matching the given `selector` are present in
 * `options.target`.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options]
 * @returns {Promise}
 */
__exports.contains = contains; async function contains(selector, options) {
    await new Contains(selector, options).run();
}

const stepState = {
    expectedSteps: null,
    deferred: null,
    timeout: null,
    currentSteps: [],

    clear() {
        clearTimeout(this.timeout);
        this.timeout = null;
        this.deferred = null;
        this.currentSteps = [];
        this.expectedSteps = null;
    },

    check({ crashOnFail = false } = {}) {
        const success =
            this.expectedSteps.length === this.currentSteps.length &&
            this.expectedSteps.every((s, i) => s === this.currentSteps[i]);
        if (!success && !crashOnFail) {
            return;
        }
        QUnit.config.current.assert.verifySteps(this.expectedSteps);
        if (success) {
            this.deferred.resolve();
        } else {
            this.deferred.reject(new Error("Steps do not match."));
        }
        this.clear();
    },
};

if (window.QUnit) {
    QUnit.testStart(() =>
        registerCleanup(() => {
            if (stepState.expectedSteps) {
                stepState.check({ crashOnFail: true });
            } else {
                stepState.clear();
            }
        })
    );
}

/**
 * Indicate the completion of a test step. This step must then be verified by
 * calling `assertSteps`.
 *
 * @param {string} step
 */
__exports.step = step; function step(step) {
    stepState.currentSteps.push(step);
    QUnit.config.current.assert.step(step);
    if (stepState.expectedSteps) {
        stepState.check();
    }
}

/**
 * Wait for the given steps to be executed or for the timeout to be reached.
 *
 * @param {string[]} steps
 */
__exports.assertSteps = assertSteps; function assertSteps(steps) {
    if (stepState.expectedSteps) {
        stepState.check({ crashOnFail: true });
    }
    stepState.expectedSteps = steps;
    stepState.deferred = makeDeferred();
    stepState.timeout = setTimeout(() => stepState.check({ crashOnFail: true }), 2000);
    stepState.check();
    return stepState.deferred;
}

return __exports;
});
;

/********************************************************************
*  Filepath: /mail/static/tests/tours/activity_date_format_tour.js  *
*  Lines: 49                                                        *
********************************************************************/
odoo.define('@mail/../tests/tours/activity_date_format_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("mail_activity_date_format", {
    test: true,
    steps: () => [
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('To-Do')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Go Party",
        },
        {
            trigger: "button:contains('Schedule')",
        },
        {
            trigger: ".o-mail-Activity:contains('Go Party')",
        },
        {
            trigger: ".fa-info-circle",
            run: "click",
        },
        // Format expected from the server for 9 AM at the first day of 2024 is date_format = "%d/%b/%y", time_format = "%I:%M:%S %p".
        {
            trigger: ".o-mail-Activity-details tr:contains('Created') td:contains('01/Jan/24 09:00:00 AM')",
            isCheck: true,
        },
        {
            // Default due date is 5 days after creation date.
            trigger: ".o-mail-Activity-details tr:contains('Due on') td:contains('06/Jan/24')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/************************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_as_guest_tour.js  *
*  Lines: 34                                                            *
************************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_as_guest_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("discuss_channel_as_guest_tour.js", {
        test: true,
        steps: () => [
            {
                content: "Channel secret token has been hidden on welcome page",
                trigger: ".o-mail-WelcomePage",
                run() {
                    if (!window.location.pathname.startsWith("/discuss/channel")) {
                        console.error("Channel secret token is still present in URL.");
                    }
                },
            },
            {
                content: "Click join",
                trigger: "button[title='Join Channel']",
                extraTrigger: ".o-mail-Thread",
            },
            {
                content: "Check that we are on channel page",
                trigger: ".o-mail-Thread",
                run() {},
            },
        ],
    });

return __exports;
});
;

/**********************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_public_tour.js  *
*  Lines: 159                                                         *
**********************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_public_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { click, contains, createFile, inputFiles } = require("@web/../tests/utils");

registry.category("web_tour.tours").add("discuss_channel_public_tour.js", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-DiscussPublic",
            extraTrigger: ".o-mail-Thread",
            run() {},
        },
        {
            content: "Check that we are on channel page",
            trigger: ".o-mail-Thread",
            run() {
                if (!window.location.pathname.startsWith("/discuss/channel")) {
                    console.error("Channel secret token is still present in URL.");
                }
                const { missing, failed, unloaded } = odoo.loader.findErrors();
                if ([missing, failed, unloaded].some((arr) => arr.length)) {
                    console.error(
                        "Couldn't load all JS modules.",
                        JSON.stringify({ missing, failed, unloaded })
                    );
                }
                document.body.classList.add("o_discuss_channel_public_modules_loaded");
            },
            extraTrigger: ".o_discuss_channel_public_modules_loaded",
        },
        {
            content: "Wait for all modules loaded check in previous step",
            trigger: ".o_discuss_channel_public_modules_loaded",
            run() {},
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text cheese",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                await inputFiles(".o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello, world",
                        contentType: "text/plain",
                        name: "text.txt",
                    }),
                ]);
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o-mail-AttachmentCard[title="text.txt"]',
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o-mail-Composer-send:enabled",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("cheese")',
            run() {},
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Click on more menu",
            trigger: ".o-mail-Message [title='Expand']",
        },
        {
            content: "Click on edit",
            trigger: ".o-mail-Message [title='Edit']",
        },
        {
            content: "Edit message",
            trigger: ".o-mail-Message .o-mail-Composer-input",
            run: "text vegetables",
        },
        {
            content: "Add one more file in composer",
            trigger: ".o-mail-Message .o-mail-Composer button[aria-label='Attach files']",
            async run() {
                inputFiles(".o-mail-Message .o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello 2",
                        contentType: "text/plain",
                        name: "extra.txt",
                    }),
                ]);
            },
        },
        {
            content: "Check the earlier provided extra attachment is listed",
            trigger: '.o-mail-Message .o-mail-Composer .o-mail-AttachmentCard[title="extra.txt"]',
            extra_trigger:
                ".o-mail-Message .o-mail-Composer .o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Save edited message",
            trigger: ".o-mail-Message a:contains(save)",
        },
        {
            content: "Check message is edited",
            trigger: '.o-mail-Message-body:contains("vegetables")',
            run() {},
        },
        {
            content: "Check edited message contains the first attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Check edited message contains the extra attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("extra.txt")',
            async run() {
                await click(".o-mail-AttachmentCard-unlink", {
                    parent: [".o-mail-AttachmentCard", { text: "extra.txt" }],
                });
                await click(".btn", { text: "Ok", parent: [".modal", { text: "Confirmation" }] });
                await contains(".o-mail-AttachmentCard", { text: "extra.txt", count: 0 });
            },
        },
        {
            content: "Open search panel",
            trigger: "button[title='Search Messages']",
        },
        {
            content: "Search for the attachment name",
            trigger: ".o_searchview_input",
            run: "text text.txt",
        },
        {
            content: "Trigger the search",
            trigger: "button[aria-label='Search button']",
        },
        {
            content: "Check that searched message contains the attachment",
            trigger:
                '.o-mail-SearchMessagesPanel .o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
    ],
});

return __exports;
});
;

/***************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_tour.js  *
*  Lines: 104                                                  *
***************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_tour', ['@web/core/l10n/translation', '@web/core/registry', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { _t } = require("@web/core/l10n/translation");
const { registry } = require("@web/core/registry");

const { markup } = require("@odoo/owl");

registry.category("web_tour.tours").add("discuss_channel_tour", {
    url: "/web#action=mail.action_discuss",
    sequence: 80,
    steps: () => [
        {
            trigger: ".o-mail-DiscussSidebarCategory-channel .o-mail-DiscussSidebarCategory-add",
            content: markup(
                _t(
                    "<p>Channels make it easy to organize information across different topics and groups.</p> <p>Try to <b>create your first channel</b> (e.g. sales, marketing, product XYZ, after work party, etc).</p>"
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o-discuss-ChannelSelector input",
            content: markup(_t("<p>Create a channel here.</p>")),
            position: "bottom",
            auto: true,
            run: function (actions) {
                var t = new Date().getTime();
                actions.text("SomeChannel_" + t, this.$anchor);
            },
        },
        {
            trigger: ".o-discuss-ChannelSelector-list",
            extra_trigger: ".o-discuss-ChannelSelector-suggestion",
            content: markup(_t("<p>Create a public or private channel.</p>")),
            position: "right",
            run() {
                document.querySelector(".o-discuss-ChannelSelector-suggestion").click();
            },
        },
        {
            trigger: ".o-mail-Composer-input",
            content: markup(
                _t(
                    "<p><b>Write a message</b> to the members of the channel here.</p> <p>You can notify someone with <i>'@'</i> or link another channel with <i>'#'</i>. Start your message with <i>'/'</i> to get the list of possible commands.</p>"
                )
            ),
            position: "top",
            width: 350,
            run: function (actions) {
                var t = new Date().getTime();
                actions.text("SomeText_" + t, this.$anchor);
            },
        },
        {
            trigger: ".o-mail-Composer-send:enabled",
            content: _t("Post your message on the thread"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message",
            content: _t("Click on your message"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message [title='Expand']",
            content: _t("Expand options"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message [title='Mark as Todo']",
            content: markup(
                _t("Messages can be <b>starred</b> to remind you to check back later.")
            ),
            position: "bottom",
        },
        {
            trigger: "button:contains(Starred)",
            content: _t(
                "Once a message has been starred, you can come back and review it at any time here."
            ),
            position: "bottom",
        },
        {
            trigger: ".o-mail-DiscussSidebarCategory-chat .o-mail-DiscussSidebarCategory-add",
            content: markup(
                _t(
                    "<p><b>Chat with coworkers</b> in real-time using direct messages.</p><p><i>You might need to invite users from the Settings app first.</i></p>"
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o-discuss-ChannelSelector",
            auto: true,
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /mail/static/tests/tours/mail_activity_schedule_from_chatter.js  *
*  Lines: 61                                                                  *
******************************************************************************/
odoo.define('@mail/../tests/tours/mail_activity_schedule_from_chatter', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("mail_activity_schedule_from_chatter", {
    test: true,
    steps: () => [
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('Call')",
        },
        {
            trigger: "input[id*='activity_type_id']:propValue('Call')",
            run: () => {},
        },
        {
            extra_trigger: "button:contains('Schedule')",
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('To-Do')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Party",
        },
        {
            trigger: "button:contains('Schedule')",
        },
        {
            trigger: ".o-mail-Activity:contains('Play Mario Party')",
        },
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Kart",
        },
        {
            trigger: "button:contains('Mark as Done')",
        },
        {
            trigger: ".o-mail-Message:contains('Play Mario Kart')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************
*  Filepath: /mail/static/tests/tours/mail_composer_test_tour.js  *
*  Lines: 143                                                     *
******************************************************************/
odoo.define('@mail/../tests/tours/mail_composer_test_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains, createFile, inputFiles } = require("@web/../tests/utils");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail/tests/test_mail_composer.py
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/mail_composer_test_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Wait for the chatter to be fully loaded",
            trigger: ".o-mail-Chatter",
            async run() {
                await contains(".o-mail-Message", { count: 1 });
            },
        },
        {
            content: "Click on Send Message",
            trigger: "button:contains(Send message)",
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text blahblah @Not",
        },
        {
            content: "Mention a partner",
            trigger: ".o-mail-Composer-suggestion:contains(Not A Demo User)",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                await inputFiles(".o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello, world",
                        contentType: "text/plain",
                        name: "text.txt",
                    }),
                ]);
            },
        },
        {
            content: "Open full composer",
            trigger: "button[aria-label='Full composer']",
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
        },
        {
            content: "Check composer keeps open after pushing Escape",
            trigger: ".o_mail_composer_form_view",
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o_attachment[title="text.txt"]',
            run() {},
        },
        {
            content: "Check subject is autofilled",
            trigger: '[name="subject"] input',
            run() {
                const subjectValue = document.querySelector('[name="subject"] input').value;
                if (subjectValue !== "Jane") {
                    console.error(
                        `Full composer should have "Jane" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Check composer content is kept",
            trigger: '.o_field_html[name="body"]',
            run() {
                const bodyContent = document.querySelector(
                    '.o_field_html[name="body"]'
                ).textContent;
                if (!bodyContent.includes("blahblah @Not A Demo User")) {
                    console.error(
                        `Full composer should contain text from small composer ("blahblah @Not A Demo User") in body input (actual: ${bodyContent})`
                    );
                }
                const mentionLink = document.querySelector(
                    '.o_field_html[name="body"] a'
                ).textContent;
                if (!mentionLink.includes("@Not A Demo User")) {
                    console.error(
                        `Full composer should contain mention link from small composer ("@Not A Demo User") in body input)`
                    );
                }
            },
        },
        {
            content: "Open templates",
            trigger: '.o_field_widget[name="template_id"] input',
        },
        {
            content: "Check a template is listed",
            in_modal: false,
            trigger: '.ui-autocomplete .ui-menu-item a:contains("Test template")',
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o_mail_send",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("blahblah @Not A Demo User")',
        },
        {
            content: "Click on envelope to see recipients of message",
            trigger:
                '.o-mail-Message:has(.o-mail-Message-body:contains("blahblah @Not A Demo User")) .o-mail-Message-notification',
        },
        {
            content: "Check message has correct recipients",
            trigger: ".o-mail-MessageNotificationPopover:contains('Not A Demo UserJane')",
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/mail_message_load_order_tour.js  *
*  Lines: 77                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/mail_message_load_order_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains, scroll } = require("@web/../tests/utils");

registry.category("web_tour.tours").add("mail_message_load_order_tour", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-DiscussSidebarChannel:contains(MyTestChannel)",
            run: "click",
        },
        {
            trigger: ".o-mail-Thread .o-mail-Message",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 30 });
                await contains(".o-mail-Thread", { scroll: "bottom" });
            },
        },
        {
            trigger: "*[title='Pinned Messages']",
            run: "click",
        },
        {
            trigger: ".o-mail-MessageCard-jump",
            run: "click",
        },
        {
            // Messages depends on FETCH_LIMIT (currently set to 30) in
            // the thread service. Thus, at first load the message range
            // will be (31 - 60). This trigger ensures the next messages
            // are fetched after jumping to the message.
            trigger:
                ".o-mail-Thread .o-mail-Message:first .o-mail-Message-textContent:not(:contains(31))",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 16 });
                await contains(".o-mail-Thread", { scroll: 0 });
                // ensure 1 - 16 are loaded in order: 15 below and the
                // one we're loading messages around.
                const messages = Array.from(
                    document.querySelectorAll(".o-mail-Thread .o-mail-Message-content")
                ).map((el) => el.innerText);
                for (let i = 0; i < 16; i++) {
                    if (messages[i] !== (i + 1).toString()) {
                        throw new Error("Wrong message order after loading around");
                    }
                }
                await scroll(".o-mail-Thread", "bottom");
            },
        },
        {
            // After jumping to the pinned message, the message range
            // was (1 -16): 15 before (but none were found), 15 after
            // and the pinned message itself. This trigger ensures the
            // next messages are fetched after scrolling to the bottom.
            trigger: ".o-mail-Thread .o-mail-Message .o-mail-Message-textContent:contains(17)",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 46 });
                // ensure 1 - 46  are loaded in order.
                const messages = Array.from(
                    document.querySelectorAll(".o-mail-Thread .o-mail-Message-content")
                ).map((el) => el.innerText);
                for (let i = 0; i < 46; i++) {
                    if (messages[i] !== (i + 1).toString()) {
                        throw new Error("Wrong message order after loading after");
                    }
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /mail/static/tests/tours/mail_template_dynamic_placeholder_tour.js  *
*  Lines: 184                                                                    *
*********************************************************************************/
odoo.define('@mail/../tests/tours/mail_template_dynamic_placeholder_tour', ['@web/core/registry', '@web/../tests/utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains } = require("@web/../tests/utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("mail_template_dynamic_placeholder_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Go into the Setting "app"',
            trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        },
        {
            content: "Open email templates",
            trigger: 'button[name="open_mail_templates"]',
        },
        {
            content: "Create a new email template",
            trigger: "button.o_list_button_add",
        },
        {
            content: 'Insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            async run(actions) {
                actions.text(`no_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
                await contains("div[name='subject'] input[type='text']", {
                    value: "no_model_id #",
                });
                await contains(".o_notification", {
                    text: "You need to select a model before opening the dynamic placeholder selector.",
                });
            },
        },
        {
            content: 'Select "Contact" model',
            trigger: 'div[name="model_id"] input[type="text"]',
            run: "text Contact",
        },
        {
            content: "Wait for the autocomplete RPC",
            trigger: 'div[name="model_id"] .ui-autocomplete:contains("Contact")',
            isCheck: true,
        },
        {
            content: "Click on contact",
            trigger: 'div[name="model_id"] .ui-autocomplete',
            run: async function () {
                const contact = Array.from(
                    document.querySelectorAll(
                        'div[name="model_id"] .ui-autocomplete .dropdown-item'
                    )
                ).find((el) => el.textContent === "Contact");
                await contact.click();
            },
        },
        {
            content: "Wait for the drop down to disappear",
            trigger: 'div[name="model_id"] .o-autocomplete:not(:has(.ui-autocomplete))',
            run: async () => {
                // Ensure the system has registered a correct model value before
                // we try to open the DPH.
                // It seems that the autocomplete validation can be very slow.
                await new Promise((r) => setTimeout(r, 200));
            },
        },
        {
            content: 'Retry insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`yes_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
            isCheck: true,
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Wait for the popover to disappear",
            trigger: "body:not(:has(.o_model_field_selector_popover))",
        },
        {
            content: "Check if subject value was correclty updated",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                const correctValue = "yes_model_id {{object.name or '''defValue'''}}";
                if (subjectValue !== correctValue) {
                    console.error(
                        `Email template should have "${correctValue}" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Insert tesxt inside editable",
            trigger: ".note-editable.odoo-editor-editable",
            run(actions) {
                actions.text(`/`, this.$anchor);
                document.querySelector(".note-editable").dispatchEvent(
                    new InputEvent("input", {
                        inputType: "insertText",
                        data: "/",
                    })
                );
            },
        },
        {
            content: "Click on the the dynamic placeholder commandBar options",
            trigger: "div.oe-powerbox-commandWrapper:contains(Dynamic Placeholder)",
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Ensure the editable contain the dynamic placeholder t tag",
            trigger:
                ".note-editable.odoo-editor-editable t[t-out=\"object.name or '''defValue'''\"]",
        },
        {
            content: "Discard form changes",
            trigger: "button.o_form_button_cancel",
        },
        {
            content: "Wait for the form view to disappear",
            trigger: "body:not(:has(.o_form_sheet))",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 41                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/user_modify_own_profile_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * Verify that a user can modify their own profile information.
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/user_modify_own_profile_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Open user account menu",
            trigger: ".o_user_menu button",
        },
        {
            content: "Open preferences / profile screen",
            trigger: "[data-menu=settings]",
        },
        {
            content: "Update the email address",
            trigger: 'div[name="email"] input',
            run: "text updatedemail@example.com",
        },
        {
            content: "Save the form",
            trigger: 'button[name="preference_save"]',
            extra_trigger: "body.modal-open",
        },
        {
            content: "Wait until the modal is closed",
            isCheck: true,
            trigger: "body:not(.modal-open)",
        },
    ],
});

return __exports;
});
;

/***************************************************
*  Filepath: /portal/static/tests/tours/portal.js  *
*  Lines: 39                                       *
***************************************************/
odoo.define('@portal/../tests/tours/portal', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('portal_load_homepage', {
    test: true,
    url: '/my',
    steps: () => [
        {
            content: "Check portal is loaded",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
        },
        {
            content: "Load my account details",
            trigger: 'input[value="Joel Willis"]',
            isCheck: true,
        },
        {
            content: 'type a different phone number',
            trigger: 'input[name="phone"]',
            run: 'text +1 555 666 7788',
        },
        {
            content: "Submit the form",
            trigger: 'button[type=submit]',
        },
        {
            content: "Check that we are back on the portal",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
            isCheck: true,
        }
    ]
});

return __exports;
});
;

/*************************************************************
*  Filepath: /account/static/tests/tours/tax_group_tests.js  *
*  Lines: 135                                                *
*************************************************************/
odoo.define('@account/../tests/tours/tax_group_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_tax_group', {
    test: true,
    url: "/web",
    steps: () => [stepUtils.showAppsMenuItem(),
    {
        id: 'account_menu_click',
        content: "Go to Invoicing",
        trigger: '.o_app[data-menu-xmlid="account.menu_finance"]',
    },
    {
        content: "Go to Vendors",
        trigger: 'span:contains("Vendors")',
    },
    {
        content: "Go to Bills",
        trigger: 'a:contains("Bills")',
    },
    {
        extra_trigger: '.o_breadcrumb .text-truncate:contains("Bills")',
        content: "Create new bill",
        trigger: '.o_control_panel_main_buttons .d-none .o_list_button_add',
    },
    // Set a vendor
    {
        content: "Add vendor",
        trigger: 'div.o_field_widget.o_field_res_partner_many2one[name="partner_id"] div input',
        run: 'text Account Tax Group Partner',
    },
    {
        content: "Valid vendor",
        trigger: '.ui-menu-item a:contains("Account Tax Group Partner")',
    },
    // Add First product
    {
        content: "Add items",
        trigger: 'div[name="invoice_line_ids"] .o_field_x2many_list_row_add a:contains("Add a line")',
    },
    {
        content: "Select input",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
    },
    {
        content: "Type item",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
        run: "text Account Tax Group Product",
    },
    {
        content: "Valid item",
        trigger: '.ui-menu-item-wrapper:contains("Account Tax Group Product")',
    },
    // Save account.move
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Edit tax group amount
    {
        content: "Edit tax group amount",
        trigger: '.o_tax_group_edit',
    },
    {
        content: "Modify the input value",
        trigger: '.o_tax_group_edit_input input',
        run: function (actions) {
            $('.o_tax_group_edit_input input').val(200);
            $('.o_tax_group_edit_input input').select();
            $('.o_tax_group_edit_input input').blur();
        },
    },
    // Check new value for total (with modified tax_group_amount).
    {
        content: "Valid total amount",
        trigger: 'span[name="amount_total"]:contains("800")',
    },
    // Modify the quantity of the object
    {
        content: "Select item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"]',
    },
    {
        content: "Change item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: 'text 2',
    },
    {
        content: "Valid the new value",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: function (actions) {
            let keydownEvent = jQuery.Event('keydown');
            keydownEvent.key = "Enter";
            this.$anchor.trigger(keydownEvent);
        },
    },
    // Save form
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Check new tax group value
    {
        content: "Check new value of tax group",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
    {
        content: "Edit tax value",
        trigger: '.o_tax_group_edit_input input',
        run: 'text 2'
    },
    {
        content: "Check new value of total",
        trigger: '.oe_subtotal_footer_separator:contains("1,202")',
    },
    {
        content: "Discard changes",
        trigger: '.o_form_button_cancel',
    },
    {
        content: "Check tax value is reset",
        trigger: '.o_tax_group_amount_value:contains("120")',
        isCheck: true,
    },
]});

return __exports;
});
;

/************************************************************
*  Filepath: /calendar/static/tests/tours/calendar_tour.js  *
*  Lines: 172                                               *
************************************************************/
odoo.define('@calendar/../tests/tours/calendar_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const todayDate = function () {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");

    return `${month}/${day}/${year} 10:00:00`;
};

registry.category("web_tour.tours").add("calendar_appointments_hour_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
            content: "Open Calendar",
            run: "click",
        },
        {
            trigger: ".o-calendar-button-new",
            content: "Create a new event",
            run: "click",
        },
        {
            trigger: "#name_0",
            content: "Give a name to the new event",
            run: "text TEST EVENT",
        },
        {
            trigger: "#start_0",
            content: "Give a date to the new event",
            run: `text ${todayDate()}`,
        },
        {
            trigger: "#duration_0",
            content: "Give a duration to the new event",
            run: "text 02:00",
        },
        {
            trigger: ".fa-cloud-upload",
            content: "Save the new event",
            run: "click",
        },
        {
            trigger: ".o_back_button",
            content: "Go back to Calendar view",
            run: "click",
        },
        {
            trigger: '.scale_button_selection',
            content: "Click to change calendar view",
            run: "click",
        },
        {
            trigger: '.dropdown-item:contains("Month")',
            content: "Change the calendar view to Month",
            run: "click",
        },
        {
            trigger: '.fc-day-header:contains("Mon")',
            content: "Check the day is properly displayed",
        },
        {
            trigger: '.fc-time:contains("10:00")',
            content: "Check the time is properly displayed",
        },
        {
            trigger: '.o_event_title:contains("TEST EVENT")',
            content: "Check the event title",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_delete_tour", {
    test: true,
    steps: () => [
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Validate the deletion",
            trigger: 'button:contains("Delete")',
            async run() {
                $('button:contains("Delete")').click();
                await new Promise((r) => setTimeout(r, 1000));
            },
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_decline_tour", {
    test: true,
    steps: () => [
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Wait declined status",
            trigger: ".o_attendee_status_declined",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_decline_with_everybody_filter_tour", {
    test: true,
    steps: () => [
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Wait declined status",
            trigger: ".o_attendee_status_declined",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /contacts/static/tests/tours/debug_menu_set_defaults.js  *
*  Lines: 77                                                          *
**********************************************************************/
odoo.define('@contacts/../tests/tours/debug_menu_set_defaults', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('debug_menu_set_defaults', {
        test: true,
        url: '/web?debug=1',
        steps: () => [
            ...stepUtils.goToAppSteps('contacts.menu_contacts', "Open the contacts menu"),
            {
                content: "Create a new contact",
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Company is checked by default, and not Individual",
                trigger: '.o_field_widget[name="company_type"] input[data-value="company"]:checked',
                run: function () {},
            },
            {
                content: "Select the individual radio button",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]',
            },
            {
                content: "Open the debug menu",
                trigger: '.o_debug_manager button',
            },
            {
                content: "Click the Set Defaults menu",
                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',
            },
            {
                content: "Choose Company Type = Individual",
                trigger: '#formview_default_fields',
                run: function () {
                    const element_field = document.querySelector('select#formview_default_fields');
                    element_field.value = 'company_type';
                    element_field.dispatchEvent(new Event("change"));
                },
            },
            {
                content: "Check that there are conditions",
                trigger: '#formview_default_conditions',
            },
            {
                content: "Save the new default",
                trigger: 'footer button:contains(Save default)',
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                trigger: '.o_action_manager > .o_kanban_view .o-kanban-button-new',
            },
            {
                content: "Check that Individual is checked instead of Company",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]:checked',
                run: function () {},
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                content: "Wait for discard",
                trigger: '.o_control_panel .o-kanban-button-new',
                run() {},
            },
        ]
    });

return __exports;
});
;

/**************************************************************
*  Filepath: /crm/static/tests/tours/create_crm_team_tour.js  *
*  Lines: 44                                                  *
**************************************************************/
odoo.define('@crm/../tests/tours/create_crm_team_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('create_crm_team_tour', {
    url: "/web",
    test: true,
    steps: () => [
    ...stepUtils.goToAppSteps('crm.crm_menu_root'),
{
    trigger: 'button[data-menu-xmlid="crm.crm_menu_config"]',
}, {
    trigger: 'a[data-menu-xmlid="crm.crm_team_config"]',
}, {
    trigger: 'button.o_list_button_add',
}, {
    trigger: 'input[id="name_0"]',
    run: 'text My CRM Team',
}, {
    trigger: 'button.o-kanban-button-new',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Salesman") input.form-check-input',
    run: 'click',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Sales Manager") input.form-check-input',
    run: 'click',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Sales Manager") input.form-check-input:checked',
    run: () => {},
}, {
    trigger: '.o_list_selection_box:contains(2)',
    run: () => {},
}, {
    trigger: 'button.o_select_button',
}, 
    ...stepUtils.saveForm()
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /crm/static/tests/tours/crm_email_and_phone_propagation.js  *
*  Lines: 62                                                             *
*************************************************************************/
odoo.define('@crm/../tests/tours/crm_email_and_phone_propagation', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('crm_email_and_phone_propagation_edit_save', {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: 'open crm app',
        }, {
            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',
            content: 'Open the first lead',
            run: 'click',
        }, {
            trigger: '.o_form_button_save',
            extra_trigger: '.o_form_editable .o_field_widget[name=email_from] input',
            content: 'Save the lead',
            run: 'click',
        },
    ]});

    registry.category("web_tour.tours").add('crm_email_and_phone_propagation_remove_email_and_phone', {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: 'open crm app',
        }, {
            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',
            content: 'Open the first lead',
            run: 'click',
        }, {
            trigger: '.o_form_editable .o_field_widget[name=email_from] input',
            extra_trigger: '.o_form_editable .o_field_widget[name=phone] input',
            content: 'Remove the email and the phone',
            run: function (action) {
                action.remove_text("", ".o_form_editable .o_field_widget[name=email_from] input");
                action.remove_text("", ".o_form_editable .o_field_widget[name=phone] input");
            },
        }, {
            trigger: '.o_back_button',
            // wait the warning message to be visible
            extra_trigger: '.o_form_sheet_bg .fa-exclamation-triangle:not(.o_invisible_modifier)',
            content: 'Save the lead and exit to kanban',
            run: 'click',
        },{
            trigger: '.o_kanban_renderer',
            isCheck: true,
        }
    ]});

return __exports;
});
;

/***********************************************************
*  Filepath: /crm/static/tests/tours/crm_forecast_tour.js  *
*  Lines: 95                                               *
***********************************************************/
odoo.define('@crm/../tests/tours/crm_forecast_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const today = luxon.DateTime.now();

registry.category("web_tour.tours").add('crm_forecast', {
    test: true,
    url: "/web",
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        trigger: ".o_app[data-menu-xmlid='crm.crm_menu_root']",
        content: "open crm app",
    }, {
        trigger: '.dropdown-toggle[data-menu-xmlid="crm.crm_menu_report"]',
        content: 'Open Reporting menu',
        run: 'click',
    }, {
        trigger: '.dropdown-item[data-menu-xmlid="crm.crm_menu_forecast"]',
        content: 'Open Forecast menu',
        run: 'click',
    }, {
        trigger: '.o_column_quick_create:contains(Add next month)',
        content: 'Wait page loading'
    }, {
        trigger: ".o-kanban-button-new",
        content: "click create",
        run: 'click',
    }, {
        trigger: ".o_field_widget[name=name] input",
        content: "complete name",
        run: "text Test Opportunity 1",
    }, {
        trigger: ".o_field_widget[name=expected_revenue] input",
        content: "complete expected revenue",
        run: "text 999999",
    }, {
        trigger: "button.o_kanban_edit",
        content: "edit lead",
    }, {
        trigger: "div[name=date_deadline] input",
        content: "complete expected closing",
        run: `text ${today.toFormat("MM/dd/yyyy")}`,
    }, {
        trigger: "div[name=date_deadline] input",
        content: "click to make the datepicker disappear",
        run: "click"
    }, {
        trigger: '.o_back_button',
        content: 'navigate back to the kanban view',
        position: "bottom",
        run: "click"
    }, {
        trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')",
        content: "move to the next month",
        run: function (actions) {
            const undefined_groups = $('.o_column_title:contains("None")').length;
            actions.drag_and_drop_native(`.o_opportunity_kanban .o_kanban_group:eq(${1 + undefined_groups})`, this.$anchor);
        },
    }, {
        trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')",
        content: "edit lead",
        run: "click"
    }, {
        trigger: ".o_field_widget[name=date_deadline] input",
        content: "complete expected closing",
        run: function (actions) {
            actions.text(`text ${today.plus({months: 5}).startOf('month').minus({days: 1}).toFormat("MM/dd/yyyy")}`, this.$anchor);
            this.$anchor[0].dispatchEvent(new KeyboardEvent("keydown", { bubbles: true, key: "Escape" }));
        },
    }, {
        trigger: ".o_field_widget[name=probability] input",
        content: "max out probability",
        run: "text 100"
    }, {
        trigger: '.o_back_button',
        content: 'navigate back to the kanban view',
        position: "bottom",
        run: "click"
    }, {
        trigger: '.o_kanban_add_column',
        content: "add next month",
        run: "click"
    }, {
        trigger: ".o_kanban_record:contains('Test Opportunity 1'):contains('Won')",
        content: "assert that the opportunity has the Won banner",
        run: function () {},
    }
]});

return __exports;
});
;

/********************************************************
*  Filepath: /crm/static/tests/tours/crm_rainbowman.js  *
*  Lines: 95                                            *
********************************************************/
odoo.define('@crm/../tests/tours/crm_rainbowman', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/tour_service/tour_utils');

    registry.category("web_tour.tours").add('crm_rainbowman', {
        test: true,
        url: "/web",
        steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: ".o_app[data-menu-xmlid='crm.crm_menu_root']",
            content: "open crm app",
        }, {
            trigger: ".o-kanban-button-new",
            content: "click create",
        }, {
            trigger: ".o_field_widget[name=name] input",
            content: "complete name",
            run: "text Test Lead 1",
        }, {
            trigger: ".o_field_widget[name=expected_revenue] input",
            content: "complete expected revenue",
            run: "text 999999997",
        }, {
            trigger: "button.o_kanban_add",
            content: "create lead",
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')",
            content: "move to won stage",
            run: "drag_and_drop_native .o_opportunity_kanban .o_kanban_group:has(.o_column_title:contains('Won')) "
        }, {
            trigger: ".o_reward_rainbow",
            extra_trigger: ".o_reward_rainbow",
            run: function () {} // check rainbowman is properly displayed
        }, {
            // This step and the following simulates the fact that after drag and drop,
            // from the previous steps, a click event is triggered on the window element,
            // which closes the currently shown .o_kanban_quick_create.
            trigger: ".o_kanban_renderer",
        }, {
            trigger: ".o_kanban_renderer:not(:has(.o_kanban_quick_create))",
            run() {},
        }, {
            trigger: ".o-kanban-button-new",
            content: "create second lead",
        }, {
            trigger: ".o_field_widget[name=name] input",
            content: "complete name",
            run: "text Test Lead 2",
        }, {
            trigger: ".o_field_widget[name=expected_revenue] input",
            content: "complete expected revenue",
            run: "text 999999998",
        }, {
            trigger: "button.o_kanban_add",
            content: "create lead",
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')",
            run: function () {} // wait for the record to be properly created
        }, {
            // move first test back to new stage to be able to test rainbowman a second time
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')",
            content: "move back to new stage",
            run: "drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(0) "
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')",
            content: "click on second lead",
        }, {
            trigger: ".o_statusbar_status button[data-value='4']",
            content: "move lead to won stage",
        },
        ...stepUtils.saveForm(),
        {
            trigger: ".o_statusbar_status button[data-value='1']",
            extra_trigger: ".o_reward_rainbow",
            content: "move lead to previous stage & rainbowman appears",
        }, {
            trigger: "button[name=action_set_won_rainbowman]",
            content: "click button mark won",
        },
        ...stepUtils.saveForm(),
        {
            trigger: ".o_menu_brand",
            extra_trigger: ".o_reward_rainbow",
            content: "last rainbowman appears",
            isCheck: true,
        }
    ]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /website/static/tests/tour_utils/focus_blur_snippets_options.js  *
*  Lines: 24                                                                  *
******************************************************************************/
odoo.define('@website/../tests/tour_utils/focus_blur_snippets_options', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

odoo.loader.bus.addEventListener("module-started", (e) => {
    if (e.detail.moduleName === "@web_editor/js/editor/snippets.options") {
        const options = e.detail.module[Symbol.for("default")];
        const FocusBlur = options.Class.extend({
            onFocus() {
                window.focusBlurSnippetsResult.push(`focus ${this.focusBlurName}`);
            },
            onBlur() {
                window.focusBlurSnippetsResult.push(`blur ${this.focusBlurName}`);
            },
        });
        options.registry.FocusBlurParent = FocusBlur.extend({focusBlurName: 'parent'});
        options.registry.FocusBlurChild1 = FocusBlur.extend({focusBlurName: 'child1'});
        options.registry.FocusBlurChild2 = FocusBlur.extend({focusBlurName: 'child2'});
    }
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /website/static/tests/tour_utils/website_preview_test.js  *
*  Lines: 23                                                           *
***********************************************************************/
odoo.define('@website/../tests/tour_utils/website_preview_test', ['@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { patch } = require("@web/core/utils/patch");

// It's an optionnal import, to patch only when the WebsitePreview is loaded.
const WebsitePreviewLoader = odoo.loader.modules.get("@website/client_actions/website_preview/website_preview");

if (WebsitePreviewLoader) {
    patch(WebsitePreviewLoader.WebsitePreview.prototype, {
        /**
         * @override
         */
        get testMode() {
            return true;
        }
    });
}

return __exports;
});
;

/******************************************************************************
*  Filepath: /website/static/tests/tour_utils/widget_lifecycle_dep_widget.js  *
*  Lines: 50                                                                  *
******************************************************************************/
odoo.define('@website/../tests/tour_utils/widget_lifecycle_dep_widget', ['@web/core/browser/browser'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { browser } = require("@web/core/browser/browser");
const localStorage = browser.localStorage;

odoo.loader.bus.addEventListener("module-started", (e) => {
    if (e.detail.moduleName !== "@web/legacy/js/public/public_widget") {
        return;
    }

    const publicWidget = e.detail.module[Symbol.for("default")];

    const localStorageKey = 'widgetAndWysiwygLifecycle';
    if (!localStorage.getItem(localStorageKey)) {
        localStorage.setItem(localStorageKey, '[]');
    }

    function addLifecycleStep(step) {
        const oldValue = localStorage.getItem(localStorageKey);
        const newValue = JSON.stringify(JSON.parse(oldValue).concat(step));
        localStorage.setItem(localStorageKey, newValue);
    }

    publicWidget.registry.CountdownPatch = publicWidget.Widget.extend({
        selector: ".s_countdown",
        disabledInEditableMode: false,

        /**
         * @override
         */
        async start() {
            addLifecycleStep('widgetStart');
            await this._super(...arguments);
            this.el.classList.add("public_widget_started");
        },
        /**
         * @override
         */
        destroy() {
            this.el.classList.remove("public_widget_started");
            addLifecycleStep('widgetStop');
            this._super(...arguments);
        },
    });
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/carousel_content_removal.js  *
*  Lines: 108                                                         *
**********************************************************************/
odoo.define('@website/../tests/tours/carousel_content_removal', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const carouselInnerSelector = "iframe .carousel-inner";

wTourUtils.registerWebsitePreviewTour("carousel_content_removal", {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_carousel',
        name: 'Carousel',
}), {
    trigger: "iframe .carousel .carousel-item.active .carousel-content",
    content: "Select the active carousel item.",
}, {
    trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    content: "Remove the active carousel item.",
}, {
    trigger: "iframe .carousel .carousel-item.active .container:not(:has(*))",
    content: "Check for a carousel slide with an empty container tag",
    allowInvisible: true,
    run: function () {},
}]);

wTourUtils.registerWebsitePreviewTour("snippet_carousel", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: "s_carousel", name: "Carousel"}),
    wTourUtils.clickOnSnippet(".carousel .carousel-item.active"),
    // Slide to the right.
    wTourUtils.changeOption("CarouselItem", 'we-button[data-switch-to-slide="right"]'),
    {
        content: "Check if the second slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(2)`,
        isCheck: true,
    },
    // Add a slide (with the "CarouselItem" option).
    wTourUtils.changeOption("CarouselItem", "we-button[data-add-slide-item]"),
    {
        content: "Check if there are four slides and if the third one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(4)) > div.active:nth-child(3)`,
        isCheck: true,
    },
     // Remove a slide.
     wTourUtils.changeOption("CarouselItem", "we-button[data-remove-slide]"),
    {
        content: "Check if there are three slides and if the second one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(3)) > div.active:nth-child(2)`,
        isCheck: true,
    }, {
        trigger: "iframe .carousel .carousel-control-prev",
        content: "Slide the carousel to the left with the arrows.",
    }, {
        content: "Check if the first slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(1)`,
        isCheck: true,
    },
    // Add a slide (with the "Carousel" option).
    wTourUtils.changeOption("Carousel", "we-button[data-add-slide]"),
    {
        content: "Check if there are four slides and if the second one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(4)) > div.active:nth-child(2)`,
        isCheck: true,
    }, {
        content: "Check if the slide indicator was correctly updated",
        trigger: "we-customizeblock-options span:contains(' (2/4)')",
        isCheck: true,
    },
    // Check if we can still remove a slide.
    wTourUtils.changeOption("CarouselItem", "we-button[data-remove-slide]"),
    {
        content: "Check if there are three slides and if the first one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(3)) > div.active:nth-child(1)`,
        isCheck: true,
    },
    // Slide to the left.
    wTourUtils.changeOption("CarouselItem", 'we-button[data-switch-to-slide="left"]'),
    {
        content: "Check if the third slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(3)`,
        isCheck: true,
    },
    // Reorder the slides and make it the second one.
    wTourUtils.changeOption("GalleryElement", 'we-button[data-position="prev"]'),
    {
        content: "Check if the second slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(2)`,
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    // Check that saving always sets the first slide as active.
    {
        content: "Check that the first slide became the active one",
        trigger: `${carouselInnerSelector} > div.active:nth-child(1)`,
        isCheck: true,
    },
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/client_action_iframe_fallback.js  *
*  Lines: 29                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/client_action_iframe_fallback', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('client_action_iframe_fallback', {
    test: true,
    url: '/',
},
() => [
    {
        content: "Ensure we are on the expected page",
        trigger: 'body iframe html[data-view-xmlid="website.homepage"]',
        run: () => {}, // It's a check.
    }, {
        content: "Ensure the iframe fallback is not loaded in test mode",
        trigger: 'body',
        run: () => {
            if (document.querySelector('iframe[src="/website/iframefallback"]')) {
                console.error("The iframe fallback shouldn't be inside the DOM.");
            }
        },
    },
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/client_action_redirect.js  *
*  Lines: 86                                                        *
********************************************************************/
odoo.define('@website/../tests/tours/client_action_redirect', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const testUrl = '/test_client_action_redirect';

const goToFrontendSteps = [{
    content: "Go to the frontend",
    trigger: 'body',
    run: () => {
        window.location.href = testUrl;
    },
}, {
    content: "Check we are in the frontend",
    trigger: 'body:not(:has(.o_website_preview)) #test_contact_FE',
    run: () => null, // it's a check
}];
const goToBackendSteps = [{
    content: "Go to the backend",
    trigger: 'body',
    run: () => {
        window.location.href = `/@${testUrl}`;
    },
}, {
    content: "Check we are in the backend",
    trigger: '.o_website_preview',
    run: () => null, // it's a check
}];
const checkEditorSteps = [{
    content: "Check that the editor is loaded",
    trigger: 'iframe body.editor_enable',
    timeout: 30000,
    run: () => null, // it's a check
}, {
    content: "exit edit mode",
    trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
}, {
    content: "wait for editor to close",
    trigger: 'iframe body:not(.editor_enable)',
    run: () => null, // It's a check
}];

registry.category("web_tour.tours").add('client_action_redirect', {
    test: true,
    url: testUrl,
    steps: () => [
    // Case 1: From frontend, click on `enable_editor=1` link without `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to frontend",
        trigger: '#test_contact_FE',
    },
    ...checkEditorSteps,

    // Case 2: From frontend, click on `enable_editor=1` link with `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to backend",
        trigger: '#test_contact_BE',
    },
    ...checkEditorSteps,

    // Case 3: From backend, click on `enable_editor=1` link without `/@/` in it
    // TODO: This will be fixed in another fix related to the listening of the
    //       URL changes from the client action.
    // ...goToBackendSteps,
    // {
    //     content: "Click on the link to frontend (2)",
    //     trigger: 'iframe #test_contact_FR',
    // },
    // ...checkEditorSteps,

    // Case 4: From backend, click on `enable_editor=1` link with `/@/` in it
    ...goToBackendSteps,
    {
        content: "Click on the link to backend (2)",
        trigger: 'iframe #test_contact_BE',
    },
    ...checkEditorSteps,
]});

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/colorpicker.js  *
*  Lines: 75                                             *
*********************************************************/
odoo.define('@website/../tests/tours/colorpicker', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

function selectColorpickerSwitchPanel(type) {
    return [
        {
            content: "Select text snippet",
            trigger: "iframe #wrap .s_text_block",
        },
        {
            content: "Click on background-color option",
            trigger: ".o_we_so_color_palette[data-css-property='background-color']",
        },
        {
            content: "Select type of colorpicker in switch panel",
            trigger: `.o_we_colorpicker_switch_pane_btn[data-target="${type}"]`,
        },
    ]
}

function checkBackgroundColorWithRGBA(red, green, blue) {
    return [
        {
            content: "Check if the RGBA color matches the selected color",
            trigger: ".o_rgba_div",
            run: ({ tip_widget }) => {
                const rgbaEl = tip_widget.$anchor[0];
                const red_color = rgbaEl.querySelector(".o_red_input").value;
                const green_color = rgbaEl.querySelector(".o_green_input").value;
                const blue_color = rgbaEl.querySelector(".o_blue_input").value;
                if (red_color != red || green_color != green || blue_color != blue) {
                    console.error("There may be a problem with the RGBA colorpicker");
                }
            }
        },
    ]
}

wTourUtils.registerWebsitePreviewTour("website_background_colorpicker", {
    test: true,
    edition: true,
    url: "/",
}, () => [
    wTourUtils.dragNDrop({
        id: "s_text_block",
        name: "Text",
    }),
    ...selectColorpickerSwitchPanel("gradients"),
    {
        content: "Select first gradient element",
        trigger: ".o_colorpicker_section .o_we_color_btn[data-color='linear-gradient(135deg, rgb(255, 204, 51) 0%, rgb(226, 51, 255) 100%)']",
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    ...selectColorpickerSwitchPanel("gradients"),
    ...checkBackgroundColorWithRGBA("255", "204", "51"),
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    ...selectColorpickerSwitchPanel("custom-colors"),
    {
        content: "Select first custom color element",
        trigger: ".o_colorpicker_section .o_we_color_btn[style='background-color:#65435C;']",
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    ...selectColorpickerSwitchPanel("custom-colors"),
    ...checkBackgroundColorWithRGBA("101", "67", "92"),
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility.js  *
*  Lines: 256                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
    {
        id: "s_banner",
        name: "Banner",
    },
    {
        id: "s_popup",
        name: "Popup",
    },
];
function checkEyeIcon(snippetName, visible) {
    const eyeIcon = visible ? "fa-eye" : "fa-eye-slash";
    const openOrClose = visible ? "open" : "close";
    const endExplanation = `should be ${openOrClose} in the "Invisible Elements" panel`;
    const invisibleElPanel = "o_we_invisible_el_panel";
    return {
            content: `The eye icon of ${snippetName} ${endExplanation}`,
            trigger:
            `.${invisibleElPanel} .o_we_invisible_entry:contains("${snippetName}") i.${eyeIcon}`,
            run: () => {}, // it is a check
        };
}
function checkEyesIconAfterSave(footerIsHidden = true) {
    const eyeIconChecks = [
        checkEyeIcon("Header", false),
        checkEyeIcon("Text - Image", true),
        checkEyeIcon("Popup", false),
        checkEyeIcon("Banner", true),
    ];
    if (footerIsHidden) {
        eyeIconChecks.push(checkEyeIcon("Footer", false));
    }
    return eyeIconChecks;
}
wTourUtils.registerWebsitePreviewTour('conditional_visibility_1', {
    edition: true,
    url: '/',
    test: true,
}, () => [
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),
wTourUtils.changeOption('ConditionalVisibility', 'we-toggler'),
{
    content: 'click on conditional visibility',
    trigger: '[data-name="visibility_conditional"]',
    run: 'click',
},
{
    content: 'click on utm medium toggler',
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-toggler',
    run: 'click',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items .o_we_m2o_search input',
    content: 'Search for Email',
    run: 'text Email',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items [data-add-record="Email"]',
    content: 'click on Email',
    run: 'click',
},
...wTourUtils.clickOnSave(),
{
    content: 'Check if the rule was applied',
    extra_trigger: '.o_website_preview:only-child',
    trigger: 'iframe #wrap',
    allowInvisible: true,
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display !== 'none') {
            console.error('error This item should be invisible and only visible if utm_medium === email');
        }
    },
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Check if the element is visible as it should always be visible in edit view',
    trigger: 'iframe #wrap .s_text_image',
    run: function (actions) {
        const style = window.getComputedStyle((this.$anchor[0]));
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_3", {
    edition: true,
    test: true,
    url: "/",
},
() => [
checkEyeIcon("Text - Image", true),
// Drag a "Banner" snippet on the website.
wTourUtils.dragNDrop(snippets[1]),
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
wTourUtils.changeOption("ConditionalVisibility", "we-toggler"),
wTourUtils.changeOption("ConditionalVisibility", '[data-name="visibility_conditional"]'),
checkEyeIcon("Banner", true),
wTourUtils.goBackToBlocks(),
// Drag a "Popup" snippet on the website.
wTourUtils.dragNDrop(snippets[2]),
{
    content: "Toggle the visibility of the popup",
    in_modal: false,
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup')",
},
checkEyeIcon("Popup", false),
{
    content: "Click on footer",
    trigger: "iframe #wrapwrap footer",
},
wTourUtils.changeOption("HideFooter", "we-checkbox"),
checkEyeIcon("Footer", false),
{
    content: "Click on Header",
    trigger: "iframe #wrapwrap header",
},
wTourUtils.changeOption("TopMenuVisibility", "we-toggler"),
wTourUtils.changeOption("TopMenuVisibility", '[data-visibility="hidden"]'),
checkEyeIcon("Header", false),
{
    content: "Toggle the visibility of the Banner snippet",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Banner')",
},
checkEyeIcon("Banner", false),
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
...checkEyesIconAfterSave(),
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_4", {
    edition: true,
    test: true,
    url: "/",
},
() => [
// Click on the "Text-Image" snippet.
wTourUtils.clickOnSnippet(snippets[0]),
{
    content: "Click on the 'move down' option",
    trigger: "iframe we-button.o_we_user_value_widget.fa-angle-down",
},
...checkEyesIconAfterSave(),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Banner')",
    run: () => {}, // it is a check
},
{
    content: "Toggle the visibility of the Footer",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Footer')",
},
{
    content: "Check that the footer is visible",
    trigger: "iframe #wrapwrap footer",
    run: () => {}, // it is a check
},
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
{
    content: "Drag the 'Banner' snippet to the end of the page",
    trigger: "iframe .o_overlay_move_options .o_move_handle",
    run: "drag_and_drop_native iframe #wrapwrap footer",
},
...checkEyesIconAfterSave(false),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Text - Image')",
    run: () => {}, // it is a check
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_5", {
    edition: true,
    test: true,
    url: "/",
}, () => [
    wTourUtils.dragNDrop(snippets[0]),
    {
        content: "Click on the image of the dragged snippet",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("DeviceVisibility", 'we-button[data-toggle-device-visibility="no_desktop"]'),
    {
        content: "Check that the Column has been added in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Column')",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Text - Image' snippet",
        trigger: "iframe .s_text_image",
    },
    wTourUtils.changeOption("ConditionalVisibility", 'we-button[data-toggle-device-visibility="no_desktop"]'),
    {
        content: "Check that the 'Text - Image' is the parent of 'Column' in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image') + ul .o_we_invisible_entry.o_we_sublevel_1:contains('Column')",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Text - Image' entry on the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image')",
    },
    {
        content: "Check that the snippet is visible on the website",
        trigger: "iframe .s_text_image.o_snippet_desktop_invisible.o_snippet_override_invisible",
        run: () => {}, // it is a check
    },
    wTourUtils.changeOption("ConditionalVisibility", 'we-button[data-toggle-device-visibility="no_mobile"]'),
    {
        content: "Check that the 'Text - Image' has been removed from the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel:not(.o_we_invisible_entry:contains('Text - Image'))",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Column' entry on the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Column')",
    },
    {
        content: "Check that the column is visible on the website",
        trigger: "iframe .s_text_image .row > .o_snippet_desktop_invisible.o_snippet_override_invisible",
        run: () => {}, // it is a check
    },
    wTourUtils.changeOption("DeviceVisibility", 'we-button[data-toggle-device-visibility="no_mobile"]'),
    {
        content: "Check that the column has been removed from the 'Invisible Elements' panel",
        trigger: "#oe_snippets:not(:has(.o_we_invisible_entry:contains('Column')))",
        run: () => {}, // it is a check
    },
    {
        content: "Activate mobile preview",
        trigger: ".o_we_website_top_actions button[data-action='mobile']",
    },
    {
        content: "Check that the 'Text - Image' is the parent of 'Column' in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image') + ul .o_we_invisible_entry.o_we_sublevel_1:contains('Column')",
        run: () => {}, // it is a check
    },
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility_frontend.js  *
*  Lines: 24                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility_frontend', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('conditional_visibility_2', {
    test: true,
    url: '/?utm_medium=Email',
    steps: () => [{
    content: 'The content previously hidden should now be visible',
    trigger: 'body #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/configurator_translation.js  *
*  Lines: 84                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/configurator_translation', ['@web/core/registry', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

registry.category("web_tour.tours").add('configurator_translation', {
    test: true,
    url: '/website/configurator',
    steps: () => [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Make sure "Back" works
    {
        content: "use browser's Back",
        trigger: 'a.o_change_website_type',
        run: () => {
            window.history.back();
        },
    }, {
        content: "return to description screen",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("in fr")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "select confidentialité",
        trigger: '.card:contains(Parseltongue_privacy)',
    }, {
        content: "Click on build my website",
        trigger: 'button.btn-primary',
    }, {
        content: "Loader should be shown",
        trigger: '.o_website_loader_container',
        run: function () {}, // it's a check
    }, {
        content: "Wait until the configurator is finished",
        trigger: ".o_website_preview[data-view-xmlid='website.homepage']",
        timeout: 30000,
        isCheck: true,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        // Check the content of the save button to make sure the website is in
        // Parseltongue. (The editor should be in the website's default language,
        // which should be parseltongue in this test.)
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save_Parseltongue")',
    }, {
         content: "wait for editor to be closed",
         trigger: 'iframe body:not(.editor_enable)',
         run: function () {}, // It's a check.
    }
]});

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/custom_popup_snippet.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/custom_popup_snippet', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const snippets = [
    { id: "s_popup", name: "Popup" },
    { id: "s_banner", name: "Banner" },
    { id: "s_popup", name: "Custom Popup" },
];
wTourUtils.registerWebsitePreviewTour(
    "custom_popup_snippet",
    {
        url: "/",
        test: true,
        edition: true,
    },
    () => [
        wTourUtils.dragNDrop(snippets[0]),
        wTourUtils.clickOnSnippet(snippets[1]),
        {
            content: "save this snippet to save later",
            trigger: ".o_we_user_value_widget.fa-save",
        },
        {
            content: "confirm and reload custom snippet",
            trigger: ".modal-footer > .btn.btn-primary",
        },
        wTourUtils.dragNDrop(snippets[2]),
        {
            content: "check whether new custom popup is visible or not.",
            trigger: "iframe #wrap.o_editable section[data-snippet='s_banner']",
            run: () => {},
        },
    ]
);

return __exports;
});
;

/*******************************************************************************
*  Filepath: /website/static/tests/tours/default_shape_gets_palette_colors.js  *
*  Lines: 35                                                                   *
*******************************************************************************/
odoo.define('@website/../tests/tours/default_shape_gets_palette_colors', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("default_shape_gets_palette_colors", {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape does not have a background-image in its inline style",
        trigger: 'iframe #wrap .s_text_image .o_we_shape',
        run: () => {
            const shape = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrap .s_text_image .o_we_shape')[0];
            if (shape.style.backgroundImage) {
                console.error("error The default shape has a background-image in its inline style (should rely on the class)");
            }
        },
    },
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/drag_and_drop_on_non_editable.js  *
*  Lines: 42                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/drag_and_drop_on_non_editable', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("test_drag_and_drop_on_non_editable", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_company_team",
        name: "Team",
    }),
    {
        content: "Click on an editable media in non editable env.",
        trigger: "iframe .s_company_team .o_not_editable > .o_editable_media",
    },
    {
        content: "Verify that the Replace options is in the editor.",
        trigger: "we-button[data-replace-media]",
        isCheck: true,
    },
    wTourUtils.goBackToBlocks(),
    Object.assign(wTourUtils.dragNDrop({
        id: "s_text_highlight",
        name: "Text Highlight",
    }), {
        content: "Drag and drop the Text Highlight building block next to the Team block media.",
        run: "drag_and_drop_native iframe .s_company_team .o_not_editable > .o_editable_media",
    }),
    {
        content: "Verify that the Text Highlight building block isn't in a non editable element.",
        trigger: "iframe .s_company_team :not(.o_not_editable) > .s_text_highlight",
        isCheck: true,
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/drop_404_ir_attachment_url.js  *
*  Lines: 50                                                            *
************************************************************************/
odoo.define('@website/../tests/tours/drop_404_ir_attachment_url', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('drop_404_ir_attachment_url', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_404_snippet',
        name: '404 Snippet',
    }),
    {
        content: 'Click on the snippet image',
        trigger: 'iframe .s_404_snippet img',
    }, {
        content: 'Once the image UI appears, check the image has no size (404)',
        trigger: 'iframe .s_404_snippet img',
        extra_trigger: '.snippet-option-ReplaceMedia',
        run: function () {
            const imgEl = this.$anchor[0];
            if (!imgEl.complete
                    || imgEl.naturalWidth !== 0
                    || imgEl.naturalHeight !== 0) {
                console.error('This is supposed to be a 404 image');
            }
        },
    },
    wTourUtils.changeOption('ImageTools', 'we-select[data-name="shape_img_opt"] we-toggler'),
    wTourUtils.changeOption('ImageTools', 'we-button[data-set-img-shape]'),
    {
        content: 'Once the shape is applied, check the image has now a size (placeholder image)',
        trigger: 'iframe .s_404_snippet img[src^="data:"]',
        run: function () {
            const imgEl = this.$anchor[0];
            if (!imgEl.complete
                    || imgEl.naturalWidth === 0
                    || imgEl.naturalHeight === 0) {
                console.error('Even though the original image was a 404, the option should have been applied on the placeholder image');
            }
        },
    },
]);

return __exports;
});
;

/*********************************************************************************
*  Filepath: /website/static/tests/tours/dropdowns_and_header_hide_on_scroll.js  *
*  Lines: 59                                                                     *
*********************************************************************************/
odoo.define('@website/../tests/tours/dropdowns_and_header_hide_on_scroll', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const checkIfUserMenuNotMasked = function () {
    return [
        {
            content: "Click on the user dropdown",
            trigger: "iframe #wrapwrap header .o_header_hide_on_scroll li.dropdown > a",
        },
        wTourUtils.checkIfVisibleOnScreen("iframe #wrapwrap header .o_header_hide_on_scroll li.dropdown .dropdown-menu.show a[href='/my/home']"),
    ];
};

const scrollDownToMediaList = function () {
    return {
        content: "Scroll down the page a little to leave the dropdown partially visible",
        trigger: "iframe #wrapwrap .s_media_list",
        run: function () {
            // Scroll down to the media list snippet.
            this.$anchor[0].scrollIntoView(true);
        },
    };
};

wTourUtils.registerWebsitePreviewTour("dropdowns_and_header_hide_on_scroll", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: "s_media_list", name: "Media List"}),
    wTourUtils.selectHeader(),
    wTourUtils.changeOption("undefined", 'we-select[data-variable="header-scroll-effect"]'),
    wTourUtils.changeOption("undefined", 'we-button[data-name="header_effect_fixed_opt"]'),
    wTourUtils.changeOption("HeaderLayout", 'we-select[data-variable="header-template"] we-toggler'),
    wTourUtils.changeOption("HeaderLayout", 'we-button[data-name="header_sales_two_opt"]'),
    ...wTourUtils.clickOnSave(undefined, 30000),
    ...checkIfUserMenuNotMasked(),
    // We scroll the page a little because when clicking on the dropdown, the
    // page needs to scroll to the top first and then open the dropdown menu.
    scrollDownToMediaList(),
    ...checkIfUserMenuNotMasked(),
    // We scroll the page again because when typing in the searchbar input, the
    // page needs also to scroll to the top first and then open the dropdown
    // with the search results.
    scrollDownToMediaList(),
    {
        content: "Type a search query into the searchbar input",
        trigger: "iframe #wrapwrap header .s_searchbar_input input.search-query",
        run: "text a",
    },
    wTourUtils.checkIfVisibleOnScreen("iframe #wrapwrap header .s_searchbar_input.show .o_dropdown_menu.show"),
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/edit_link_popover.js  *
*  Lines: 224                                                  *
***************************************************************/
odoo.define('@website/../tests/tours/edit_link_popover', ['@website/js/tours/tour_utils', '@web/core/browser/browser', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];
const { browser } = require("@web/core/browser/browser");
const { patch } = require("@web/core/utils/patch");

const FIRST_PARAGRAPH = 'iframe #wrap .s_text_image p:nth-child(2)';

const clickFooter = [{
    content: "Save the link by clicking outside the URL input (not on a link element)",
    trigger: 'iframe footer h5:first',
}, {
    content: "Wait delayed click on footer",
    trigger: '.o_we_customize_panel we-title:contains("Footer")',
    run: function () {}, // it's a check
}];

const clickEditLink = [{
    content: "Click on Edit Link in Popover",
    trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
}, {
    content: "Ensure popover is closed",
    trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
    run: function () {}, // it's a check
    in_modal: false,
}];

wTourUtils.registerWebsitePreviewTour('edit_link_popover', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // 1. Test links in page content (web_editor)
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on a paragraph",
        trigger: FIRST_PARAGRAPH,
        run: 'text Paragraph', // Make sure the selection is set in the paragraph
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: "#toolbar:not(.oe-floating) #create-link",
    },
    {
        content: "Type the link URL /contactus",
        trigger: '#o_link_dialog_url_input',
        run: 'text /contactus'
    },
    ...clickFooter,
    {
        content: "Click on newly created link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")', // At this point preview is loaded
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Type the link URL /",
        trigger: '#o_link_dialog_url_input',
        run: "text /"
    },
    ...clickFooter,
    {
        content: "Click on link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown with updated preview data",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Remove Link in Popover",
        trigger: 'iframe .o_edit_menu_popover .o_we_remove_link',
    },
    {
        content: "Link should be removed",
        trigger: `${FIRST_PARAGRAPH}:not(:has(a))`,
        run: function () {}, // it's a check
    },
    {
        content: "Ensure popover is closed",
        trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        run: function () {}, // it's a check
    },
    // 2. Test links in navbar (website)
    {
        content: "Click navbar menu Home",
        trigger: 'iframe .top_menu a:contains("Home")',
    },
    {
        content: "Popover should be shown (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Change the URL",
        trigger: '#url_input',
        run: "text /contactus"
    },
    {
        content: "Save the Edit Menu modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Click on the Home menu again",
        extra_trigger: 'div:not(.o_loading_dummy) > #oe_snippets',
        trigger: 'iframe .top_menu a:contains("Home")[href="/contactus"]',
    },
    {
        content: "Popover should be shown with updated preview data (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Edit Menu in Popover",
        trigger: 'iframe .o_edit_menu_popover .js_edit_menu',
    },
    {
        content: "Edit Menu (tree) should open",
        trigger: '.o_website_dialog .oe_menu_editor',
        run: function () {}, // it's a check
    },
    {
        content: "Close modal",
        trigger: '.modal-footer .btn-secondary',
    },
    // 3. Test other links (CTA in navbar & links in footer)
    {
        content: "Click CTA in navbar",
        trigger: 'iframe .o_main_nav a.btn-primary[href="/contactus"]',
    },
    {
        content: "Popover should be shown (3)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (3)",
        trigger: '.oe-toolbar:not(.oe-floating):has(#o_link_dialog_url_input:propValue(/contactus))',
        run: function () {}, // it's a check
    },
    {
        content: "Click 'Home' link in footer",
        trigger: 'iframe footer a[href="/"]',
        run: function (actions) {
            // Simulate a real click, as the current step does not properly set
            // focus on the link.
            actions.click();
            const el = this.$anchor[0];
            const sel = el.ownerDocument.getSelection();
            sel.collapse(el.childNodes[1], 1);
            el.focus();
        },
    },
    {
        content: "Popover should be shown (4)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (4)",
        trigger: '.oe-toolbar:not(.oe-floating):has(#o_link_dialog_url_input:propValue(/))',
        run: function () {}, // it's a check
    },
    // 4. Popover should close when clicking non-link element
    ...clickFooter,
    // 5. Double click should not open popover but should open toolbar link
    {
        content: "Double click on link",
        extra_trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        trigger: 'iframe footer a[href="/"]',
        run: function (actions) {
            // Create range to simulate real double click, see pull request
            const range = document.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            actions.click();
            actions.dblclick();
        },
    },
    {
        content: "Ensure popover is opened on double click, and so is right panel edit link",
        trigger: 'html:has(#o_link_dialog_url_input)',
        extra_trigger: 'iframe html:has(.o_edit_menu_popover)',
        run: function () {}, // it's a check
    },
    {
        content: "Ensure that a click on the link popover link opens a new window in edit mode",
        trigger: 'iframe .o_edit_menu_popover a.o_we_url_link[target="_blank"]',
        extra_trigger: 'iframe .o_edit_menu_popover a.o_we_full_url[target="_blank"]',
        run: (actions) => {
            // We do not want to open a link in a tour
            patch(browser, {
                open: (url) => {
                    if (window.location.hostname === url.hostname && url.pathname.startsWith('/@/')) {
                        document.querySelector('body').classList.add('new_backend_window_opened');
                    }
                }
            }, { pure: true });
            actions.click();
        },
    },
    {
        content: "Ensure that link is opened correctly in edit mode",
        trigger: '.new_backend_window_opened',
        run: () => {}, // it's a check
    },
]);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/edit_megamenu.js  *
*  Lines: 193                                              *
***********************************************************/
odoo.define('@website/../tests/tours/edit_megamenu', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const toggleMegaMenu = (stepOptions) => Object.assign({}, {
    content: "Toggles the mega menu.",
    trigger: "iframe .top_menu .nav-item a.o_mega_menu_toggle",
    run: function () {
        // If the mega menu is displayed inside the extra menu items, it should
        // already be displayed.
        if (!this.$anchor[0].closest('.o_extra_menu_items')) {
            this.$anchor[0].dispatchEvent(new Event('click'))
        }
    },
}, stepOptions);

wTourUtils.registerWebsitePreviewTour('edit_megamenu', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: "iframe .top_menu .nav-item a",
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    {
        trigger: '#oe_snippets.o_loaded',
        run() {},
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets:not(.o_is_blocked)"}, true),
    toggleMegaMenu({extra_trigger: 'iframe .top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")'}),
    {
        content: "Select the last menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :nth-child(6)', // 6th is the last one
    },
    {
        content: "Hit the delete button to remove the menu link",
        trigger: 'iframe .oe_overlay .oe_snippet_remove',
    },
    {
        content: "Check that the last menu link was deleted",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav:not(:has(> :nth-child(6)))',
        run: () => null,
    },
    {
        content: "Clicks on the first title item.",
        trigger: 'iframe .o_mega_menu h4',
    },
    {
        content: "Press enter.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.InputEvent('input', {bubbles: true, inputType: 'insertParagraph'}));
        },
    },
    {
        content: "The menu should still be visible. Edit a menu item.",
        trigger: 'iframe .o_mega_menu h4',
        // The content is removed in the previous step so it's now invisible.
        allowInvisible: true,
        run: 'text New Menu Item',
    },
    {
        // If this step fails, it means that a patch inside bootstrap was lost.
        content: "Press the 'down arrow' key.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.KeyboardEvent("keydown", { key: "ArrowDown" }));
        },
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should have been renamed.",
        trigger: 'iframe .o_mega_menu h4:contains("New Menu Item")',
        run: function () {}, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('edit_megamenu_big_icons_subtitles', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: 'iframe .top_menu .nav-item a',
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: ".o_website_dialog",
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa2!',
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa2!")',
    },
    {
        trigger: '#oe_snippets.o_loaded',
        run() {},
    },
    {
        content: "Check for the new mega menu",
        trigger: 'iframe .top_menu:has(.nav-item a.o_mega_menu_toggle:contains("Megaaaaa2!"))',
        run: function () {}, // it's a check
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets:not(.o_is_blocked)"}, true),
    toggleMegaMenu({extra_trigger: 'iframe .top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa2!")'}),
    {
        content: "Select the first menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :first-child',
    },
    wTourUtils.changeOption("MegaMenuLayout", "we-toggler"),
    {
        content: "Select Big Icons Subtitles mega menu",
        trigger: '[data-select-label="Big Icons Subtitles"]',
    },
    {
        content: "Select the h4 of first menu link of the first column",
        trigger: 'iframe .s_mega_menu_big_icons_subtitles .row > div:first-child .nav > :first-child h4',
        run: function (actions) {
            // Clicking on the h4 element first time leads to the selection of
            // the entire a.nav-link, due to presence of `o_default_snippet_text` class
            // hence, specify the selection on the h4 element
            actions.click();
            const iframeDocument = document.querySelector('.o_iframe').contentDocument;
            const range = iframeDocument.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = iframeDocument.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        },
    },
    {
        content: "Convert it to Bold",
        trigger: '#oe_snippets #toolbar #bold',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should only convert selected text to Bold.",
        trigger: 'iframe .s_mega_menu_big_icons_subtitles .row > div:first-child .nav > :first-child span:not(:has(strong))',
        run: function () {}, // it's a check
    },
]);

return __exports;
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/edit_menus.js  *
*  Lines: 418                                           *
********************************************************/
odoo.define('@website/../tests/tours/edit_menus', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('edit_menus', {
    test: true,
    url: '/',
}, () => [
    // Add a megamenu item from the menu.
    {
        content: "open site menu",
        extra_trigger: "iframe #wrapwrap",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the new menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'body:not(:has(.oe_menu_editor))'}, true),
    {
        content: "There should be a new megamenu item.",
        trigger: 'iframe .top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    // Add a menu item in edit mode.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on a menu item",
        trigger: "iframe .top_menu .nav-item a",
    },
    {
        content: "Click on Edit Menu",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Confirm the new menu entry without a label",
        extra_trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a label. Fill label input.",
        extra_trigger: '.o_website_dialog:eq(1):visible',
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Random!',
    },
    {
        content: "Confirm the new menu entry without a url",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a url. Fill url input.",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        extra_trigger: '.modal-dialog .o_website_dialog input.is-invalid',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new entry",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Random!")',
    },
    // Edit the new menu item from the "edit link" popover button
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    {
        content: "Menu should have a new link item",
        trigger: 'iframe .top_menu .nav-item a:contains("Random!")',
        // Don't click the new menu when the editor is still blocked.
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets:not(.o_is_blocked)",
    },
    {
        content: "navbar shouldn't have any zwnbsp and no o_link_in_selection class",
        trigger: 'iframe nav.navbar:not(:has(.o_link_in_selection)):not(:contains("\ufeff"))',
        run: () => {}, // It's a check.
    },
    {
        content: "Click on Edit Link",
        trigger: 'iframe .o_edit_menu_popover a.o_we_edit_link',
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar',
    },
    {
        content: "Confirm the new label",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "Label should have changed",
        trigger: 'iframe .top_menu .nav-item a:contains("Modnar")',
        run: () => {}, // it's a check
    },
    // Edit the menu item from the "edit menu" popover button
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "Click on the 'Modnar' link",
        trigger: 'iframe .top_menu .nav-item a:contains("Modnar")',
    },
    {
        content: "Click on the popover Edit Menu button",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Click on the dialog Edit Menu button",
        trigger: '.oe_menu_editor .js_menu_label:contains("Modnar")',
        run: function () {
            const liEl = this.$anchor[0].closest('[data-menu-id]');
            liEl.querySelector('button.js_edit_menu').click();
        },
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar !!',
    },
    {
        content: "Confirm the new menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new menu label",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Modnar !!")',
    },
    // Drag a block to be able to scroll later.
    wTourUtils.dragNDrop({id: 's_media_list', name: 'Media List'}),
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "Label should have changed",
        trigger: 'iframe .top_menu .nav-item a:contains("Modnar !!")',
        run: () => {}, // It's a check.
    },
    // Nest menu item from the menu.
    {
        content: "open site menu",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Avoid flickering during DnD",
        trigger: ".modal-dialog",
        run: () => {
            const modalDialog = document.querySelector(".modal .modal-dialog");
            modalDialog.classList.remove("modal-dialog-centered");
        },
        debugHelp: "This is a hack/workaround for the next step",
    },
    {
        content: "Drag 'Contact Us' item below the 'Home' item",
        trigger: '.oe_menu_editor li:contains("Contact us") .fa-bars',
        run: "drag_and_drop_native .oe_menu_editor li:contains('Home') + li .fa-bars",
    },
    {
        content: "Drag 'Contact Us' item as a child of the 'Home' item",
        trigger: '.oe_menu_editor li:contains("Contact us") .fa-bars',
        run: "drag_and_drop_native .oe_menu_editor li:contains('Home') + li .form-control",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor li:contains("Home") ul li:contains("Contact us")',
        run: () => {}, // It's a check.
    },
    // Drag the Mega menu to the first position.
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Megaaaaa!") .fa-bars',
        run: "drag_and_drop_native .oe_menu_editor li:contains('Home') .fa-bars",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    {
        content: "Save the website menu with new nested menus",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Menu item should have a child",
        trigger: 'iframe .top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    // Check that with the auto close of dropdown menus, the dropdowns remain
    // openable.
    {
        content: "When menu item is opened, child item must appear in the shown menu",
        trigger: 'iframe .top_menu .nav-item:contains("Home") ul.show li a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: function () {
            // Scroll down.
            this.$anchor[0].closest('body').querySelector('.o_footer_copyright_name')
                .scrollIntoView(true);
        },
    },
    {
        content: "The Home menu should be closed",
        trigger: 'iframe .top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the Home menu after scroll",
        trigger: 'iframe .top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    {
        content: "Check that the Home menu is opened",
        trigger: 'iframe .top_menu .nav-item:contains("Home") ul.show li' +
            ' a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: () => {}, // It's a check.
    },
    {
        content: "Close the Home menu",
        trigger: 'iframe .top_menu .nav-item:has(a.dropdown-toggle:contains("Home"))',
    },
    {
        content: "Check that the Home menu is closed",
        trigger: 'iframe .top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the mega menu",
        trigger: 'iframe .top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "When the mega menu is opened, scroll up",
        trigger: "iframe .top_menu .o_mega_menu_toggle.show",
        run: function () {
            const marginTopOfMegaMenu = getComputedStyle(
                this.$anchor[0].closest('.dropdown').querySelector('.o_mega_menu'))['margin-top'];
            if (marginTopOfMegaMenu !== '0px') {
                console.error('The margin-top of the mega menu should be 0px');
            }
            // Scroll up.
            this.$anchor[0].closest('body').querySelector('.s_media_list_item:nth-child(2)')
                .scrollIntoView(true);
        }
    },
    {
        content: "Check that the mega menu is closed",
        trigger: 'iframe .top_menu .nav-item:contains("Megaaaaa!"):has(div[data-name="Mega Menu"]:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the mega menu after scroll",
        trigger: 'iframe .top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "Check that the mega menu is opened",
        trigger: 'iframe .top_menu .nav-item:has(a.o_mega_menu_toggle:contains("Megaaaaa!")) ' +
                 '.s_mega_menu_odoo_menu',
        run: () => {}, // It's a check.
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Open nested menu item",
        trigger: 'iframe .top_menu .nav-item:contains("Home"):nth(1) .dropdown-toggle',
    },
    {
        // If this step fails, it means that a patch inside bootstrap was lost.
        content: "Press the 'down arrow' key.",
        trigger: 'iframe .top_menu .nav-item:contains("Home") li:contains("Contact us")',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.KeyboardEvent("keydown", { key: "ArrowDown" }));
        },
    },
    ...wTourUtils.clickOnSave(),
    // Nest and re-arrange menu items for a newly created menu
    {
        content: "Open site menu",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Trigger link dialog (click 'Add Menu Item')",
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text new_menu',
    },
    {
        content: "Write a url for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Check if new menu(new_menu) is added",
        trigger: ".oe_menu_editor li:contains('new_menu')",
        run: () => {}, // It's a check.
    },
    {
        content: "Trigger link dialog (click 'Add Menu Item')",
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text new_nested_menu',
    },
    {
        content: "Write a url for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Check if new menu(new_nested_menu) is added",
        trigger: ".oe_menu_editor li:contains('new_nested_menu')",
        run: () => {}, // It's a check.
    },
    {
        content: "Nest 'new_nested_menu' under 'new_menu'",
        trigger: ".oe_menu_editor li:contains('new_nested_menu') .fa-bars",
        run: "drag_and_drop_native .oe_menu_editor li:contains('new_menu') .form-control",
    },
    {
        content: "Drag 'new_menu' above 'Modnar !!'",
        trigger: ".oe_menu_editor li:contains('new_menu') .fa-bars",
        run: "drag_and_drop_native .oe_menu_editor li:contains('Modnar !!') .fa-bars",
    },
    {
        content: "Nest 'Modnar !!' under 'new_menu'",
        trigger: ".oe_menu_editor li:contains('Modnar !!') .fa-bars",
        run: "drag_and_drop_native .oe_menu_editor li:contains('new_menu') .form-control",
    },

    {
        content: "Check if 'nested_menu' and 'Modnar !!' is nested under 'new_menu'",
        trigger: ".oe_menu_editor li:contains('new_menu') > ul > li:contains('nested_menu') + li:contains('Modnar !!')",
        run: () => {}, // It's a check.
    },
    {
        content: "Move 'Modnar !!' above 'new_nested_menu' inside the 'new_menu'",
        trigger: ".oe_menu_editor  li:contains('new_menu') > ul > li:contains('Modnar !!') .fa-bars",
        run: "drag_and_drop_native .oe_menu_editor  li:contains('new_menu') > ul > li:contains('new_nested_menu') .fa-bars",
    },
    {
        content: "Check if 'Modnar !!' is now above 'new_nested_menu' in 'new_menu'",
        trigger: ".oe_menu_editor li:contains('new_menu') > ul > li:first:contains('Modnar !!')",
        run: () => {}, // It's a check.
    },
]);

wTourUtils.registerWebsitePreviewTour(
    "edit_menus_delete_parent",
    {
        test: true,
        url: "/",
    },
    () => [
        {
            content: "Open site menu",
            extra_trigger: "iframe #wrapwrap",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "Click on Edit Menu",
            trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
        },
        {
            content: "Delete Home menu",
            trigger: ".modal-body ul li:nth-child(1) button.js_delete_menu",
        },
        {
            content: "Save",
            trigger: ".modal-footer button:first-child",
            run: "click",
        },
    ]
);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/edit_translated_page.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/edit_translated_page', ['@web/core/registry', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

registry.category("web_tour.tours").add('edit_translated_page_redirect', {
    test: true,
    url: '/nl/contactus',
    steps: () => [
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    {
        content: "Check the data-for attribute",
        trigger: 'iframe main:has([data-for="contactus_form"])',
        run: () => {}, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Go to /nl",
        trigger: "body",
        run: () => {
            // After checking the presence of the editor dashboard, we visit a
            // translated version of the homepage. The homepage is a special
            // case (there is no trailing slash), so we test it separately.
            location.href = '/nl';
        },
    },
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/editable_root_as_custom_snippet.js  *
*  Lines: 44                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/editable_root_as_custom_snippet', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("editable_root_as_custom_snippet", {
    test: true,
    edition: true,
    url: '/custom-page',
}, () => [
    wTourUtils.clickOnSnippet('.s_title.custom[data-oe-model][data-oe-id][data-oe-field][data-oe-xpath]'),
    wTourUtils.changeOption('SnippetSave', 'we-button'),
    {
        content: "Confirm modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Wait for the custom snippet to appear in the panel",
        trigger: '.oe_snippet[name="Custom Title"]',
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Go to homepage",
        trigger: 'iframe a[href="/"].nav-link',
    },
    {
        content: "Wait to land on homepage",
        trigger: 'iframe a[href="/"].nav-link.active',
        isCheck: true,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({id: 's_title', name: 'Custom Title'}),
    {
        content: "Check that the custom snippet does not have branding",
        trigger: 'iframe #wrap .s_title.custom:not([data-oe-model]):not([data-oe-id]):not([data-oe-field]):not([data-oe-xpath])',
        isCheck: true,
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/focus_blur_snippets.js  *
*  Lines: 77                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/focus_blur_snippets', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const blockIDToData = {
    parent: {
        selector: 'iframe .s_focusblur',
        name: 'section',
        overlayIndex: 2,
    },
    child1: {
        selector: 'iframe .s_focusblur_child1',
        name: 'first child',
        overlayIndex: 1,
    },
    child2: {
        selector: 'iframe .s_focusblur_child2',
        name: 'second child',
        overlayIndex: 0,
    },
};

function clickAndCheck(blockID, expected) {
    const blockData = blockIDToData[blockID] || {};

    return [{
        content: blockID ? `Enable the ${blockData.name}` : 'Disable all blocks',
        trigger: blockData.selector || 'iframe #wrapwrap',
    }, {
        content: 'Once the related overlays are enabled/disabled, check that the focus/blur calls have been correct.',
        trigger: blockID
            ? `iframe .oe_overlay.o_draggable:eq(${blockData.overlayIndex}).oe_active`
            : `iframe #oe_manipulators:not(:has(.oe_active))`,
        allowInvisible: !blockID,
        run: function (actions) {
            const result = window.focusBlurSnippetsResult;
            window.focusBlurSnippetsResult = [];

            if (expected.length !== result.length
                    || !expected.every((item, i) => item === result[i])) {
                console.error(`
                    Expected: ${expected.toString()}
                    Result: ${result.toString()}
                `);
            }
        },
    }];
}

window.focusBlurSnippetsResult = [];

wTourUtils.registerWebsitePreviewTour("focus_blur_snippets", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    {
        content: 'Drag the custom block into the page',
        trigger: '#snippet_structure .oe_snippet:has(.oe_snippet_body.s_focusblur) .oe_snippet_thumbnail',
        run: 'drag_and_drop_native iframe #wrap',
    },
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck(null, ['blur parent']),
    ...clickAndCheck('child1', ['focus parent', 'focus child1']),
    ...clickAndCheck('child1', []),
    ...clickAndCheck(null, ['blur parent', 'blur child1']),
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck('child1', ['blur parent', 'focus parent', 'focus child1']),
    ...clickAndCheck('child2', ['blur parent', 'blur child1', 'focus parent', 'focus child2']),
    ...clickAndCheck('parent', ['blur parent', 'blur child2', 'focus parent']),
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/gray_color_palette.js  *
*  Lines: 81                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/gray_color_palette', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

function waitForCSSReload() {
    // TODO we should find a better way to wait for this in tests after CSS
    // reload, it is currently done multiple different ways depending on the
    // test.
    return [
        // This step is here because the option is applied but triggers a
        // reloading of the CC value, so if the second value is sent too soon,
        // it will be ignored. Clicking on the snippet tab and back will ensure
        // that the mutex is cleared, and therefore we can apply the saturation
        // step.
        wTourUtils.goBackToBlocks(),
        wTourUtils.goToTheme(),
        {
            content: "Wait for no loading",
            trigger: 'body:not(:has(.o_we_ui_loading)) iframe body:not(:has(.o_we_ui_loading))',
            run: () => null,
        },
    ];
}

wTourUtils.registerWebsitePreviewTour('website_gray_color_palette', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.goToTheme(),
    {
        content: "Toggle gray color palette",
        trigger: '.o_we_gray_preview.o_we_collapse_toggler',
    },
    {
        content: "Drag the hue slider",
        trigger: '.o_we_slider_tint[data-param="gray-hue"]',
        run: () => {
            const slider = document.querySelector('.o_we_slider_tint[data-param="gray-hue"] input');
            slider.value = 100;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        },
    },
    {
        content: "Check the preview of the gray 900 after hue change",
        trigger: '[variable="900"][style="background-color: rgb(36, 41, 33) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Drag the saturation slider",
        trigger: '.o_we_user_value_widget[data-param="gray-extra-saturation"]',
        run: () => {
            const slider = document.querySelector('.o_we_user_value_widget[data-param="gray-extra-saturation"] input');
            slider.value = 15;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        }
    },
    {
        content: "Check the preview of the gray 900 after saturation change",
        trigger: '[variable="900"][style="background-color: rgb(34, 47, 27) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Wait for the iframe to be loaded",
        trigger: 'iframe body',
        run: () => {
            const iframeEl = document.querySelector('.o_website_preview .o_iframe');
            const styles = iframeEl.contentWindow.getComputedStyle(iframeEl.contentDocument.documentElement);
            if (styles.getPropertyValue('--900').toString().replace(/ /g, '') !== '#222F1B') {
                console.error('The value for the gray 900 is not right');
            }
        }
    },
]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/grid_layout.js  *
*  Lines: 84                                             *
*********************************************************/
odoo.define('@website/../tests/tours/grid_layout', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const snippet = {
    id: 's_text_image',
    name: 'Text - Image',
};

wTourUtils.registerWebsitePreviewTour('website_replace_grid_image', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop(snippet),
    wTourUtils.clickOnSnippet(snippet),
    {
        content: "Toggle to grid mode",
        trigger: '.o_we_user_value_widget[data-name="grid_mode"]',
    },
    {
        content: "Replace image",
        trigger: 'iframe .s_text_image img',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    {
        content: "Add new image column",
        trigger: '.o_we_user_value_widget[data-add-element="image"]',
    },
    {
        content: "Replace new image",
        trigger: 'iframe .s_text_image img[src="/web/image/website.s_text_image_default_image"]',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("scroll_to_new_grid_item", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    // Drop enough snippets to scroll.
    wTourUtils.dragNDrop({id: "s_text_image", name: "Text - Image"}),
    wTourUtils.dragNDrop({id: "s_image_text", name: "Image - Text"}),
    wTourUtils.dragNDrop({id: "s_image_text", name: "Image - Text"}),
    // Toggle the first snippet to grid mode.
    wTourUtils.clickOnSnippet({id: "s_text_image", name: "Text - Image"}),
    wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
    // Add a new grid item.
    wTourUtils.changeOption("layout_column", 'we-button[data-add-element="image"]'),
    {
        content: "Check that the page scrolled to the new grid item",
        trigger: "iframe .s_text_image .o_grid_item:nth-child(3)",
        run: function () {
            // Leave some time to the page to scroll.
            setTimeout(() => {
                const newItemPosition = this.$anchor[0].getBoundingClientRect();
                if (newItemPosition.top < 0) {
                    console.error("The page did not scroll to the new grid item.");
                }
                document.body.classList.add("o_scrolled_to_grid_item");
            }, 500);
        },
    }, {
        content: "Make sure the scroll check is done",
        trigger: ".o_scrolled_to_grid_item",
        isCheck: true,
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/homepage_edit_discard.js  *
*  Lines: 29                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/homepage_edit_discard', ['@odoo/owl', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { markup } = require("@odoo/owl");
const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

// TODO remove this test; it is badly written: you just have to change the fact
// that editor_enable is added on the body to silently make it useless +
// useless extra_trigger + useless auto: true + ... A better duplicate of it has
// been made with "website_no_dirty_page".
wTourUtils.registerWebsitePreviewTour('homepage_edit_discard', {
    test: true,
    url: '/',
    edition: true,
}, () => [{
    trigger: "#oe_snippets button[data-action=\"cancel\"]:not([disabled])",
    extra_trigger: "body:not(:has(.o_dialog))",
    content: markup("<b>Click Discard</b> to Discard all Changes."),
    position: "bottom",
}, {
    trigger: "iframe body:not(.editor_enable)",
    auto: true,
    run: () => null,
}]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/html_editor.js  *
*  Lines: 256                                            *
*********************************************************/
odoo.define('@website/../tests/tours/html_editor', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module**/
/* global ace */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const adminCssModif = '#wrap {display: none;}';
const demoCssModif = '// demo_edition';

wTourUtils.registerWebsitePreviewTour('html_editor_language', {
    url: '/test_page',
    test: true,
}, () => [{
    content: "open site menu",
    trigger: 'button[data-menu-xmlid="website.menu_site"]',
}, {
    content: "open html editor",
    trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
}, {
    content: "add something in the page's default language version",
    trigger: 'div.ace_line .ace_xml:contains("rommelpot")',
    run: () => {
        ace.edit(document.querySelector('#resource-editor div')).getSession().insert({
            row: 1,
            column: 1,
        }, '<div class="test_language"/>\n');
    },
}, {
    content: "save the html editor",
    extra_trigger: 'div.ace_line .ace_xml:contains("test_language")',
    trigger: ".o_resource_editor .btn-primary",
}, {
    content: "check that the page has the modification",
    trigger: 'iframe #wrapwrap:has(.test_language)',
    run: function () {}, // it's a check
}, {
    content: "check that the page has not lost the original text",
    trigger: 'iframe #wrapwrap:contains("rommelpot")',
    run: function () {}, // it's a check
}]
);

wTourUtils.registerWebsitePreviewTour('html_editor_multiple_templates', {
    url: '/generic',
    edition: true,
    test: true,
},
    () => [
        {
            content: "drop a snippet",
            trigger: ".oe_snippet:has(.s_cover) .oe_snippet_thumbnail",
            // id starting by 'oe_structure..' will actually create an inherited view
            run: "drag_and_drop_native iframe #oe_structure_test_ui",
        },
        ...wTourUtils.clickOnSave(),
        // 2. Edit generic view
        {
            content: "open site menu",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "add something in the generic view",
            trigger: 'div.ace_line .ace_xml:contains("Generic")',
            run: function () {
                ace.edit(document.querySelector('#resource-editor div')).getSession().insert({row: 3, column: 1}, '<p>somenewcontent</p>\n');
            },
        },
        // 3. Edit oe_structure specific view
        {
            content: "select oe_structure specific view",
            trigger: 'div.ace_line .ace_xml:contains("somenewcontent")',
            run: function () {},
        },
        {
            content: "open file selector menu",
            trigger: ".o_resource_editor .o_select_menu_toggler",
        },
        {
            content: "open oe_structure_test_ui view",
            trigger: ".o_resource_editor .o_select_menu_item:contains(oe_structure_test_ui)",
        },
        {
            content: "add something in the oe_structure specific view",
            extra_trigger: '.o_resource_editor .o_select_menu_toggler:contains("oe_structure_test_ui")',
            trigger: 'div.ace_line .ace_xml:contains("s_cover")',
            run: function () {
                ace.edit(document.querySelector('#resource-editor div')).getSession().insert({row: 2, column: 1}, '<p>anothernewcontent</p>\n');
            },
        },
        {
            content: "save the html editor",
            extra_trigger: 'div.ace_line .ace_xml:contains("anothernewcontent")',
            trigger: ".o_resource_editor button:contains(Save)",
        },
        {
           content: "check that the page has both modification",
           extra_trigger: 'iframe #wrapwrap:contains("anothernewcontent")',
           trigger: 'iframe #wrapwrap:contains("somenewcontent")',
           run: function () {}, // it's a check
       },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss', {
    url: '/contactus',
    test: true,
},
    () => [
        // 1. Open Html Editor and select a scss file
        {
            content: "open site menu",
            extra_trigger: 'iframe #wrap:visible', // ensure state for later
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_resource_editor_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_resource_editor_type_switcher .dropdown-item:contains("SCSS")',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: '.o_resource_editor .o_select_menu_toggler:contains("user_custom_rules")',
            run: () => {},
        },
        // 2. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit(document.querySelector('#resource-editor div')).getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: ".o_resource_editor_title button:contains(Save)",
        },
        {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#resource-editor-id button:contains(Reset)',
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly, wrap content should now be visible again",
            trigger: 'iframe #wrap:visible',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        // 3. Customize again that file (will be used in second part of the test
        //    to ensure restricted user can still use the HTML Editor)
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit(document.querySelector('#resource-editor div')).getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: ".o_resource_editor_title button:contains(Save)",
        },
        {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
        },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss_2', {
    url: '/',
    test: true,
},
    () => [
        // This part of the test ensures that a restricted user can still use
        // the HTML Editor if someone else made a customization previously.

        // 4. Open Html Editor and select a scss file
        {
            content: "open site menu",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_resource_editor_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_resource_editor_type_switcher .dropdown-item:contains("SCSS")',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: '.o_resource_editor .o_select_menu_toggler:contains("user_custom_rules")',
            run: () => {},
        },
        // 5. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: `div.ace_line:contains("${adminCssModif}")`, // ensure the admin modification is here
            run: function () {
                ace.edit(document.querySelector('#resource-editor div')).getSession().insert({row: 2, column: 0}, `${demoCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${demoCssModif}")`,
            trigger: ".o_resource_editor button:contains(Save)",
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#resource-editor-id button:contains(Reset)',
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly",
            extra_trigger: `body:not(:has(div.ace_line:contains("${adminCssModif}")))`,
            trigger: `body:not(:has(div.ace_line:contains("${demoCssModif}")))`,
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
    ]
);

return __exports;
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/link_tools.js  *
*  Lines: 429                                           *
********************************************************/
odoo.define('@website/../tests/tours/link_tools', ['@website/js/tours/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];
const { boundariesIn, setSelection, nodeSize } = require('@web_editor/js/editor/odoo-editor/src/utils/utils');

const clickOnImgStep = {
    content: "Click somewhere else to save.",
    trigger: 'iframe #wrap .s_text_image img',
};

wTourUtils.registerWebsitePreviewTour('link_tools', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // 1. Create a new link from scratch.
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Replace first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text Go to odoo: '
    },
    {
        content: "Open link tools",
        trigger: "#toolbar:not(.oe-floating) #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#toolbar:not(.oe-floating) #o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    {
        content: "Select the newly created link",
        trigger: 'iframe #wrap .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
        run() {
            setSelection(this.$anchor[0], 0, this.$anchor[0], nodeSize(this.$anchor[0]));
        }
    },
    // Remove the link.
    {
        content: "Click on the newly created link",
        trigger: 'iframe #wrap .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
    },
    {
        content: "Remove the link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that the link was removed",
        trigger: 'iframe #wrap .s_text_image p:contains("Go to odoo:"):not(:has(a))',
        run: () => {}, // It's a check.
    },
    // Recreate the link.
    {
        content: "Select first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    // 2. Edit the link with the link tools.
    {
        content: "Click on the newly created link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
    },
    {
        content: "Change content (editing the label input) to odoo website_2",
        trigger: '#o_link_dialog_label_input:propValue(odoo.com)',
        run: 'text odoo website_2',
    },
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
    },
    {
        content: "Change content (editing the DOM) to odoo website",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
        run: 'text odoo website',
    },
    clickOnImgStep,
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website")',
    },
    {
        content: "Check that the label input contains the new content",
        trigger: '#o_link_dialog_label_input:propValue(odoo website)',
        isCheck: true,
    },
    {
        content: "Link tools, should be open, change the url",
        trigger: '#o_link_dialog_url_input',
        run: 'text_blur odoo.be'
    },

    ...wTourUtils.clickOnSave(),
    // 3. Edit a link after saving the page.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: 'iframe .s_text_image a[href="http://odoo.be"]:contains("odoo website")',
    },
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: '#toolbar:not(.oe-floating) .dropdown:has([name="link_style_color"]) > button',
    },
    {
        content: "Click on the secondary style button.",
        trigger: '#toolbar:not(.oe-floating) we-button[data-value="secondary"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "The link should have the secondary button style.",
        trigger: 'iframe .s_text_image a.btn.btn-secondary[href="http://odoo.be"]:contains("odoo website")',
        isCheck: true,
    },
    // 4. Add link on image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({
        id: 's_three_columns',
        name: 'Columns',
    }),
    {
        content: "Click on the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Activate link.",
        trigger: '.o_we_customize_panel we-row:contains("Media") we-button.fa-link',
    },
    {
        content: "Set URL.",
        trigger: '.o_we_customize_panel we-input:contains("Your URL") input',
        run: 'text odoo.com',
    },
    {
        content: "Deselect image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) img',
    },
    {
        content: "Re-select image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Check that the second image is not within a link.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        isCheck: true,
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the first image was saved.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > a > img',
        run: () => {}, // It's a check.
    },
    {
        content: "Check that the second image was saved.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        run: () => {}, // It's a check.
    },
    // 5. Remove link from image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Reselect the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > a > img',
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        run: () => {}, // It's a check.
    },
    {
        content: "Remove link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that image is not within a link anymore.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > img',
        isCheck: true,
    },
    // 6. Add mega menu with Cards template and edit URL on text-selected card.
    wTourUtils.clickOnElement("menu link", "iframe header .nav-item a"),
    wTourUtils.clickOnElement("'Edit menu' icon", "iframe .o_edit_menu_popover .fa-sitemap"),
    {
        content: "Click on 'Add Mega Menu Item' link",
        extra_trigger: '.o_website_dialog:visible',
        trigger: ".modal-body a:contains('Add Mega Menu Item')",
    },
    {
        content: "Enter mega menu name",
        trigger: ".modal-body input",
        run: "text Mega",
    },
    wTourUtils.clickOnElement("OK button", ".btn-primary"),
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Mega") .fa-bars',
        run: "drag_and_drop_native .oe_menu_editor li:contains('Home') .fa-bars",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Mega")',
        isCheck: true,
    },
    wTourUtils.clickOnElement("Save button", ".btn-primary:contains('Save')"),
    wTourUtils.clickOnElement("mega menu", "iframe header .o_mega_menu_toggle"),
    wTourUtils.changeOption("MegaMenuLayout", "we-toggler"),
    wTourUtils.changeOption("MegaMenuLayout", '[data-select-label="Cards"]'),
    wTourUtils.clickOnElement("card's text", "iframe header .s_mega_menu_cards span"),
    {
        content: "Enter an URL",
        trigger: "#o_link_dialog_url_input",
        run: "text https://www.odoo.com",
    },
    {
        content: "Check nothing is lost",
        trigger: "iframe header .s_mega_menu_cards a[href='https://www.odoo.com']:has(img):has(h4):has(span)",
        isCheck: true,
    },
    // 7. Create new a link from a URL-like text.
    {
        content: "Replace first paragraph, write a URL",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text odoo.com'
    },
    {
        content: "Select text",
        trigger: 'iframe #wrap .s_text_image p:contains(odoo.com)',
        run() {
            setSelection(...boundariesIn(this.$anchor[0]), false);
        }
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    clickOnImgStep,
    {
        // URL transformation into link should persist, without the need for
        // input at input[name=url]
        content: "Check that link was created",
        trigger: "iframe .s_text_image p a[href='http://odoo.com']:contains('odoo.com')",
        isCheck: true,
    },
    {
        content: "Click on link to open the link tools",
        trigger: "iframe .s_text_image p a",
    },
    // 8. Check that http links are not coerced to https and vice-versa.
    {
        content: "Change URL to https",
        trigger: "#o_link_dialog_url_input",
        run: 'text https://odoo.com',
    },
    {
        content: "Check that link was updated",
        trigger: "iframe .s_text_image p a[href='https://odoo.com']:contains('odoo.com')",
        isCheck: true,
    },
    {
        content: "Change it back http",
        trigger: "#o_link_dialog_url_input",
        run: 'text http://odoo.com',
    },
    {
        content: "Check that link was updated",
        trigger: "iframe .s_text_image p a[href='http://odoo.com']:contains('odoo.com')",
        isCheck: true,
    },
    // 9. Test conversion between http and mailto links.
    {
        content: "Change URL into an email address",
        trigger: "#o_link_dialog_url_input",
        run: "text callme@maybe.com",
    },
    {
        content: "Check that link was updated and link content is synced with URL",
        trigger: "iframe .s_text_image p a[href='mailto:callme@maybe.com']:contains('callme@maybe.com')",
        isCheck: true,
    },
    {
        content: "Change URL back into a http one",
        trigger: "#o_link_dialog_url_input",
        run: "text_blur callmemaybe.com",
    },
    {
        content: "Check that link was updated and link content is synced with URL",
        trigger: "iframe .s_text_image p a[href='http://callmemaybe.com']:contains('callmemaybe.com')",
    },
    // 10. Test that UI stays up-to-date.
    // TODO this step which was added by https://github.com/odoo/odoo/commit/9fc283b514d420fdfd66123845d9ec3563572692
    // for no apparent reason (the X-original-commit of that one does not add
    // this step) is not required for the test to work (it passes more often
    // without this step than with it). It is a cause of race condition (last
    // check: 31 over 162 tries failed on this). It however makes sense: the
    // popover should indeed be shown and stay shown at this point. To be
    // reenabled once the related feature is robust.
    /*
    {
        content: "Popover should be shown",
        trigger: "iframe .o_edit_menu_popover .o_we_url_link:contains('http://callmemaybe.com')",
        isCheck: true,
    },
    */
    {
        content: "Edit link label",
        trigger: "iframe .s_text_image p a",
        run(actions) {
            // See SHOPS_STEP_DISABLED. TODO. These steps do not consistently
            // update the link for some reason... to investigate.
            /*
            // Simulating text input.
            const link = this.$anchor[0];
            actions.text("callmemaybe.com/shops");
            // Trick the editor into keyboardType === 'PHYSICAL' and delete the
            // last character "s" and end with "callmemaybe.com/shop"
            link.dispatchEvent(new KeyboardEvent("keydown", { key: "Backspace", bubbles: true }));
            // Trigger editor's '_onInput' handler, which leads to a history step.
            link.dispatchEvent(new InputEvent('input', {inputType: 'insertText', bubbles: true}));
            */
        },
    },
    // See SHOPS_STEP_DISABLED. TODO.
    /*
    {
        content: "Check that links's href was updated",
        trigger: "iframe .s_text_image p a[href='http://callmemaybe.com/shop']:contains('callmemaybe.com/shop')",
        isCheck: true,
    },
    */
    // TODO this step is disabled for now because it is a cause of race
    // condition (last check: 57 over 162 tries failed on this). The popover
    // seems to sometimes unexpectedly close. Probably why the "Popover should
    // be shown" step above had to be disabled as well.
    /*
    {
        content: "Check popover content is up-to-date",
        trigger: "iframe .popover div a:contains('http://callmemaybe.com/shop')",
        isCheck: true,
    },
    */
    // TODO this step is disabled for now because writing "/shop" in above steps
    // currently is not considered most of the time all of a sudden... to
    // investigate (it was not needed in 16.4). See SHOPS_STEP_DISABLED.
    /*
    {
        content: "Check Link tools URL input content is up-to-date",
        trigger: "#o_link_dialog_url_input",
        run() {
            // FIXME this was changed with 69a27360c98aee3d97eb42e9a27a751311791e15
            // to omit the http:// part... but this part is removed
            // inconsistently. Trying to fix the test actually made it so
            // http:// is still there at this point... make it consistent and
            // then remove http:// here again.
            if (this.$anchor[0].value !== 'http://callmemaybe.com/shop') {
                throw new Error("Tour step failed");
            }
        }
    },
    */
    // 11. Pick a URL with auto-complete
    {
        content: "Enter partial URL",
        trigger: "#o_link_dialog_url_input",
        run: 'text /contact'
    },
    {
        content: "Pick '/contactus",
        trigger: "ul.ui-autocomplete li div:contains('/contactus (Contact Us)')",
    },
    {
        content: "Check that links's href and label were updated",
        trigger: "iframe .s_text_image p a[href='/contactus']:contains('/contactus')",
        isCheck: true,
    },
    // 12. Add a link leading to a 404 page
    {
        content: "Enter a non-existent URL",
        trigger: "#o_link_dialog_url_input",
        run: "text /this-address-does-not-exist",
    },
    {
        content: "Check that the link's href was updated and click on it",
        trigger: "iframe .s_text_image p a[href='/this-address-does-not-exist']",
    },
    // TODO this step is disabled for now because it is a cause of race
    // condition (last check: 3 times over 95). The popover seems to sometimes
    // unexpectedly close.
    /*
    {
        content: "Check popover content is up-to-date (2)",
        trigger: "iframe .popover div a:contains('/this-address-does-not-exist')",
        isCheck: true,
    },
    */
    // 13. Check that ZWS is not added in the link label input.
    clickOnImgStep,
    {
        content: "Click on contact us button",
        trigger: "iframe a.btn[href='/contactus']",
    },
    {
        content: "Verify that the link label input does not contain ZWS",
        trigger: "#o_link_dialog_label_input:propValue('Contact Us')",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/media_dialog.js  *
*  Lines: 208                                             *
**********************************************************/
odoo.define('@website/../tests/tours/media_dialog', ['@web_tour/tour_service/tour_utils', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { TourError } = require("@web_tour/tour_service/tour_utils");
const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("website_media_dialog_undraw", {
    test: true,
    url: '/',
    edition: true,
}, () => [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
{
    content: "Open the media dialog from the snippet",
    trigger: "iframe .s_text_image img",
    run: "dblclick",
}, {
    content: "Search for 'banner' to call the media library", // Mocked call
    trigger: ".o_select_media_dialog .o_we_search",
    run: "text banner",
}, {
    content: "Check that the media library is available",
    trigger: '.o_select_media_dialog:has(.o_we_search_select option[value="media-library"])',
    run: () => null, // it's a check
},
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_external_library", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Open the media dialog from the snippet",
        trigger: "iframe .s_text_image img",
        run: "dblclick",
    }, {
        content: "Dummy search to call the media library",
        trigger: ".o_select_media_dialog .o_we_search",
        run: "text a",
    }, {
        content: "Choose the media library to only show its media",
        trigger: ".o_select_media_dialog .o_we_search_select",
        // This is a standard <select>: we can't simulate a click on the option
        // directly.
        run: function (actions) {
            actions.click();
            actions.text("Illustrations");
            this.$anchor.trigger($.Event("keydown", {key: 'Enter', keyCode: 13}));
        },
    }, {
        content: "Double click on the first image",
        trigger: ".o_select_media_dialog img.o_we_attachment_highlight",
        run: "dblclick",
    }, {
        content: "Reopen the media dialog",
        trigger: "iframe .s_text_image img",
        run: "dblclick",
    }, {
        content: "Check that the image was created only once",
        trigger: ".o_select_media_dialog .o_we_existing_attachments",
        run: function () {
            const selector = ".o_existing_attachment_cell img[src^='/web_editor/shape/illustration/']";
            const imgName = this.$anchor[0].querySelector(selector).title;
            const uploadedImgs = this.$anchor[0].querySelectorAll(`${selector}[title='${imgName}']`);
            if (uploadedImgs.length !== 1) {
                throw new TourError(`${uploadedImgs.length} attachment(s) were found. Exactly 1 should have been created.`);
            }
        },
    },
    {
        content: "Click on the first illustration image",
        trigger: ".o_select_media_dialog .o_we_attachment_highlight",
    },
    {
        content: "Select the image",
        trigger: "iframe .s_text_image img",
    },
    {
        content: "Try to crop the image",
        trigger: "#oe_snippets .o_we_customize_panel .o_we_user_value_widget[data-crop='true']",
    },
    {
        content: "Observe the crop is denied for illustration image",
        trigger: ".o_notification_manager .o_notification",
        run: () => {}, // it's a check
    },
    ...wTourUtils.clickOnSave(),
]);

wTourUtils.registerWebsitePreviewTour('website_media_dialog_icons', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_process_steps',
        name: 'Steps',
    }),
    {
        content: "Open MediaDialog from a snippet icon",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Pick the same icon",
        trigger: '.o_select_media_dialog .o_we_attachment_selected.fa-unlock-alt',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    {
        content: "Open MediaDialog again",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Click on the ADD button",
        trigger: '.o_select_media_dialog .btn:contains(Add)',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_image_shape", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Click on the image",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("ImageTools", 'we-select[data-name="shape_img_opt"] we-toggler'),
    wTourUtils.changeOption("ImageTools", "we-button[data-set-img-shape]"),
    {
        content: "Open MediaDialog from an image",
        trigger: "iframe .s_text_image img[data-shape]",
        run: "dblclick",
    },
    {
        content: "Click on the 'Icons' tab",
        trigger: '.o_select_media_dialog .o_notebook_headers .nav-item a:contains("Icons")',
    },
    {
        content: "Select an icon",
        trigger: ".o_select_media_dialog:has(.nav-link.active:contains('Icons')) .tab-content span.fa-heart",
    },
    {
        content: "Checks that the icon doesn't have a shape",
        trigger: "iframe .s_text_image .fa-heart:not([data-shape])",
        run: () => {}, //it's a check
    },
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_insert_media", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_text_block",
        name: "Text",
    }),
    {
        content: "Click on the first paragraph",
        trigger: "iframe .s_text_block p",
    },
    {
        content: "Click on the toolbar's 'insert media' button",
        trigger: ".oe-toolbar #media-insert",
    },
    {
        content: "Click on the 'Icons' tab",
        trigger: ".o_select_media_dialog a.nav-link:contains('Icons')",
    },
    {
        content: "Click on the first icon",
        trigger: ".o_select_media_dialog .font-icons-icon",
    },
    {
        content: "Verify that the icon was inserted",
        trigger: "iframe .s_text_block p > span.fa",
        run: () => {}, //it's a check
    },
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/media_iframe_video.js  *
*  Lines: 66                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/media_iframe_video', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour(
    "website_media_iframe_video",
    {
        test: true,
        url: "/",
        edition: true,
    }, () => [
        wTourUtils.dragNDrop({
            id: "s_text_image",
            name: "Text - Image",
        }),
        {
            content: "Select the image",
            trigger: "iframe #wrap .s_text_image img",
        },
        {
            content: "Open image link options",
            trigger: "[data-name='media_link_opt']",
        },
        {
            content: "Enter the url",
            trigger: "input[placeholder='www.example.com']",
            run: "text odoo.com",
        },
        {
            content: "Click on replace media",
            trigger: "[data-replace-media='true']",
        },
        {
            content: "Click on video button",
            trigger: "a:contains('Videos')",
        },
        {
            content: "Enter video link",
            trigger: "#o_video_text",
            run: "text https://youtu.be/nbso3NVz3p8",
        },
        {
            content: "Check video is preview",
            trigger: ".o_video_dialog_iframe",
            run: () => {}, // This is a check.
        },
        {
            content: "Click on 'add' button",
            trigger: ".modal-footer button:contains('Add')",
        },
        {
            content: "Ensure that the parent of media_iframe_video is not an 'a' tag.",
            trigger: "iframe .media_iframe_video",
            run: function () {
                if (this.$anchor[0].parentElement.tagName === "A") {
                    console.error("Iframe video has link!!!");
                }
            },
        },
    ]
);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/multi_edition.js  *
*  Lines: 42                                               *
***********************************************************/
odoo.define('@website/../tests/tours/multi_edition', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('website_multi_edition', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    {
        content: 'Check the current page has not the elements that will be added',
        trigger: 'iframe body:not(:has(.s_text_image)):not(:has(.s_hr))',
        run: () => null,
    },
    // Edit the main element of the page
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    // Edit another part in the page, like the footer
    wTourUtils.dragNDrop({
        id: 's_hr',
        name: 'Separator',
    }),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Check that the main element of the page was properly saved',
        trigger: 'iframe main .s_text_image',
        run: () => null,
    },
    {
        content: 'Check that the footer was properly saved',
        trigger: 'iframe footer .s_hr',
        run: () => null,
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/page_manager.js  *
*  Lines: 156                                             *
**********************************************************/
odoo.define('@website/../tests/tours/page_manager', ['@website/js/tours/tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];
const { registry } = require("@web/core/registry");

// TODO: This part should be moved in a QUnit test
const checkKanbanGroupBy = [{
    content: "Click on Kanban View",
    trigger: '.o_cp_switch_buttons .o_kanban',
}, {
    content: "Open search panel menu",
    extra_trigger: '.o_kanban_renderer',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: "Select 'Active' in the select of Add Custom Group",
    trigger: ".o_add_custom_group_menu",
    run: "text active",
}, {
    content: "Click on List View",
    extra_trigger: '.o_kanban_renderer .o_kanban_header',
    trigger: '.o_cp_switch_buttons .o_list',
}, {
    content: "Remove applied Group By",
    extra_trigger: '.o_list_renderer',
    trigger: '.o_cp_searchview .o_facet_remove',
}];

const checkWebsiteFilter = [{
	content: "Click on the search options",
	trigger: ".o_searchview_dropdown_toggler",
}, {
	content: "Select Test Website",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('Test Website')",
}, {
	content: "Check that the homepage is now the one of Test Website",
	trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
			 "~ .o_data_cell[name=website_id]:contains('Test Website')",
	run: () => null, // it's a check
}, {
	content: "Check that the search options are still open",
	trigger: ".o_search_bar_menu",
	run: () => null, // it's a check
}, {
	content: "Go back to My Website",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('My Website')",
}, {
	content: "Check that the homepage is now the one of My Website",
	trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
			 "~ .o_data_cell[name=website_id]:contains('My Website'):not(:contains('2'))",
	run: () => null, // it's a check
}];

const deleteSelectedPage = [
    {
        content: "Click on Action",
        trigger: '.o_cp_action_menus button',
    },
    {
        content: "Click on Delete",
        trigger: '.o-dropdown--menu span:contains("Delete")',
    },
    {
        content: "Click on I am sure about this",
        trigger: 'main.modal-body input[type="checkbox"]',
        // The loading of the dependencies can take a while and
        // sometimes reach the default 10s timeout
        timeout: 20000,
    },
    {
        content: "Click on OK",
        trigger: '.modal-content footer button.btn-primary:not([disabled])',
    }
];
const homePage = 'tr:contains("Home")';

wTourUtils.registerWebsitePreviewTour('website_page_manager', {
    test: true,
    url: '/',
}, () => [
    {
        content: "Click on Site",
        trigger: 'button.dropdown-toggle[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Pages",
        trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
    },
    ...checkKanbanGroupBy,
    ...checkWebsiteFilter,
    {
        content: "Click on Home Page",
        trigger: `.o_list_renderer ${homePage} td.o_list_record_selector input[type="checkbox"]`,
    },
    ...deleteSelectedPage,
    {
        content: "Check that the page has been removed",
        trigger: `.o_list_renderer:not(:has(${homePage}))`,
        run: () => null,
    },
    {
        content: "Click on All Pages",
        trigger: '.o_list_renderer thead input[type="checkbox"]',
    },
    ...deleteSelectedPage,
    {
        content: "Check that all pages have been removed",
        trigger: '.o_list_renderer tbody:not(:has([data-id]))',
        run: () => null,
    },
]);

wTourUtils.registerWebsitePreviewTour('website_page_manager_session_forced', {
    test: true,
    url: '/',
}, () => [...wTourUtils.testSwitchWebsite('Test Website'), {
    content: "Click on Site",
    trigger: 'button.dropdown-toggle[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Click on Pages",
    trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
}, {
    content: "Check that the homepage is the one of Test Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('Test Website')",
    run: () => null, // it's a check
}, {
	content: "Click on the search options",
	trigger: ".o_searchview_dropdown_toggler",
}, {
	content: "Check that the selected website is Test Website",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('Test Website')",
    run: () => null, // it's a check
}]);

registry.category("web_tour.tours").add('website_page_manager_direct_access', {
    test: true,
    url: '/web#action=website.action_website_pages_list',
    steps: () => [{
    content: "Check that the homepage is the one of Test Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('Test Website')",
    run: () => null, // it's a check
}, {
	content: "Click on the search options",
	trigger: ".o_searchview_dropdown_toggler",
}, {
	content: "Check that the selected website is Test Website",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('Test Website')",
    run: () => null, // it's a check
}]});

return __exports;
});
;

/******************************************************
*  Filepath: /website/static/tests/tours/parallax.js  *
*  Lines: 70                                          *
******************************************************/
odoo.define('@website/../tests/tours/parallax', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const coverSnippet = {id: "s_cover", name: "Cover"};

wTourUtils.registerWebsitePreviewTour("test_parallax", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop(coverSnippet),
    wTourUtils.clickOnSnippet(coverSnippet),
    wTourUtils.changeOption("BackgroundOptimize", "we-toggler"),
    wTourUtils.changeOption("BackgroundOptimize", 'we-button[data-gl-filter="blur"]'),
{
    content: "Check that the Cover snippet has the Blur filter on its background image",
    trigger: "iframe .s_cover span[data-gl-filter='blur']",
    isCheck: true,
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="0"]'),
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe .s_cover[data-gl-filter='blur']",
    isCheck: true,
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe .s_cover.o_modified_image_to_save",
    isCheck: true,
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1"]'),
{
    content: "Check that the 'o_modified_image_to_save' class has been deleted from the old target",
    trigger: "iframe .s_cover:not(.o_modified_image_to_save)",
    isCheck: true,
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe span.s_parallax_bg.o_modified_image_to_save",
    isCheck: true,
},
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe span.s_parallax_bg[data-gl-filter='blur']",
    isCheck: true,
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1.5"]'),
{
    content: "Check that the option was correctly applied",
    trigger: 'iframe span.s_parallax_bg[style*=top][style*=bottom][style*=transform]',
    run: () => {}, //it's a check
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "The parallax should not add o_dirty when entering edit mode",
    trigger: 'iframe #wrap:not(.o_dirty)',
    run: () => {}, //it's a check
},
]);

return __exports;
});
;

/*********************************************************************
*  Filepath: /website/static/tests/tours/popup_visibility_option.js  *
*  Lines: 39                                                         *
*********************************************************************/
odoo.define('@website/../tests/tours/popup_visibility_option', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour(
    "website_popup_visibility_option",
    {
        test: true,
        edition: true,
        url: "/",
    },
    () => [
        wTourUtils.dragNDrop({
            id: "s_popup",
            name: "Popup",
        }),
        {
            content: "Click on the column within the popup snippet.",
            trigger: "iframe #wrap .s_popup .o_cc1",
        },
        {
            content: "Click the 'No Desktop' visibility option.",
            trigger:
                ".snippet-option-DeviceVisibility we-button[data-toggle-device-visibility='no_desktop']",
        },
        {
            content: "Verify that the popup is visible and the column is invisible.",
            trigger:
                ".o_we_invisible_root_parent i.fa-eye, ul .o_we_invisible_entry i.fa-eye-slash",
            run: () => null, // it's a check
        },
    ]
);

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/powerbox_snippet.js  *
*  Lines: 86                                                  *
**************************************************************/
odoo.define('@website/../tests/tours/powerbox_snippet', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("website_powerbox_snippet", {
    edition: true,
    test: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_text_block",
        name: "Text",
    }), {
        content: "Check if s_text_block snippet is inserted",
        trigger: "iframe .s_text_block",
        run: () => {},
    }, {
        content: "Select the last paragraph",
        trigger: "iframe .s_text_block p:last-child",
    }, {
        content: "Show the powerbox",
        trigger: "iframe .s_text_block p:last-child",
        run: function(actions) {
            actions.text(`/`, this.$anchor[0]);
            const wrapwrapEl = this.$anchor[0].closest("#wrapwrap");
            wrapwrapEl.dispatchEvent(
                new InputEvent("input", {
                    inputType: "insertText",
                    data: "/",
                })
            );
        },
    }, {
        content: "Initially alert snippet should be present in the powerbox",
        trigger: ".oe-powerbox-wrapper .oe-powerbox-commandName:contains('Alert')",
        run: () => {},
    }, {
        content: "Change the content to '/table' so that alert snippet should not be present in the powerbox",
        trigger: "iframe .s_text_block p:last-child",
        run: function() {
            const wrapwrapEl = this.$anchor[0].closest("#wrapwrap");
            this.$anchor[0].textContent = "/table";
            wrapwrapEl.ownerDocument.dispatchEvent(
                new KeyboardEvent('keyup', {
                    key: 'DummyKey',
                    code: 'KeyDummy',
                    cancelable: true,
                })
            );
        },
    }, {
        content: "Alert snippet should not be present in the powerbox",
        trigger: ".oe-powerbox-wrapper .oe-powerbox-commandName:not(:contains('Alert'))",
        run: () => {},
    }, {
        content: "Change the content to '/banner'",
        trigger: "iframe .s_text_block p:last-child",
        run: function() {
            const wrapwrapEl = this.$anchor[0].closest("#wrapwrap");
            this.$anchor[0].textContent = "/banner";
            wrapwrapEl.ownerDocument.dispatchEvent(
                new KeyboardEvent('keyup', {
                    key: 'DummyKey',
                    code: 'KeyDummy',
                    cancelable: true,
                })
            );
        },
    }, {
        content: "Alert snippet should be present in the powerbox",
        trigger: ".oe-powerbox-wrapper .oe-powerbox-commandName:contains('Alert')",
        run: () => {},
    }, {
        content: "Click on the alert snippet",
        trigger: ".oe-powerbox-wrapper .oe-powerbox-commandName:contains('Alert')",
    }, {
        content: "Check if s_alert snippet is inserted",
        trigger: "iframe .s_alert",
        run: () => {},
    }
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor.js  *
*  Lines: 16                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/public_user_editor', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('public_user_editor', {
    test: true,
    steps: () => [{
    trigger: '.note-editable',
    run: function () {}, // Simple check
}]});

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor_dep_widget.js  *
*  Lines: 18                                                               *
***************************************************************************/
odoo.loader.bus.addEventListener("module-started", (e) => {
    if (e.detail.moduleName === "@web_editor/js/frontend/loadWysiwygFromTextarea") {
        const publicWidget = odoo.loader.modules.get("@web/legacy/js/public/public_widget")[Symbol.for('default')];
        const { loadWysiwygFromTextarea } = e.detail.module;

        publicWidget.registry['public_user_editor_test'] = publicWidget.Widget.extend({
            selector: 'textarea.o_public_user_editor_test_textarea',

            /**
             * @override
             */
            start: async function () {
                await this._super(...arguments);
                await loadWysiwygFromTextarea(this, this.el, {});
            },
        });
    }
})
;

/************************************************************
*  Filepath: /website/static/tests/tours/reset_password.js  *
*  Lines: 33                                                *
************************************************************/
odoo.define('@website/../tests/tours/reset_password', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_reset_password', {
    test: true,
    steps: () => [
    {
        content: "fill new password",
        trigger: '.oe_reset_password_form input[name="password"]',
        run: "text adminadmin"
    },
    {
        content: "fill confirm password",
        trigger: '.oe_reset_password_form input[name="confirm_password"]',
        run: "text adminadmin"
    },
    {
        content: "submit reset password form",
        trigger: '.oe_reset_password_form button[type="submit"]',
    },
    {
        content: "check that we're logged in",
        trigger: '.o_user_menu .dropdown-toggle',
        run: function () {}
    },
]});

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/restricted_editor.js  *
*  Lines: 16                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/restricted_editor', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("restricted_editor", {
    test: true,
    url: "/",
}, () => [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]);

return __exports;
});
;

/*************************************************
*  Filepath: /website/static/tests/tours/rte.js  *
*  Lines: 257                                    *
*************************************************/
odoo.define('@website/../tests/tours/rte', ['@website/js/tours/tour_utils', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];
const { whenReady } = require("@odoo/owl");

wTourUtils.registerWebsitePreviewTour('rte_translator', {
    test: true,
    url: '/',
    edition: true,
    wait_for: whenReady(),
}, () => [
wTourUtils.goToTheme(),
{
    content: "click on Add a language",
    trigger: "we-button[data-add-language]"
}, {
    content: "confirm leave editor",
    trigger: ".modal-dialog button.btn-primary"
}, {
    content: "type Parseltongue",
    trigger: 'div[name="lang_ids"] .o_input_dropdown input',
    run: 'text Parseltongue',
}, {
    content: 'select Parseltongue',
    trigger: '.dropdown-item:contains(Parseltongue)',
}, {
    content: "load Parseltongue",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-dialog div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
}, {
    content: "click language dropdown (2)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    timeout: 60000,
}, {
    content: "go to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    extra_trigger: 'iframe html[lang*="en-US"]',
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "click on Use this template",
    trigger: ".o_page_template button.btn-primary",
}, {
    content: "insert file name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator.xml',
}, {
    content: "create file",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator.xml)',
}, {
    content: "click on the 'page manager' button",
    trigger: 'button[name="website.action_website_pages_list"]',
}, {
    content: "click on the record to display the xml file in the iframe",
    trigger: 'td:contains("rte_translator.xml")',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "click on Use this template",
    trigger: ".o_page_template button.btn-primary",
}, {
    content: "insert page name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator',
}, {
    content: "create page",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator)',
},
wTourUtils.dragNDrop({
    id: "s_cover",
    name: "Cover"
}), {
    content: "change content",
    trigger: 'iframe #wrap',
    run: function () {
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap p:first").replaceWith('<p>Write one or <font style="background-color: yellow;">two paragraphs <b>describing</b></font> your product or\
                <font style="color: rgb(255, 0, 0);">services</font>. To be successful your content needs to be\
                useful to your <a href="/999">readers</a>.</p> <input value="test translate default value" placeholder="test translate placeholder"/>\
                <p>&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty</p>');
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap img").attr("title", "test translate image title");
    }
}, {
    content: "ensure change was applied",
    trigger: 'iframe #wrap p:first b',
    isCheck: true,
},
...wTourUtils.clickOnSave(),
{
    content: "click language dropdown (3)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
}, {
    content: "click on Parseltongue version",
    trigger: 'iframe .js_language_selector a[data-url_code="pa_GB"]',
    extra_trigger: 'iframe html[lang*="en"]',
}, {
    content: "translate",
    trigger: '.o_menu_systray .o_translate_website_container > a',
    extra_trigger: 'iframe html:not(:has(#wrap p span))',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-secondary',
}, {
    content: "check if translation is activate",
    trigger: 'iframe [data-oe-translation-initial-sha]',
}, {
    content: "translate text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p font:first',
    run: function (actionHelper) {
        actionHelper.text('translated Parseltongue text');
        const { Wysiwyg } = odoo.loader.modules.get('@web_editor/js/wysiwyg/wysiwyg');
        Wysiwyg.setRange(this.$anchor.contents()[0], 22);
        this.$anchor.trigger($.Event("keyup", {key: '_'}));
        this.$anchor.trigger('input');
    },
}, {
    content: "translate text with special char",
    trigger: 'iframe #wrap input + p span:first',
    run: function (actionHelper) {
        actionHelper.click();
        this.$anchor.prepend('&lt;{translated}&gt;');
        const { Wysiwyg } = odoo.loader.modules.get('@web_editor/js/wysiwyg/wysiwyg');
        Wysiwyg.setRange(this.$anchor.contents()[0], 0);
        this.$anchor.trigger($.Event("keyup", {key: '_'}));
        this.$anchor.trigger('input');
    },
}, {
    content: "click on input",
    trigger: 'iframe #wrap input:first',
    extra_trigger: 'iframe #wrap .o_dirty font:first:contains(translated Parseltongue text)',
    run: 'click',
}, {
    content: "translate placeholder",
    trigger: '.modal-dialog input:first',
    run: 'text test Parseltongue placeholder',
}, {
    content: "translate default value",
    trigger: '.modal-dialog input:last',
    run: 'text test Parseltongue default value',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal input:propValue(test Parseltongue placeholder)',
}, {
    content: "check: input marked as translated",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"].oe_translated',
    run: () => {},
},
...wTourUtils.clickOnSave(),
{
    content: "check: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    run: function () {}, // it's a check
}, {
    content: "check: content with special char is translated",
    trigger: "iframe #wrap input + p:contains(<{translated}><b></b> is an HTML\xa0tag & )",
    run: function () {}, // it's a check

}, {
    content: "check: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
    run: function () {}, // it's a check
}, {
    content: "check: default value translation",
    trigger: 'iframe input[value="test Parseltongue default value"]',
    run: () => {},
}, {
    content: "open language selector",
    trigger: 'iframe .js_language_selector button:first',
    extra_trigger: 'iframe html[lang*="pa-GB"]:not(:has(#wrap p span))',
}, {
    content: "return to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
}, {
    content: "Check body",
    trigger: "iframe body:not(:has(#wrap p font:first:containsExact(paragraphs <b>describing</b>)))",
    run: function () {}, // it's a check
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "select text",
    trigger: 'iframe #wrap p',
    run: function (actionHelper) {
        actionHelper.click();
        var el = this.$anchor[0];
        var mousedown = document.createEvent('MouseEvents');
        mousedown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mousedown);
        var mouseup = document.createEvent('MouseEvents');
        const { Wysiwyg } = odoo.loader.modules.get('@web_editor/js/wysiwyg/wysiwyg');
        Wysiwyg.setRange(el.childNodes[2], 6, el.childNodes[2], 13);
        mouseup.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mouseup);
    },
// This is disabled for now because it reveals a bug that is fixed in saas-15.1
// and considered a tradeoff in 15.0. The bug concerns the invalidation of
// translations when inserting tags with more than one character. Whereas <u>
// didn't trigger an invalidation, <span style="text-decoration-line: underline;">
// does.
// }, {
//     content: "underline",
//     trigger: '.oe-toolbar #underline',
},
...wTourUtils.clickOnSave(),
{
    content: "click language dropdown (4)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
}, {
    content: "return in Parseltongue",
    trigger: 'iframe html[lang="en-US"] .js_language_selector .js_change_lang[data-url_code="pa_GB"]',
}, {
    content: "check bis: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "check bis: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
}, {
    content: "open site menu",
    trigger: 'button[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Open HTML editor",
    trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
}, {
    content: "Check that the editor is not showing translated content (1)",
    trigger: '.ace_text-layer .ace_line:contains("an HTML")',
    run: function (actions) {
        var lineEscapedText = $(this.$anchor.text()).last().text();
        if (lineEscapedText !== "&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty") {
            console.error('The HTML editor should display the correct untranslated content');
            $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('rte_translator_error');
        }
    },
}, {
    content: "Check that the editor is not showing translated content (2)",
    trigger: 'iframe body:not(.rte_translator_error)',
    run: function () {},
}]);

return __exports;
});
;

/***********************************************************************
*  Filepath: /website/static/tests/tours/skip_website_configurator.js  *
*  Lines: 52                                                           *
***********************************************************************/
odoo.define('@website/../tests/tours/skip_website_configurator', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('skip_website_configurator', {
    test: true,
    url: '/web#action=website.action_website_configuration',
    steps: () => [
    {
        content: "create a new website",
        trigger: 'button[name="action_website_create_new"]',
    },
    {
        content: "insert website name",
        trigger: 'div[name="name"] input',
        run: 'text Website EN'
    },
    {
        content: "validate the website creation modal",
        trigger: 'button.btn-primary'
    },
    {
        content: "skip configurator",
        // This trigger targets the skip button, it doesn't have a more
        // explicit class or ID.
        trigger: '.o_configurator_container .container-fluid .btn.btn-link'
    },
    {
        content: "make hover button appear",
        trigger: '.o_theme_preview',
        run: () => {
            $('.o_theme_preview .o_button_area').attr('style', 'visibility: visible; opacity: 1;');
        },
    },
    {
        content: "Install a theme",
        trigger: 'button[name="button_choose_theme"]'
    },
    {
        content: "Check that the homepage is loaded",
        trigger: ".o_website_preview[data-view-xmlid='website.homepage']",
        extra_trigger: ".o_menu_systray .o_user_menu",
        timeout: 30000,
        isCheck: true,
    },
]});

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippet_background_edition.js  *
*  Lines: 396                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippet_background_edition', ['@web_editor/js/common/utils', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const weUtils = require('@web_editor/js/common/utils')[Symbol.for("default")];
const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
];
const gradients = [
    'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
    'linear-gradient(135deg, rgb(255, 222, 202) 0%, rgb(202, 115, 69) 100%)',
];

function typeToName(xType) {
    return xType === 'cc' ? 'color combinations' : xType === 'bg' ? 'background colors' : 'gradients';
}

function switchTo(type, _name) {
    const target = type === 'cc' ? 'color-combinations' : type === 'bg' ? 'custom-colors' : 'gradients';
    const name = _name || typeToName(type);
    return {
        trigger: `.o_we_colorpicker_switch_pane_btn[data-target="${target}"]`,
        content: `Switch to ${name}`,
    };
}

function addCheck(steps, checkX, checkNoX, xType, noSwitch = false) {
    if (!checkX && !checkNoX) {
        return;
    }

    const name = typeToName(xType);
    const selectorCheckX = checkX && `.o_we_color_btn[data-color="${checkX}"].selected`;
    const selectorCheckNoX = checkNoX && `.o_we_color_btn[data-color="${checkNoX}"]:not(.selected)`;
    const step = {
        trigger: selectorCheckX || selectorCheckNoX,
        content: `The correct ${name} is marked as selected`,
        position: 'bottom',
        run: () => null,
    };
    if (!selectorCheckX && selectorCheckNoX) {
        step.extra_trigger = selectorCheckNoX;
    }

    if (!noSwitch) {
        steps.push(switchTo(xType, name));
    }
    steps.push(step);
}

function checkAndUpdateBackgroundColor({
    checkCC, checkNoCC,
    checkBg, checkNoBg,
    checkGradient, checkNoGradient,
    changeType, change,
    finalSelector, finalRun
}) {
    const steps = [
        wTourUtils.changeBackgroundColor(),
    ];

    addCheck(steps, checkCC, checkNoCC, 'cc', true);
    addCheck(steps, checkBg, checkNoBg, 'bg');
    addCheck(steps, checkGradient, checkNoGradient, 'gradient');

    if (changeType) {
        steps.push(switchTo(changeType));
        steps.push(wTourUtils.changeOption('ColoredLevelBackground', `.o_we_color_btn[data-color="${change}"]`, 'background color', 'top', true));
        steps.push({
            trigger: finalSelector,
            content: "The selected colors have been applied (CC AND (BG or GRADIENT))",
            position: 'bottom',
            run: finalRun,
        });
    }

    return steps;
}

function updateAndCheckCustomGradient({updateStep, checkGradient}) {
    const steps = [updateStep, {
        trigger: `iframe #wrapwrap section.${snippets[0].id}.o_cc1`,
        content: 'Color combination 1 still selected',
        run: () => null,
    }];
    addCheck(steps, checkGradient, checkGradient !== gradients[0] && gradients[0], 'gradient', true);
    return steps;
}

wTourUtils.registerWebsitePreviewTour('snippet_background_edition', {
    url: '/',
    edition: true,
    test: true,
},
() => [
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),

// Set background image and save.
{
    content: "Click on camera icon",
    trigger: ".snippet-option-ColoredLevelBackground we-button.fa-camera",
},
{
    content: "Click on image",
    trigger: ".o_select_media_dialog img[title='test.png']",
},
...wTourUtils.clickOnSave(),
{
    content: "Check that the image is set",
    trigger: `iframe section.${snippets[0].id} img[data-original-id]`,
    isCheck: true,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.clickOnSnippet(snippets[0]),
// Remove background image.
{
    content: "Click on camera icon",
    trigger: ".snippet-option-ColoredLevelBackground we-button.fa-camera",
},

// Add a color combination
...checkAndUpdateBackgroundColor({
    changeType: 'cc',
    change: 3,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc3:not([class*=bg-]):not([style*="background"])`,
}),

// Change the color combination + Check the previous one was marked as selected
...checkAndUpdateBackgroundColor({
    checkCC: 3,
    changeType: 'cc',
    change: 2,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2:not(.o_cc3):not([class*=bg-])`,
}),

// Check the color combination was marked as selected + Edit the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkNoCC: 3,
    changeType: 'bg',
    change: 'black-50',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-black-50`,
}),

// Check the current color palette selection + Change the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: 'black-50',
    changeType: 'bg',
    change: '800',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-800:not(.bg-black-50)`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the bg color class.
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: '800',
    checkNoBg: 'black-50',
    changeType: 'cc',
    change: 4,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.o_cc2).bg-800`,
}),

// Check the current color palette status + Replace the bg color by a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoCC: 2,
    checkBg: '800',
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.bg-800)[style*="background-image: ${gradients[0]}"]`,
}),

// Check the current color palette status + Replace the gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoBg: '800',
    checkGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4[style*="background-image: ${gradients[1]}"]:not([style*="background-image: ${gradients[0]}"])`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the gradient.
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkGradient: gradients[1],
    checkNoGradient: gradients[0],
    changeType: 'cc',
    change: 1,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.o_cc4)[style*="background-image: ${gradients[1]}"]`,
}),

// Final check of the color status in the color palette
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoCC: 4,
    checkGradient: gradients[1],
}),

// Now, add an image on top of that color combination + gradient
{
    // Close the palette before selecting a media.
    trigger: '.snippet-option-ColoredLevelBackground we-title',
    content: 'Close palette',
},
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]'),
{
    trigger: '.o_existing_attachment_cell img',
    content: "Select an image in the media dialog",
},
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1`,
    run: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('An image should have been added as background.');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been kept when adding the background image');
        }
    },
},

// Replace the gradient while there is a background-image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[1],
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not([style*="${gradients[1]}"])`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when changing the gradient');
        }
        if (parts.gradient !== gradients[0]) {
            console.error('The gradient should have been changed');
        }
    },
}),

// Customize gradient
wTourUtils.changeBackgroundColor(),
switchTo('gradient'),
// Avoid navigating across tabs to maintain current editor state
// Step colors
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_custom_gradient_scale',
        content: 'Add step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_slider_multi input.active',
        content: 'Move step',
        run: () => {
            const slider = $('.colorpicker .o_slider_multi input.active');
            slider.val(45);
            slider.trigger('click');
        },
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_color_picker_inputs .o_hex_div input',
        content: 'Pick step color',
        run: 'text #FF0000',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(255, 0, 0) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_remove_color',
        content: 'Delete step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Linear
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="angle"]',
        content: 'Change angle',
        run: 'text_blur 50',
    },
    checkGradient: 'linear-gradient(50deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Radial
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-type="radial-gradient"]',
        content: 'Switch to Radial',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 25% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionX"]',
        content: 'Change X position',
        run: 'text_blur 33',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionY"]',
        content: 'Change Y position',
        run: 'text_blur 75',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-size="closest-side"]',
        content: 'Change color spread size',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle closest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Revert to predefined gradient
{
    trigger: `.o_we_color_btn[data-color="${gradients[0]}"]`,
    content: `Revert to predefiend gradient ${gradients[0]}`,
    run: 'click',
},

// Replace the gradient by a bg color
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[0],
    checkNoGradient: gradients[1],
    changeType: 'bg',
    change: 'black-75',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1.bg-black-75[style^="background-image: url("]:not([style*="${gradients[0]}"])`
}),

// Re-add a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkBg: 'black-75',
    checkNoGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.bg-black-75)`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when re-adding the gradient');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been re-added');
        }
    },
}),

// Final check of color selection and removing the image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoBg: 'black-75',
    checkGradient: gradients[1],
}),
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]', 'image toggle', 'top', true),
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1[style*="background-image: ${gradients[1]}"]`,
    run: () => null,
},

// Now removing all colors via the 'None' button (note: colorpicker still opened)
{
    trigger: '.o_colorpicker_reset',
    content: "Click on the None button of the color palette",
},
{
    trigger: `iframe .${snippets[0].id}:not(.o_cc):not(.o_cc1):not([style*="background-image"])`,
    content: "All color classes and properties should have been removed",
    run: () => null,
}
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/snippet_cache_across_websites.js  *
*  Lines: 31                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/snippet_cache_across_websites', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_cache_across_websites', {
    edition: true,
    test: true,
    url: '/@/'
}, () => [
    {
        content: "Check that the custom snippet is displayed",
        trigger: '#snippet_custom_body span:contains("custom_snippet_test")',
        run: () => null,
    },
    // There's no need to save, but canceling might or might not show a popup...
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.testSwitchWebsite('Test Website'),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Check that the custom snippet is not here",
        extra_trigger: '#oe_snippets:not(:has(#snippet_custom_body span:contains("custom_snippet_test")))',
        trigger: '#oe_snippets:has(#snippet_custom.d-none)',
        run: () => null,
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/snippet_countdown.js  *
*  Lines: 62                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/snippet_countdown', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_countdown', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.clickOnSnippet({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message"]', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button.toggle-edit-message', 'message preview'),
    // The next two steps check that the end message does not disappear when a
    // widgets_start_request is triggered.
    {
        content: "Hover an option which has a preview",
        trigger: '[data-select-class="o_half_screen_height"]',
        run: function (actions) {
            this.$anchor.trigger('mouseover');
            this.$anchor.trigger('mouseenter');
        },
    },
    {
        content: "Check that the countdown message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => {
            // Just a visibility check

            // Also make sure the mouseout and mouseleave are triggered so that
            // next steps make sense.
            // TODO the next steps are not actually testing anything without
            // it and the mouseout and mouseleave make sense but really it
            // should not be *necessary* to simulate those for the editor flow
            // to make some sense.
            const $previousAnchor = $('[data-select-class="o_half_screen_height"]');
            $previousAnchor.trigger('mouseout');
            $previousAnchor.trigger('mouseleave');
        },
    },
    // Next, we change the end action to message and no countdown while the edit
    // message toggle is still activated. It should hide the countdown
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message_no_countdown"]', 'end action'),
    {
        content: "Check that the countdown is not displayed",
        trigger: 'iframe .s_countdown:has(.s_countdown_canvas_wrapper:not(:visible))',
        run: () => null, // Just a visibility check
    },
    {
        content: "Check that the message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => null, // Just a visibility check
    },
]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_editor_panel_options.js  *
*  Lines: 208                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_editor_panel_options', ['@website/js/tours/tour_utils', '@web/core/browser/browser'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];
const { browser } = require('@web/core/browser/browser');

wTourUtils.registerWebsitePreviewTour('snippet_editor_panel_options', {
    test: true,
    url: '/',
    edition: true,
}, () => [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
// Test keeping the text selection when using the width option.
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_image p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the width option.",
    trigger: '[data-select-class="o_container_small"]',
}, {
    content: "The snippet should have the correct class.",
    trigger: 'iframe .s_text_image > .o_container_small',
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test the anchor option.
{
    content: "Click on the anchor option",
    trigger: '#oe_snippets .snippet-option-anchor we-button',
    run() {
        // Patch and ignore write on clipboard in tour as we don't have permissions
        const oldWriteText = browser.navigator.clipboard.writeText;
        browser.navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
        this.$anchor[0].click();
        browser.navigator.clipboard.writeText = oldWriteText;
    }
}, {
    content: "Check the copied url from the notification toast",
    trigger: '.o_notification_manager .o_notification_content',
    run() {
        const { textContent } = this.$anchor[0];
        const url = textContent.substring(textContent.indexOf('/'));

        // The url should not target the client action
        if (url.startsWith('/@')) {
            console.error('The anchor option should target the frontend');
        }

        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const snippetId = iframeDocument.querySelector('.s_text_image').id;
        if (!url || url.indexOf(snippetId) < 0) {
            console.error('The anchor option does not target the correct snippet.');
        }
    },
},
// Test keeping the text selection when adding columns to a snippet with none.
wTourUtils.goBackToBlocks(),
wTourUtils.dragNDrop({
    id: 's_text_block',
    name: 'Text',
}),
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_block p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="3"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container > .row .col-lg-4:eq(3)',
    run() {
        if (this.$anchor[0].childElementCount !== 3) {
            console.error("The snippet does not have the correct number of columns");
        }
    },
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when removing all columns of a snippet.
{
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="0"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container:not(:has(.row))',
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling the grid mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
{
    content: "The snippet row should have the grid mode class.",
    trigger: "iframe .s_text_block .row.o_grid_mode",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling back the normal mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="normal_mode"]'),
{
    content: "The snippet row should not have the grid mode class anymore.",
    trigger: "iframe .s_text_block .row:not(.o_grid_mode)",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test close dropdowns if click anywhere outside the dropdown
{
    content: "Open text style dropdown.",
    trigger: "#style button.dropdown-toggle",
}, {
    content: "Check if dropdown opened correctly.",
    trigger: "#style button[data-bs-toggle=dropdown][aria-expanded=true]",
    run: () => {}, // It's a check.
}, {
    content: "Click on the first paragraph again.",
    trigger: "iframe .s_text_block p",
}, {
    content: "Check if dropdown closed correctly.",
    trigger: "#style button[data-bs-toggle=dropdown][aria-expanded=false]",
    run: () => {}, // It's a check.
},
...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_empty_parent_autoremove.js  *
*  Lines: 82                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/snippet_empty_parent_autoremove', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

function removeSelectedBlock() {
    return {
        content: "Remove selected block",
        trigger: '#oe_snippets we-customizeblock-options:nth-last-child(3) .oe_snippet_remove',
    };
}

wTourUtils.registerWebsitePreviewTour('snippet_empty_parent_autoremove', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // Base case: remove both columns from text - image
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on second column",
        trigger: 'iframe #wrap .s_text_image .row > :nth-child(2)',
    },
    removeSelectedBlock(),
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_text_image .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
    },

    // Cover: test that parallax, bg-filter and shape are not treated as content
    wTourUtils.dragNDrop({
        id: 's_cover',
        name: 'Cover',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_cover',
        name: 'Cover',
    }),
    // Add a shape
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that the parallax element is present",
        trigger: 'iframe #wrap .s_cover .s_parallax_bg',
        run: () => null,
    },
    {
        content: "Check that the filter element is present",
        trigger: 'iframe #wrap .s_cover .o_we_bg_filter',
        run: () => null,
    },
    {
        content: "Check that the shape element is present",
        trigger: 'iframe #wrap .s_cover .o_we_shape',
        run: () => null,
    },
    // Add a column
    wTourUtils.changeOption('layout_column', 'we-toggler'),
    wTourUtils.changeOption('layout_column', '[data-select-count="1"]'),
    {
        content: "Click on the created column",
        trigger: 'iframe #wrap .s_cover .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
        run: () => null,
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_gallery.js  *
*  Lines: 154                                                      *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_gallery', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_image_gallery', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: 's_image_gallery', name: 'Images Wall'}),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Click on an image of the Image Wall',
        trigger: 'iframe .s_image_gallery img',
        run: 'click',
    },
    {
        content: 'Check that the modal has opened properly',
        trigger: 'iframe .s_gallery_lightbox img',
        isCheck: true,
    },
]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_remove", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
}), wTourUtils.clickOnSnippet({
    id: 's_image_gallery',
    name: 'Image Gallery',
}), {
    content: "Click on Remove all",
    trigger: "we-button:has(div:contains('Remove all'))",
}, {
    content: "Click on Add Images",
    trigger: "iframe span:contains('Add Images')",
}, {
    content: "Click on the first new image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
}, {
    content: "Click on the second new image",
    trigger: ".o_select_media_dialog img[title='s_default_image2.jpg']",
},
    wTourUtils.addMedia(),
   {
    content: "Click on the image of the Image Gallery snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active  img",
}, {
    content: "Check that the Snippet Editor of the clicked image has been loaded",
    trigger: "we-customizeblock-options span:contains('Image'):not(:contains('Image Gallery'))",
    isCheck: true,
}, {
    content: "Click on Remove Block",
    trigger: ".o_we_customize_panel we-title:has(span:contains('Image Gallery')) we-button[title='Remove Block']",
}, {
    content: "Check that the Image Gallery snippet has been removed",
    trigger: "iframe #wrap:not(:has(.s_image_gallery))",
    isCheck: true,
}]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_reorder", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
{
    content: "Click on the first image of the snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active img",
},
    wTourUtils.changeOption('ImageTools', 'we-select:contains("Filter") we-toggler'),
    wTourUtils.changeOption('ImageTools', '[data-gl-filter="blur"]'),
{
    content: "Check that the image has the correct filter",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    isCheck: true,
}, {
    content: "Click on move to next",
    trigger: ".snippet-option-GalleryElement we-button[data-position='next']",
}, {
    content: "Check that the image has been moved",
    trigger: "iframe .s_image_gallery .carousel-item.active img[data-index='1']",
    isCheck: true,
}, {
    content: "Click on the footer to reload the editor panel",
    trigger: "iframe #footer",
}, {
    content: "Check that the footer options have been loaded",
    trigger: ".snippet-option-HideFooter we-button:contains('Page Visibility')",
    isCheck: true,
}, {
    content: "Click on the moved image",
    trigger: "iframe .s_image_gallery .carousel-item.active img[data-index='1'][data-gl-filter='blur']",
}, {
    content: "Check that the image still has the correct filter",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    isCheck: true,
}, {
    content: "Click to access next image",
    trigger: "iframe .s_image_gallery .carousel-control-next",
}, {
    content: "Check that the option has changed",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:not(:contains('Blur'))",
    isCheck: true,
}, {
    content: "Click to access previous image",
    trigger: "iframe .s_image_gallery .carousel-control-prev",
}, {
    content: "Check that the option is restored",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    isCheck: true,
}]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_thumbnail_update", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
    wTourUtils.clickOnSnippet({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
    wTourUtils.changeOption("GalleryImageList", "we-button[data-add-images]"),
{
    content: "Click on the default image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
},
    wTourUtils.addMedia(),
{
    content: "Check that the new image has been added",
    trigger: "iframe .s_image_gallery:has(img[data-index='3'])",
    isCheck: true,
}, {
    content: "Check that the thumbnail of the first image has not been changed",
    trigger: "iframe .s_image_gallery ul.carousel-indicators li:first-child[style='background-image: url(/web/image/website.library_image_08)']",
    isCheck: true,
}]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_quality.js  *
*  Lines: 61                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_quality', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('website_image_quality', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Select image",
        trigger: 'iframe .s_text_image img',
    },
    {
        content: "Set low quality",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) we-range[data-set-quality] input',
        run: 'range 5',
    },
    {
        content: "Wait for image update: NOT original image",
        trigger: 'iframe .s_text_image img:not([src$="s_text_image_default_image"])',
        run: () => {}, // It is a check.
    },
    {
        content: "Check image size",
        // Reached size cannot be hardcoded because it changes with
        // different versions of Chrome.
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) .o_we_image_weight:contains(" kb"):not(:contains("41.5 kb"))',
        run() {
            // Make sure the reached size is smaller than the original one.
            if (parseFloat(this.$anchor[0].innerText) >= 47.5) {
                console.error("Image size should be smaller than original");
            }
        },
    },
    {
        content: "Set high quality",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) we-range[data-set-quality] input',
        run: 'range 99',
    },
    {
        content: "Wait for image update: back to original image",
        trigger: 'iframe .s_text_image img[src$="0sOnkdNPFFV0lRVRLK+B7PJ5F4If2IY8ngQsDP//Z"]',
        run: () => {}, // It is a check.
    },
    {
        content: "Check image size",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) .o_we_image_weight:contains("41.5 kb")',
        run: () => {}, // It is a check.
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_images_wall.js  *
*  Lines: 111                                                    *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_images_wall', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const wallRaceConditionClass = "image_wall_race_condition";
const preventRaceConditionSteps = [{
    content: "Wait a few ms to avoid race condition",
    // Ensure the class is remove from previous call of those steps
    trigger: `body:not(.${wallRaceConditionClass})`,
    run() {
        setTimeout(() => {
            document.body.classList.add(wallRaceConditionClass);
        }, 500);
    }
}, {
    content: "Check the race condition class is added after a few ms",
    trigger: `body.${wallRaceConditionClass}`,
    run() {
        document.body.classList.remove(wallRaceConditionClass);
    }
}];

const selectSignImageStep = {
    content: "Click on image 14",
    extra_trigger: ".o_we_customize_panel:not(:has(.snippet-option-GalleryElement))",
    trigger: "iframe .s_image_gallery img[data-original-src*='library_image_14']",
};
// Without reselecting the image, the tour manages to click on the
// move button before the active image is updated.

// We need to wait a few ms before clicking on the footer because after
// clicking on reposition option, there may be a delay during the click on
// another block would be ignored.
const reselectSignImageSteps = [
    ...preventRaceConditionSteps,
{
    content: "Select footer",
    extra_trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'])",
    trigger: "iframe footer",
}, selectSignImageStep];

wTourUtils.registerWebsitePreviewTour("snippet_images_wall", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_images_wall",
        name: "Images Wall",
}), wTourUtils.clickOnSnippet({
    id: "s_image_gallery",
    name: "Images Wall",
}),
selectSignImageStep,
{
    content: "Click on add a link",
    trigger: ".snippet-option-ReplaceMedia we-button[data-set-link]",
}, {
    content: "Change the link of the image",
    trigger: ".snippet-option-ReplaceMedia [data-set-url] input",
    run: "text /contactus",
}, {
    content: "Click on move to previous",
    trigger: ".snippet-option-GalleryElement we-button[data-position='prev']",
}, {
    content: "Check if sign is in second column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(2):has(a[href='/contactus'] img[data-index='1'][data-original-src*='library_image_14'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to first",
    trigger: ".snippet-option-GalleryElement we-button[data-position='first']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='library_image_14'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-GalleryElement we-button[data-position='prev']",
}, {
    content: "Check if sign is in third column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='library_image_14'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to next",
    trigger: ".snippet-option-GalleryElement we-button[data-position='next']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='library_image_14'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to last",
    trigger: ".snippet-option-GalleryElement we-button[data-position='last']",
}, {
    content: "Check layout",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='library_image_14'])",
    isCheck: true,
}]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_add_remove.js  *
*  Lines: 84                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_add_remove', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_popup_add_remove', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        name: "Popup",
        id: "s_popup"
}), {
    content: 'Edit s_popup snippet',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] .row > div', // Click deep in the snippet structure
}, {
    content: 'Check s_popup setting are loaded, wait panel is visible',
    in_modal: false,
    trigger: '.o_we_customize_panel',
    run: () => null,
},
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Toggle the visibility of the Popup',
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry:contains("Popup")',
}, {
    content: 'Edit s_popup snippet(2)',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] h2',
    run: function() {
        // Simulating pressing enter.
        const anchor = this.$anchor[0];
        // Trick the editor into keyboardType === 'PHYSICAL' and press enter
        anchor.dispatchEvent(new KeyboardEvent("keydown", { key: "Enter", bubbles: true }));
        // Trigger editor's '_onInput' handler, which leads to historyRollback.
        anchor.dispatchEvent(new InputEvent('input', { inputType: 'insertLineBreak', bubbles: true }));
    }
}, {
    content: 'Check the s_popup was visible',
    in_modal: false,
    trigger: 'iframe #wrapwrap:has([data-snippet="s_popup"]:not(.d-none))',
    run: () => null,
}, {
    content: `Remove the s_popup snippet`,
    in_modal: false,
    trigger: '.o_we_customize_panel we-customizeblock-options:contains("Popup") we-button.oe_snippet_remove:first',
}, {
    content: 'Check the s_popup was removed',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null,
},
// Test that undoing dropping the snippet removes the invisible elements panel.
wTourUtils.dragNDrop({
    name: "Popup",
    id: "s_popup"
}), {
    content: "The popup should be in the invisible elements panel.",
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    run: () => null, // It's a check.
}, {
    content: "Click on the 'undo' button.",
    in_modal: false,
    trigger: '#oe_snippets button[data-action="undo"]',
}, {
    content: "Check that the s_popup was removed.",
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null, // It's a check.
}, {
    content: "The invisible elements panel should also be removed.",
    trigger: '#oe_snippets:has(.o_we_invisible_el_panel.d-none)',
    run: () => null, // It's a check.
}]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_animations.js  *
*  Lines: 196                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_animations', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
    {
        id: "s_three_columns",
        name: "Columns",
    },
];

const setOnScrollAnim = function () {
    return [
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-is-animation-type-selection="true"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-animation-mode="onScroll"]'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-name="animation_effect_opt"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-name="o_anim_slide_in_opt"]'),
    ];
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_animations", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[2]), // Columns
    wTourUtils.clickOnElement("3rd columns", "iframe .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    {
        content: "Scroll to top",
        trigger: "iframe #wrapwrap",
        extra_trigger: "iframe #website_cookies_bar:not(.d-none)",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the page did not start properly with the cookies bar open.");
            }
            this.$anchor[0].scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait for the page to be scrolled to the top.",
        trigger: "iframe .s_three_columns .row > :last-child:not(.o_animating)",
        extra_trigger: "iframe header#top:not(.o_header_affixed)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            // The main goal of the following condition is to verify if the
            // animation delay is being updated as expected.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the page did not end properly with the cookies bar open.");
            }
        },
    },
    {
        content: "Close the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
        run: "click",
    },
    wTourUtils.dragNDrop(snippets[0]), // Popup
    wTourUtils.dragNDrop(snippets[1]), // Media List
    {
        content: "Drag the Columns building block and drop it at the bottom of the popup.",
        trigger: '#oe_snippets .oe_snippet[name="Columns"] .oe_snippet_thumbnail:not(.o_we_already_dragging)',
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets",
        run: "drag_and_drop_native iframe #wrapwrap .modal-content .s_media_list .container > .row > :last-child",
    },
    wTourUtils.clickOnElement("3rd columns", "iframe .s_popup .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Verify the animation delay of the animated element in the popup at the beginning",
        trigger: "iframe .s_popup .modal",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the modal did not start properly.");
            }
            this.$anchor[0].closest(".modal").scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait until the column is no longer animated/visible.",
        trigger: "iframe .s_popup .s_three_columns .row > :last-child:not(.o_animating)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the modal did not end properly.");
            }
        },
    },
    {
        content: "Close the Popup",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup') i.fa-eye",
    },
    {
        content: "Check that the popup has been closed",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup') i.fa-eye-slash",
        isCheck: true,
    },
    wTourUtils.clickOnElement("Last image of the 'Columns' snippet", "iframe .s_three_columns .o_animate_on_scroll img"),
    wTourUtils.changeOption("WebsiteAnimate", 'we-toggler:contains("None")'),
    wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-animation-mode="onHover"]'),
    {
        content: "Check that the hover effect animation has been applied on the image",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='overlay']",
        extra_trigger: ".snippet-option-WebsiteAnimate we-row:contains('Animation') we-select[data-is-animation-type-selection] we-toggler:contains('On Hover')",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnElement("Image of the 'Columns' snippet with the overlay effect", "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='overlay']"),
    wTourUtils.changeOption("WebsiteAnimate", 'we-toggler:contains("Overlay")'),
    wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-select-data-attribute="outline"]'),
    {
        content: "Check that the outline effect has been applied on the image",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']",
        extra_trigger: ".snippet-option-WebsiteAnimate we-select[data-attribute-name='hoverEffect'] we-toggler:contains('Outline')",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the image src is not the raw data",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']",
        run: () => {
            const imgEl = document.querySelector("iframe").contentDocument.querySelector(".s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']");
            const src = imgEl.getAttribute("src");
            if (src.startsWith("data:image")) {
                console.error("The image source should not be raw data after the editor save");
            }
        },
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnElement("Image of the 'Columns' snippet with the outline effect", "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']"),
    wTourUtils.changeOption("ImageTools", 'we-select:contains("Filter") we-toggler:contains("None")'),
    wTourUtils.changeOption("ImageTools", 'we-button:contains("Blur")'),
    {
        content: "Check that the Blur filter has been applied on the image",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img[data-gl-filter='blur']",
        extra_trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
        isCheck: true,
    },
    {
        content: "Click on the 'undo' button",
        trigger: ".o_we_external_history_buttons button.fa-undo",
    },
    {
        content: "Check that the Blur filter has been removed from the image",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img:not([data-gl-filter='blur'])",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the image src is not the raw data",
        trigger: "iframe .s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']",
        run: () => {
            const imgEl = document.querySelector("iframe").contentDocument.querySelector(".s_three_columns .o_animate_on_scroll img[data-hover-effect='outline']");
            const src = imgEl.getAttribute("src");
            if (src.startsWith("data:image")) {
                console.error("The image source should not be raw data after the editor save");
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_scrollbar.js  *
*  Lines: 139                                                            *
*************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_scrollbar', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
];

const checkScrollbar = function (hasScrollbar) {
    return {
        content: `Check that the #wrapwrap ${hasScrollbar ? "has" : "does not have"} a vertical scrollbar.`,
        trigger: `iframe ${hasScrollbar ? "body:not(.modal-open)" : "body.modal-open"}`,
        run: function () {
            const wrapwrapEl = this.$anchor[0].querySelector("#wrapwrap");
            const wrapwrapStyle = window.getComputedStyle(wrapwrapEl);
            if (!hasScrollbar && (wrapwrapStyle.overflow !== "hidden" || parseFloat(wrapwrapStyle.paddingRight) < 1)) {
                console.error("error The #wrapwrap vertical scrollbar should be hidden");
            } else if (hasScrollbar && (wrapwrapStyle.overflow === "hidden" || parseFloat(wrapwrapStyle.paddingRight) > 0)) {
                console.error("error The #wrapwrap vertical scrollbar should be displayed");
            }
        },
    };
};

const toggleBackdrop = function () {
    return wTourUtils.changeOption('SnippetPopup', 'we-button[data-name="popup_backdrop_opt"] we-checkbox', 'backdrop');
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_scrollbar", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[0]), // Popup
    checkScrollbar(false),
    {
        content: 'Click on the s_popup snippet',
        in_modal: false,
        trigger: 'iframe .s_popup .modal',
    },
    toggleBackdrop(), // hide Popup backdrop
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop_native iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: "Select the Media List snippet in the Popup.",
        trigger: "iframe #wrap .s_popup .modal-content .s_media_list",
    },
    {
        content: "Remove the Media List snippet in the Popup.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Popup backdrop
    checkScrollbar(false),
    {
        content: "Close the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(true),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:last-child",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Cookies Bar backdrop
    checkScrollbar(false),
    toggleBackdrop(), // hide Cookies Bar backdrop
    checkScrollbar(true),
    {
        content: "Open the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(false),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop_native iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: 'Click on the s_popup snippet',
        in_modal: false,
        trigger: 'iframe .s_popup .modal',
    },
    {
        content: "Remove the s_popup snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Popup') we-button.oe_snippet_remove:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag a Media List snippet and drop it in the Cookies Bar.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop_native iframe #website_cookies_bar .modal-content.oe_structure",
    },
    {
        content: "Select the Media List snippet in the Cookies Bar.",
        trigger: "iframe #website_cookies_bar .modal-content .s_media_list",
    },
    {
        content: "Duplicate the Media List snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Media List') we-button.oe_snippet_clone:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(false),
    {
        content: "Remove the first Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    {
        content: "Remove the second Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
]);

return __exports;
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_display_on_click.js  *
*  Lines: 98                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_display_on_click', ['@website/js/tours/tour_utils', '@web/core/browser/browser'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];
const { browser } = require("@web/core/browser/browser");

wTourUtils.registerWebsitePreviewTour("snippet_popup_display_on_click", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: "s_text_image", name: "Image - Text"}),
    wTourUtils.dragNDrop({id: "s_popup", name: "Popup"}),
    {
        content: "Click inside the popup to access its options menu.",
        in_modal: false,
        trigger: "iframe .s_popup .s_banner",
    },
    wTourUtils.changeOption("SnippetPopup", 'we-select[data-attribute-name="display"] we-toggler'),
    {
        content: "Click on the display 'On Click' option",
        trigger: "#oe_snippets we-button[data-name='onclick_opt']",
        in_modal: false,
        run() {
            // Patch and ignore write on clipboard in tour as we don't have permissions
            const oldWriteText = browser.navigator.clipboard.writeText;
            browser.navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
            this.$anchor[0].click();
            browser.navigator.clipboard.writeText = oldWriteText;
        }
    },
    {
        content: "Check the copied anchor from the notification toast",
        trigger: ".o_notification_manager .o_notification_content",
        run() {
            const notificationContent = this.$anchor[0].innerText;
            const anchor = notificationContent.substring(notificationContent.indexOf("#"));

            if (anchor !== "#Win-%2420") {
                console.error("The popup anchor is not '#Win-%2420' as expected.");
            }
        },
    },
    wTourUtils.clickOnElement("button to close the popup", "iframe .s_popup_close"),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-secondary"),
    {
        content: "Paste the popup anchor in the URL input",
        trigger: "#o_link_dialog_url_input",
        run: "text #Win-%2420"
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-secondary"),
    {
        content: "Verify that the popup opens after clicked the button.",
        in_modal: false,
        trigger: "iframe .s_popup .modal[id='Win-%2420'].show",
    },
    wTourUtils.clickOnElement("button to close the popup", "iframe .s_popup_close"),
    {
        content: "Go to the 'contactus' page.",
        trigger: "iframe a[href='/contactus']",
    },
    {
        content: "wait for the page to be loaded",
        trigger: ".o_website_preview[data-view-xmlid='website.contactus']",
        run: () => null, // it"s a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({id: "s_text_image", name: "Image - Text"}),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-secondary"),
    {
        content: "Add a link to the homepage in the URL input",
        trigger: "#o_link_dialog_url_input",
        run: "text /"
    },
    {
        content: "Open the page anchor selector",
        trigger: ".o_link_dialog_page_anchor .dropdown-toggle",
    },
    {
        content: "Click on the popup anchor to add it after the homepage link in the URL input",
        trigger: ".o_link_dialog_page_anchor we-button:contains('#Win-%2420')",
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-secondary"),
    {
        content: "Verify that the popup opens when the homepage page loads.",
        in_modal: false,
        extra_trigger: ".o_website_preview[data-view-xmlid='website.homepage']",
        trigger: "iframe .s_popup .modal[id='Win-%2420'].show",
        isCheck: true,
    },
]);

return __exports;
});
;

/***********************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_open_on_top.js  *
*  Lines: 50                                                           *
***********************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_open_on_top', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("snippet_popup_open_on_top", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: "s_popup", name: "Popup"}),
    {
        content: "Change content for long text.",
        trigger: "iframe .s_popup p.lead",
        run: 'text ' + ' hello world'.repeat(300),
    },
    {
        content: "Set delay to 0 second",
        trigger: '[data-attribute-name="showAfter"] input',
        run: 'text 0',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: 'Check that the modal is scrolled on top',
        trigger: "iframe .s_popup .modal:contains('hello world')",
        run: function () {
            const modalEl = this.$anchor[0];
            if (modalEl.scrollHeight <= modalEl.clientHeight) {
                console.error('There is no scrollbar on the modal');
            }
            const activeEl = modalEl.ownerDocument.activeElement;
            if (activeEl.parentElement.closest('.modal') !== modalEl) {
                // Note: it might not be the best idea to still focus a button
                // that is not in the viewport, but since this is a niche case
                // this is the behavior right now. The important parts are:
                // in the normal case, focus the button; in all cases, the modal
                // should not be scrolled when opened.
                console.error('The focus should be on an element inside the modal');
            }
            if (modalEl.scrollTop !== 0) {
                console.error('The modal scrollbar is not scrolled at the top');
            }
        },
    },
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/snippet_social_media.js  *
*  Lines: 222                                                     *
******************************************************************/
odoo.define('@website/../tests/tours/snippet_social_media', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

// TODO: Remove following steps once fix of task-3212519 is done.
// Those steps are preventing a race condition to happen in the meantime: when
// the tour was clicking on the toggle to hide facebook in the next step, it
// would actually "ignore" the result of the click on the toggle and would just
// consider the action of focusing out the input.
const socialRaceConditionClass = 'social_media_race_condition';
const preventRaceConditionStep = [{
    content: "Wait a few ms to avoid race condition",
    // Ensure the class is remove from previous call of those steps
    extra_trigger: `body:not(.${socialRaceConditionClass})`,
    trigger: 'iframe .s_social_media',
    run() {
        setTimeout(() => {
            document.body.classList.add(socialRaceConditionClass);
        }, 500);
    }
}, {
    content: "Check the race condition class is added after a few ms",
    trigger: `body.${socialRaceConditionClass}`,
    run() {
        document.body.classList.remove(socialRaceConditionClass);
    }
}];

const replaceIconByImage = function (url) {
    return [{
        content: "Replace the icon by an image",
        trigger: `iframe .s_social_media a[href='${url}'] i.fa`,
        run: "dblclick",
    },
    {
        content: "Go to the Images tab in the media dialog",
        trigger: ".o_select_media_dialog .o_notebook_headers .nav-item a:contains('Images')",
    },
    {
        content: "Select the image",
        trigger: ".o_select_media_dialog img[title='s_banner_default_image.jpg']",
    },
    ...preventRaceConditionStep,
    ];
};

const addNewSocialNetwork = function (optionIndex, linkIndex, url, replaceIcon = false) {
    const replaceIconByImageSteps = replaceIcon ? replaceIconByImage("https://www.example.com") : [];
    return [{
        content: "Click on Add New Social Network",
        trigger: 'we-list we-button.o_we_list_add_optional',
    },
    {
        content: "Ensure new option is found",
        trigger: `we-list table input:eq(${optionIndex})[data-list-position=${optionIndex}][data-dom-position=${linkIndex}][data-undeletable=false]`,
        run: () => {}, // This is a check.
    },
    {
        content: "Ensure new link is found",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='https://www.example.com'])`,
        run: () => {}, // This is a check.
    },
    ...replaceIconByImageSteps,
    {
        content: "Change added Option label",
        trigger: `we-list table input:eq(${optionIndex})`,
        run: `text_blur ${url}`,
    },
    {
        content: "Ensure new link is changed",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='${url}'])`,
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    ];
};

wTourUtils.registerWebsitePreviewTour('snippet_social_media', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: 's_social_media', name: 'Social Media'}),
    wTourUtils.clickOnSnippet({id: 's_social_media', name: 'Social Media'}),
    ...addNewSocialNetwork(7, 7, 'https://www.youtu.be/y7TlnAv6cto'),
    {
        content: 'Click on the toggle to hide Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget',
        run: 'click',
    },
    {
        content: "Ensure twitter became first",
        trigger: 'iframe .s_social_media:has(a:eq(0)[href="/website/social/twitter"])',
        run: () => {}, // This is a check.
    },
    {
        content: 'Drag the facebook link at the end of the list',
        trigger: 'we-list table we-button.o_we_drag_handle',
        position: 'bottom',
        run: "drag_and_drop_native we-list table tr:last-child",
    },
    {
        content: 'Check drop completed',
        trigger: 'we-list table input:eq(7)[data-media="facebook"]',
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    // Create a Link for which we don't have an icon to propose.
    ...addNewSocialNetwork(8, 7, 'https://whatever.it/1EdSw9X'),
    // Create a custom instagram link.
    ...addNewSocialNetwork(9, 8, 'https://instagr.am/odoo.official/'),
    {
        content: "Check if the result is correct before removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='https://www.youtu.be/y7TlnAv6cto']:has(i.fa-youtube))" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    // Create a custom link, not officially supported, ensure icon is found.
    {
        content: 'Change custom social to unsupported link',
        trigger: 'we-list table input:eq(6)',
        run: 'text_blur https://www.paypal.com/abc',
    },
    {
        content: "Ensure paypal icon is found",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(6)[href='https://www.paypal.com/abc']:has(i.fa-paypal))",
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    {
        content: 'Delete the custom link',
        trigger: 'we-list we-button.o_we_select_remove_option',
        run: 'click',
    },
    {
        content: "Ensure custom link was removed",
        trigger: 'iframe .s_social_media:has(a:eq(6)[href="https://whatever.it/1EdSw9X"]:has(i.fa-pencil))',
        run: () => {}, // This is a check.
    },
    {
        content: 'Click on the toggle to show Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget:not(.active)',
        run: 'click',
    },
    {
        content: "Check if the result is correct after removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='/website/social/facebook'])" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    {
        content: 'Change url of the DB instagram link',
        trigger: 'we-list table input:eq(3)',
        run: 'text_blur https://instagram.com/odoo.official/',
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Check if we can still change custom icons",
        trigger: 'iframe .s_social_media a[href="https://whatever.it/1EdSw9X"] i.fa-pencil',
    },
    {
        content: "Click on replace media",
        trigger: "[data-replace-media='true']",
    },
    {
        content: "Select a new icon",
        trigger: '.o_select_media_dialog .fa-heart',
    },
    {
        content: "Check if the result is correct after setting the icon",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='/website/social/facebook'])" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-heart))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        isCheck: true,
    },
    // Create a social network but replace its icon by an image before setting
    // the link (`replaceIcon` parameter set to `true`).
    ...addNewSocialNetwork(9, 9, "https://google.com", true),
    // Create a social network after replacing the first icon by an image.
    ...replaceIconByImage("/website/social/twitter"),
    ...addNewSocialNetwork(10, 10, "https://facebook.com"),
    {
        content: "Check if the result is correct after adding images",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter']:has(img))" +
                 ":has(a:eq(9)[href='https://google.com']:has(img))" +
                 ":has(a:eq(10)[href='https://facebook.com']:has(img))",
        run: () => {}, // This is a check.
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_table_of_content.js  *
*  Lines: 91                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_table_of_content', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const scrollToHeading = function (position) {
    return {
        content: `Scroll to h2 number ${position}`,
        trigger: `iframe h2:eq(${position})`,
        run: function () {
            this.$anchor[0].scrollIntoView(true);
        },
    };
};
const checkTOCNavBar = function (tocPosition, activeHeaderPosition) {
    return {
        content: `Check that the header ${activeHeaderPosition} is active for TOC ${tocPosition}`,
        trigger: `iframe .s_table_of_content:eq(${tocPosition}) .table_of_content_link:eq(${activeHeaderPosition}).active `,
        run: () => {}, // This is a check.
    };
};

wTourUtils.registerWebsitePreviewTour('snippet_table_of_content', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    // To make sure that the public widgets of the two previous ones started.
    wTourUtils.dragNDrop({id: 's_banner', name: 'Banner'}),
    ...wTourUtils.clickOnSave(),
    checkTOCNavBar(0, 0),
    checkTOCNavBar(1, 0),
    scrollToHeading(1),
    checkTOCNavBar(0, 1),
    checkTOCNavBar(1, 0),
    scrollToHeading(2),
    checkTOCNavBar(1, 0),
    scrollToHeading(3),
    checkTOCNavBar(1, 1),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the first TOC's title",
        trigger: 'iframe .s_table_of_content:eq(0) h2',
    },
    {
        content: "Hide the first TOC on mobile",
        trigger: '[data-toggle-device-visibility="no_mobile"]',
    },
    // Go back to blocks tabs to avoid changing the first ToC options
    wTourUtils.goBackToBlocks(),
    {
        content: "Click on the second TOC's title",
        trigger: 'iframe .s_table_of_content:eq(1) h2',
    },
    {
        content: "Hide the second TOC on desktop",
        trigger: '[data-toggle-device-visibility="no_desktop"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that we have the good TOC on desktop",
        trigger: 'iframe .s_table_of_content.o_snippet_mobile_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_desktop_invisible'))
                    .is(':visible')) {
                console.error('The mobile TOC should not be visible on desktop');
            }
        },
    },
    {
        content: "Toggle the mobile view",
        trigger: '.o_mobile_preview > a',
    },
    {
        content: "Check that we have the good TOC on mobile",
        trigger: 'iframe .s_table_of_content.o_snippet_desktop_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_mobile_invisible'))
                    .is(':visible')) {
                console.error('The desktop TOC should not be visible on mobile');
            }
        },
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/snippet_tabs.js  *
*  Lines: 87                                              *
**********************************************************/
odoo.define('@website/../tests/tours/snippet_tabs', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("snippet_tabs", {
    edition: true,
    url: "/",
}, () => [
    wTourUtils.dragNDrop({
        id: "s_tabs",
        name: "Tabs",
    }),
    {
        content: "Double click on the first tab link to select all the text",
        trigger: "iframe .s_tabs .nav-link.active",
        run: "dblclick",
    },
    {
        content: "Change the text of the tab link",
        trigger: "iframe .s_tabs .nav-link.active",
        run() {
            this.$anchor[0].dispatchEvent(new InputEvent("input", {
                inputType: "insertText",
                bubbles: true,
                data: "Tab #1"
            }));
        },
    },
    {
        content: "Check that the first tab link is still there and has the new text",
        trigger: "iframe .s_tabs .nav-link.active:contains('Tab #1')",
    },
    {
        content: "Double click on the third tab link to select all the text",
        trigger: "iframe .s_tabs .nav-item:nth-of-type(3) .nav-link:not('.active')",
        run: "dblclick",
    },
    {
        content: "Remove the text of the tab link and add a new text",
        trigger: "iframe .s_tabs .nav-item:nth-of-type(3) .nav-link.active:not(:contains('Tab #1'))",
        run() {
            this.$anchor[0].dispatchEvent(new KeyboardEvent("keydown", {
                key: "Backspace",
                bubbles: true
            }));
            this.$anchor[0].dispatchEvent(new InputEvent("input", {
                inputType: "insertText",
                bubbles: true,
                data: "Tab #3"
            }));
        },
    },
    {
        content: "Check that the third tab link is still there and has the new text",
        trigger: "iframe .s_tabs .nav-item:nth-of-type(3) .nav-link.active:contains('Tab #3')",
    },
    wTourUtils.changeOption("NavTabs", "we-button[data-remove-item]"),
    {
        content: "Check that only 2 tab panes remain",
        trigger: "iframe .s_tabs .s_tabs_content",
        run() {
            if (this.$anchor[0].querySelectorAll(".tab-pane").length !== 2) {
                console.error("There should be exactly 2 tab panes in the DOM.");
            }
        },
    },
    {
        content: "Check that the first tab link is active",
        trigger: "iframe .s_tabs .nav-item:nth-of-type(1) .nav-link.active",
    },
    wTourUtils.changeOption("NavTabs", "we-button[data-add-item]"),
    {
        content: "Check there are 3 tab panes",
        trigger: "iframe .s_tabs .s_tabs_content",
        run() {
            if (this.$anchor[0].querySelectorAll(".tab-pane").length !== 3) {
                console.error("There should be exactly 3 tab panes in the DOM.");
            }
        },
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_translation.js  *
*  Lines: 56                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_translation', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_translation', {
    url: '/',
    edition: true,
    test: true,
}, () => [
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
    {
        content: "Check that the save button contains 'in fu_GB'",
        trigger: '.btn[data-action="save"]:contains("Save in fu_GB")',
        run: () => null, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('snippet_translation_changing_lang', {
    url: '/',
    test: true,
}, () => [
    {
        content: "Change language to Parseltongue",
        trigger: 'iframe .js_language_selector .btn',
    },
    {
        content: "Change the language to English",
        trigger: 'iframe .js_language_selector .js_change_lang[data-url_code="en"]',
    },
    {
        content: "Enable translation",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/snippet_version.js  *
*  Lines: 67                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/snippet_version', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("snippet_version", {
    edition: true,
    url: "/",
    test: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_test_snip',
        name: 'Test snip',
    }),
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
    content: "Test t-snippet and t-snippet-call: snippets have data-snippet set",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet',
    run: function () {
        // Tests done here as all these are not visible on the page
        const draggableSnippets = [...document.querySelectorAll('#oe_snippets .o_panel_body > .oe_snippet:not([data-module-id]) > :nth-child(2)')];
        if (draggableSnippets.length && !draggableSnippets.every(el => el.dataset.snippet)) {
            console.error("error Some t-snippet are missing their template name or there are no snippets to drop");
        }
        if (!document.querySelector('#oe_snippets [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error s_share t-called inside s_test_snip is missing template name");
        }
        if (!document.querySelector('iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('#wrap [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error Dropped a s_test_snip snippet but missing s_share template name in it");
        }
    },
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "Modify the version of snippets",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet',
    run: function () {
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_test_snip"]').dataset.vjs = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_share"]').dataset.vcss = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_text_image"]').dataset.vxml = '999';
    },
}, {
    content: "Edit s_test_snip",
    trigger: 'iframe #wrap.o_editable .s_test_snip',
}, {
    content: "Edit text_image",
    extra_trigger: 'we-customizeblock-options:contains(Test snip) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe #wrap.o_editable .s_text_image',
}, {
    content: "Edit s_share",
    extra_trigger: 'we-customizeblock-options:contains(Text - Image) .snippet-option-VersionControl  > we-alert',
    trigger: 'iframe #wrap.o_editable .s_share',
}, {
    content: "s_share is outdated",
    extra_trigger: 'we-customizeblock-options:contains(Share) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe body',
    isCheck: true,
}]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippets_all_drag_and_drop.js  *
*  Lines: 143                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippets_all_drag_and_drop', ['@website/js/tours/tour_utils', '@web/core/utils/patch', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const websiteTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];
const { patch } = require("@web/core/utils/patch");

const patchWysiwygAdapter = () => {
    const { WysiwygAdapterComponent } = odoo.loader.modules.get("@website/components/wysiwyg_adapter/wysiwyg_adapter");
    return patch(WysiwygAdapterComponent.prototype, {
        _trigger_up(ev) {
            super._trigger_up(...arguments);
            if (ev.name === 'snippet_removed') {
                $('body').attr('test-dd-snippet-removed', true);
            }
        }
    });
};

let unpatchWysiwygAdapter = null;

const { registry } = require("@web/core/registry");

let snippetsNames = (new URL(document.location.href)).searchParams.get('snippets_names') || '';
// When this test is loaded in the backend, the search params aren't as easy to
// read as before. Little trickery to make this test run.
const searchParams = new URLSearchParams(window.location.href.split('#')[1]).get('path');
if (searchParams) {
    snippetsNames = new URLSearchParams(searchParams.split('/')[1]).get('snippets_names') || '';
    snippetsNames = snippetsNames.split(',');
}
const dropInOnlySnippets = {
    's_button': '.btn',
    's_image': '.img',
    's_video': '.media_iframe_video',
};
let steps = [];
let n = 0;
for (const snippet of snippetsNames) {
    n++;
    const isModal = ['s_popup', 's_newsletter_subscribe_popup'].includes(snippet);
    const isDropInOnlySnippet = Object.keys(dropInOnlySnippets).includes(snippet);
    const snippetSteps = [{
        content: `Drop ${snippet} snippet [${n}/${snippetsNames.length}]`,
        trigger: `#oe_snippets .oe_snippet:has( > [data-snippet='${snippet}']) .oe_snippet_thumbnail`,
        run: "drag_and_drop_native iframe #wrap",
    }, {
        content: `Edit ${snippet} snippet`,
        trigger: `iframe #wrap.o_editable [data-snippet='${snippet}']${isModal ? ' .modal.show' : ''}`,
    }, {
        content: `check ${snippet} setting are loaded, wait panel is visible`,
        trigger: ".o_we_customize_panel",
        run: function () {}, // it's a check
    }, {
        content: `Remove the ${snippet} snippet`, // Avoid bad perf if many snippets
        trigger: "we-button.oe_snippet_remove:last"
    }, {
        content: `click on 'BLOCKS' tab (${snippet})`,
        extra_trigger: 'body[test-dd-snippet-removed]',
        trigger: ".o_we_add_snippet_btn",
        run: function (actions) {
            $('body').removeAttr('test-dd-snippet-removed');
            actions.auto();
        },
    }];

    if (snippet === 's_google_map') {
        snippetSteps.splice(1, 3, {
            content: 'Close API Key popup',
            trigger: "iframe .modal-footer .btn-secondary",
        });
    } else if (isModal) {
        snippetSteps[2]['in_modal'] = false;
        snippetSteps.splice(3, 2, {
            content: `Hide the ${snippet} popup`,
            trigger: `iframe [data-snippet='${snippet}'] .s_popup_close`,
        }, {
            content: `Make sure ${snippet} is hidden`,
            trigger: "iframe body:not(.modal-open)",
        });
    } else if (isDropInOnlySnippet) {
        // The 'drop in only' snippets have their 'data-snippet' attribute
        // removed once they are dropped, so we need to use a different selector.
        snippetSteps[1]['trigger'] = `iframe #wrap.o_editable ${dropInOnlySnippets[snippet]}`;
    }
    steps = steps.concat(snippetSteps);
}

registry.category("web_tour.tours").add("snippets_all_drag_and_drop", {
    test: true,
    // To run the tour locally, you need to insert the URL sent by the python
    // tour here. There is currently an issue with tours which don't have an URL
    // url: '/?enable_editor=1&snippets_names=s_showcase,s_numbers,s_...',
    steps: () => [
    ...websiteTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Ensure snippets are actually passed at the test.",
        trigger: "body",
        run: function () {
            // safety check, otherwise the test might "break" one day and
            // receive no steps. The test would then not test anything anymore
            // without us noticing it.
            if (steps.length < 220) {
                console.error(`This test is not behaving as it should, got only ${steps.length} steps.`);
            }
            unpatchWysiwygAdapter = patchWysiwygAdapter();
        },
    },
    // This first step is needed as it will be used later for inner snippets
    // Without this, it will dropped inside the footer and will need an extra
    // selector.
    websiteTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image"
    }),
    {
        content: "Edit s_text_image snippet",
        trigger: "iframe #wrap.o_editable [data-snippet='s_text_image']"
    },
    {
        content: "check setting are loaded, wait panel is visible",
        trigger: ".o_we_customize_panel"
    },
    // We hide the header before starting to drop snippets. This prevents
    // situations where the header's drop zones overlap with those of the #wrap,
    // ensuring that a snippet is dropped in the #wrap as expected instead of
    // the header.
    websiteTourUtils.clickOnSnippet({id: "o_header_standard", name: "Header"}),
    websiteTourUtils.changeOption("TopMenuVisibility", "we-select:has([data-visibility]) we-toggler"),
    websiteTourUtils.changeOption("TopMenuVisibility", 'we-button[data-visibility="hidden"]'),
    websiteTourUtils.goBackToBlocks(),
].concat(steps).concat([
    {
        content: "Remove wysiwyg patch",
        trigger: "body",
        run: () => unpatchWysiwygAdapter(),
    }
]),
});

return __exports;
});
;

/*********************************************************************
*  Filepath: /website/static/tests/tours/specific_website_editor.js  *
*  Lines: 33                                                         *
*********************************************************************/
odoo.define('@website/../tests/tours/specific_website_editor', ['@web/core/registry', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("generic_website_editor", {
    test: true,
    edition: true,
}, () => [{
    trigger: 'iframe body:not([data-hello="world"])',
    content: 'Check that the editor DOM matches its website-generic features',
    run: function () {}, // Simple check
}]);

// Good practice would have been to use `wTourUtils.registerWebsitePreviewTour`
// for this tour with `edition: true` and remove the first step to enter edit
// mode. Unfortunately this breaks the page and therefore the test fails for
// unknown reason.
registry.category("web_tour.tours").add('specific_website_editor', {
    test: true,
    steps: () => [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    trigger: 'iframe body[data-hello="world"]',
    content: 'Check that the editor DOM matches its website-specific features',
    run: function () {}, // Simple check
}]});

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/start_cloned_snippet.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/start_cloned_snippet', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('website_start_cloned_snippet', {
    edition: true,
    test: true,
    url: '/',
}, () => {
    const countdownSnippet = {
        name: 'Countdown',
        id: 's_countdown',
    };
    const dragNDropOutOfFooter = wTourUtils.dragNDrop(countdownSnippet);
    dragNDropOutOfFooter.run = 'drag_and_drop_native iframe #wrapwrap #wrap';
    return [
        dragNDropOutOfFooter,
        wTourUtils.clickOnSnippet(countdownSnippet),
        {
            content: 'Click on clone snippet',
            trigger: '.oe_snippet_clone',
        },
        {
            content: 'Check that the cloned snippet has a canvas and that something has been drawn inside of it',
            trigger: 'iframe .s_countdown:eq(1) canvas',
            run: function () {
                // Check that at least one bit has been drawn in the canvas
                if (!this.$anchor[0].getContext('2d').getImageData(0, 0, 1000, 1000).data.includes(1)) {
                    console.error('The cloned snippet should have been started');
                }
            },
        },
        
    ]
});

return __exports;
});
;

/************************************************************
*  Filepath: /website/static/tests/tours/test_css_error.js  *
*  Lines: 25                                                *
************************************************************/
odoo.define('@website/../tests/tours/test_css_error', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('css_error_tour_frontend', {
    test: true,
    url: '/',
    steps: () => [
    {
        content: "Error message",
        trigger: ".o_notification.border-danger",
        run: () => {
            const title = document.body.querySelector(".o_notification .o_notification_title").innerText;
            if (!title.includes("Style error")) {
                throw new Error("should contain a Style error notification");
            }
        },
    },
]});

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/text_animations.js  *
*  Lines: 60                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/text_animations', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("text_animations", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_cover",
        name: "Cover",
    }),
    {
        content: "Click on the snippet title",
        trigger: "iframe .s_cover h1",
        run: "dblclick", // Make sure the title is selected.
    },
    {
        content: "Click on the 'Animate Text' button to activate the option",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover h1 span.o_animated_text",
        isCheck: true,
    },
    {
        content: "Click on the 'Animate Text' button",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was disabled for the title",
        trigger: "iframe .s_cover:not(:has(.o_animated_text))",
        isCheck: true,
    },
    {
        content: "Open the text background color colorpicker",
        trigger: "button#oe-fore-color",
    },
    {
        content: "Add a background color on the selected text",
        trigger: ".o_colorpicker_section [data-color='black']",
    },
    {
        content: "Try to apply the text animation again",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied and that the <font> element is inside the o_animated_text element",
        trigger: "iframe .s_cover:has(span.o_animated_text > font.bg-black)",
        isCheck: true,
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/text_highlights.js  *
*  Lines: 92                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/text_highlights', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("text_highlights", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_cover",
        name: "Cover",
    }),
    {
        content: "Select the snippet title",
        trigger: "iframe .s_cover h1",
        run: "dblclick",
    },
    {
        content: "Click on the 'Highlight Effects' button to activate the option",
        trigger: "div.o_we_text_highlight",
    },
    {
        content: "Check that the highlight was applied",
        trigger: "iframe .s_cover h1 span.o_text_highlight > .o_text_highlight_item > svg:has(.o_text_highlight_path_underline)",
        isCheck: true,
    },
    {
        content: "Check that the highlights grid was displayed",
        trigger: "we-select[data-name=text_highlight_opt] we-toggler.active",
        isCheck: true,
    },
    {
        content: "Disable the highlight effect",
        trigger: "div.o_we_text_highlight",
    },
    {
        content: "Check that the highlight was disabled for the title",
        trigger: "iframe .s_cover:not(:has(.o_text_highlight))",
        isCheck: true,
    },
    {
        // On muti-line text, the highlight effect is added on every detected
        // line (using the `.o_text_highlight_item` span).
        content: "Update and select the snippet paragraph content",
        trigger: "iframe .s_cover p",
        run() {
            const iframeDOC = document.querySelector(".o_iframe").contentDocument;
            const firstLine = document.createElement("strong");
            firstLine.textContent = "Text content line A";
            const secondLine = document.createElement("i");
            secondLine.textContent = "Text content line B";
            this.$anchor[0].replaceChildren(firstLine, document.createElement("br"), secondLine);
            // Select the whole content.            
            const range = iframeDOC.createRange();
            const selection = iframeDOC.getSelection();
            range.selectNodeContents(this.$anchor[0]);
            selection.removeAllRanges();
            selection.addRange(range);
        },
    },
    {
        content: "Add the highlight effect on the muti-line text",
        trigger: "div.o_we_text_highlight",
    },
    {
        content: "Check if the text was correctly updated",
        trigger: "iframe .s_cover span.o_text_highlight:has(.o_text_highlight_item:has(.o_text_highlight_path_underline) + br + .o_text_highlight_item:has(.o_text_highlight_path_underline))",
        isCheck: true,
    },
    ...wTourUtils.selectElementInWeSelectWidget("text_highlight_opt", "Jagged").slice(1), // The select is already opened
    {
        content: "When changing the text highlight, we only replace the highlight SVG with a new drawn one",
        trigger: "iframe .s_cover span.o_text_highlight:has(.o_text_highlight_item:has(.o_text_highlight_path_jagged) + br + .o_text_highlight_item:has(.o_text_highlight_path_jagged))",
        isCheck: true,
    },
    {
        content: "Disable the highlight effect",
        trigger: "div.o_we_text_highlight",
    },
    {
        content: "Check if the original DOM structure was restored",
        trigger: "iframe .s_cover p:has(strong:contains(Text content line A) + br + i:contains(Text content line B))",
        isCheck: true,
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/translate_menu_name.js  *
*  Lines: 31                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/translate_menu_name', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('translate_menu_name', {
    url: '/pa_GB',
    test: true,
    edition: false,
}, () => [
    {
        content: "activate translate mode",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "translate the menu entry",
        trigger: 'iframe a[href="/englishURL"] span',
        run: 'text value pa-GB',
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/translate_text_options.js  *
*  Lines: 111                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/translate_text_options', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const selectText = (selector) => {
    return {
        content: "Select some text content",
        trigger: `iframe ${selector}`,
        run() {
            const iframeDOC = document.querySelector(".o_iframe").contentDocument;
            const range = iframeDOC.createRange();
            const selection = iframeDOC.getSelection();
            range.selectNodeContents(this.$anchor[0]);
            selection.removeAllRanges();
            selection.addRange(range);
            this.$anchor[0].click();
        },
    };
};

wTourUtils.registerWebsitePreviewTour(
    "translate_text_options",
    {
        url: "/",
        test: true,
        edition: true,
    },
    () => [
        wTourUtils.dragNDrop({
            id: "s_text_block",
            name: "Text",
        }),
        {
            content: "Select the first text block in the snippet",
            trigger: "iframe #wrap .s_text_block p:first",
            run: "dblclick",
        },
        {
            content: "Click on the 'Animate Text' button to activate the option",
            trigger: "div.o_we_animate_text",
        },
        {
            content: "Select the second text block in the snippet",
            trigger: "iframe #wrap .s_text_block p:last",
            run: "dblclick",
        },
        {
            content: "Click on the 'Highlight Effects' button to activate the option",
            trigger: "div.o_we_text_highlight",
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "Change the language to French",
            trigger: 'iframe .js_language_selector .js_change_lang[data-url_code="fr"]',
        },
        {
            content: "Enable translation",
            trigger: ".o_translate_website_container a",
        },
        {
            content: "Close the dialog",
            trigger: ".modal-footer .btn-secondary",
        },
        // Select the highlighted text content.
        selectText("#wrap .s_text_block p:last .o_text_highlight"),
        {
            content: "Check that the highlight options were displayed",
            trigger: "#toolbar we-select[data-name=text_highlight_opt]",
            isCheck: true,
        },
        ...wTourUtils.selectElementInWeSelectWidget("text_highlight_opt", "Jagged"),
        // Select the animated text content.
        selectText("#wrap .s_text_block p:first .o_animated_text"),
        {
            content:
                "Check that the animation options are displayed and highlight options are no longer visible",
            trigger:
                "#toolbar:not(:has(.snippet-option-TextHighlight)) .snippet-option-WebsiteAnimate",
            isCheck: true,
        },
        // Select a text content without any option.
        selectText("footer .s_text_block p:first span"),
        {
            content: "Check that all text options are removed",
            trigger:
                "#toolbar:not(:has(.snippet-option-TextHighlight, .snippet-option-WebsiteAnimate))",
            isCheck: true,
        },
        // Select the highlighted text content again.
        selectText("#wrap .s_text_block p:last .o_text_highlight"),
        {
            content: "Check that only the highlight options are displayed",
            trigger:
                "#toolbar:not(:has(.snippet-option-WebsiteAnimate)) .snippet-option-TextHighlight",
            isCheck: true,
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "Check that the highlight effect was correctly translated",
            trigger:
                "iframe .s_text_block .o_text_highlight:has(.o_text_highlight_item:has(.o_text_highlight_path_jagged))",
            isCheck: true,
        },
    ]
);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/unsplash_beacon.js  *
*  Lines: 19                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/unsplash_beacon', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("test_unsplash_beacon", {
    test: true,
    url: "/",
    steps: () => [{
        content: "Verify whether beacon was sent.",
        trigger: 'img[data-beacon="sent"]',
        isCheck: true,
    }],
});

return __exports;
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/website_backend_menus_redirect.js  *
*  Lines: 36                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/website_backend_menus_redirect', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_backend_menus_redirect', {
    test: true,
    url: '/',
    steps: () => [
{
    content: 'Need at least a step so the tour is not failing in enterprise',
    trigger: 'body',
    edition: 'enterprise',
}, {
    content: 'Make frontend to backend menus appears',
    trigger: 'body:has(#wrap)',
    run: function () {
        // The dropdown is hidden behind an SVG on hover animation.
        this.$anchor.find('.o_frontend_to_backend_apps_menu').addClass('show');
    },
    edition: 'community',
}, {
    content: 'Click on Test Root backend menu',
    trigger: '.o_frontend_to_backend_apps_menu a:contains("Test Root")',
    edition: 'community',
}, {
    content: 'Check that we landed on the apps page (Apps), and not the Home Action page (Settings)',
    trigger: '.oe_module_vignette',
    edition: 'community',
}
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_click_tests.js  *
*  Lines: 38                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_click_tests', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const cover = {
    id: 's_cover',
    name: 'Cover',
};

wTourUtils.registerWebsitePreviewTour('website_click_tour', {
    test: true,
    url: '/',
}, () => [
    {
        content: "trigger a page navigation",
        trigger: 'iframe a[href="/contactus"]',
    },
    {
        content: "wait for the page to be loaded",
        trigger: '.o_website_preview[data-view-xmlid="website.contactus"]',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "click on a link that would trigger navigation",
        trigger: 'iframe a[href="/"]',
    },
    wTourUtils.goBackToBlocks(),
    wTourUtils.dragNDrop(cover),
    wTourUtils.clickOnSnippet(cover),
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor.js  *
*  Lines: 1021                                                   *
*****************************************************************/
odoo.define('@website/../tests/tours/website_form_editor', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

    // Visibility possible values:
    const VISIBLE = 'Always Visible';
    const HIDDEN = 'Hidden';
    const CONDITIONALVISIBILITY = 'Visible only if';

    const NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM = 2;
    const ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM = [
        {
            name: 'email_from',
            value: 'admin@odoo.com',
        },
        {
            name: 'subject',
            value: 'Hello, world!',
        }
    ];
    const essentialFieldsForDefaultFormFillInSteps = [];
    for (const data of ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM) {
        essentialFieldsForDefaultFormFillInSteps.push({
            content: "Enter data in model-required field",
            trigger: `iframe .s_website_form_model_required .s_website_form_input[name="${data.name}"]`,
            run: `text ${data.value}`,
        });
    }

    // TODO: in master only keep the conversion of the double quotes character.
    // Replace all `"` character by `&quot;`, all `'` character by `&apos;` and
    // all "`" character by `&lsquo;`.
    const getQuotesEncodedName = function (name) {
            return name.replaceAll(/"/g, character => `&quot;`)
                       .replaceAll(/'/g, character => `&apos;`)
                       .replaceAll(/`/g, character => `&lsquo;`)
                       .replaceAll("\\", character => `&bsol;`);
    };

    const triggerFieldByLabel = (label) => {
        return `.s_website_form_field.s_website_form_custom:has(label:contains("${label}"))`;
    };
    const selectFieldByLabel = (label) => {
        return [{
            content: `Select field "${label}"`,
            trigger: "iframe " + triggerFieldByLabel(label),
        }];
    };
    const selectButtonByText = function (text) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button:contains("${text}")) we-toggler`,
        },
        {
            content: "Click on the option",
            trigger: `we-select we-button:contains("${text}")`,
        }];
    };
    const selectButtonByData = function (data) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button[${data}]) we-toggler`,
        }, {
            content: "Click on the option",
            trigger: `we-select we-button[${data}]`,
        }];
    };
    const addField = function (name, type, label, required, isCustom,
                               display = {visibility: VISIBLE, condition: ""}) {
        const data = isCustom ? `data-custom-field="${name}"` : `data-existing-field="${name}"`;
        const ret = [{
            content: "Select form",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        }, {
            content: "Add field",
            trigger: 'we-button[data-add-field]',
        },
        ...selectButtonByData(data),
        {
            content: "Wait for field to load",
            trigger: `iframe .s_website_form_field[data-type="${name}"], .s_website_form_input[name="${name}"]`, //custom or existing field
            run: function () {},
        },
        ...selectButtonByText(display.visibility),
    ];
        let testText = 'iframe .s_website_form_field';
        if (display.condition) {
            ret.push({
                content: "Set the visibility condition",
                trigger: 'we-input[data-attribute-name="visibilityCondition"] input',
                run: `text ${display.condition}`,
            });
        }
        if (required) {
            testText += '.s_website_form_required';
            ret.push({
                content: "Mark the field as required",
                trigger: 'we-button[data-name="required_opt"] we-checkbox',
            });
        }
        if (label) {
            testText += `:has(label:contains(${label}))`;
            ret.push({
                content: "Change the label text",
                trigger: 'we-input[data-set-label-text] input',
                run: `text ${label}`,
            });
        }
        if (type !== 'checkbox' && type !== 'radio' && type !== 'select') {
            let inputType = type === 'textarea' ? type : `input[type="${type}"]`;
            const nameAttribute = isCustom && label ? getQuotesEncodedName(label) : name;
            testText += `:has(${inputType}[name="${nameAttribute}"]${required ? "[required]" : ""})`;
            // Because 'testText' will be used as selector to verify the content
            // of the label, the `\` character needs to be escaped.
            testText = testText.replaceAll("\\", "\\\\");
        }
        ret.push({
            content: "Check the resulting field",
            trigger: testText,
            run: function () {},
        });
        return ret;
    };
    const addCustomField = function (name, type, label, required, display) {
        return addField(name, type, label, required, true, display);
    };
    const addExistingField = function (name, type, label, required, display) {
        return addField(name, type, label, required, false, display);
    };

    wTourUtils.registerWebsitePreviewTour("website_form_editor_tour", {
        url: '/',
        edition: true,
        test: true,
    }, () => [
        // Drop a form builder snippet and configure it
        {
            content: "Drop the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop_native iframe #wrap',
        }, {
            content: "Select form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        },
        wTourUtils.goBackToBlocks(),
        {
            content: "Select form by clicking on a text area",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form textarea',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Rename the field label",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Renamed",
        }, {
            content: "Leave the rename options",
            trigger: 'we-input[data-set-label-text] input',
            run: "text_blur",
        },
        wTourUtils.goBackToBlocks(),
        {
            content: "Select form itself (not a specific field)",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        },
        ...selectButtonByText('Send an E-mail'),
        {
            content: "Form has a model name",
            trigger: 'iframe section.s_website_form form[data-model_name="mail.mail"]',
        }, {
            content: 'Edit the Phone Number field',
            trigger: 'iframe input[name="phone"]',
        }, {
            content: 'Change the label position of the phone field',
            trigger: 'we-button[data-select-label-position="right"]',
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 1", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 2", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='Conditional Visibility Check 1'"),
        ...addCustomField("char", "text", "Conditional Visibility Check 2", false),
        ...selectFieldByLabel("Conditional Visibility Check 1"),
        ...selectButtonByData("data-set-visibility='conditional'"),
        {
            content: "Check that 'Conditional Visibility Check 2' is not in the list of the visibility selector of Conditional Visibility Check 1",
            trigger: "we-select[data-name='hidden_condition_opt']:not(:has(we-button[data-set-visibility-dependency='Conditional Visibility Check 2']))",
            run: () => null,
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 3", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 4", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='Conditional Visibility Check 3'"),
        {
            content: "Change the label of 'Conditional Visibility Check 4' and change it to 'Conditional Visibility Check 3'",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Conditional Visibility Check 3",
        },
        {
            content: "Check that the conditional visibility of the renamed field is removed",
            trigger: "we-customizeblock-option.snippet-option-WebsiteFieldEditor we-select:contains('Visibility'):has(we-toggler:contains('Always Visible'))",
            run: () => null,
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 5", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 6", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        {
            content: "Change the label of 'Conditional Visibility Check 6' and change it to 'Conditional Visibility Check 5'",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Conditional Visibility Check 5",
        },
        {
            content: "Check that 'Conditional Visibility Check 5' is not in the list of the renamed field",
            trigger: "we-customizeblock-option.snippet-option-WebsiteFieldEditor we-select[data-name='hidden_condition_opt']:not(:has(we-button:contains('Conditional Visibility Check 5')))",
            run: () => null,
        },
        ...addExistingField('email_cc', 'text', 'Test conditional visibility', false, {visibility: CONDITIONALVISIBILITY, condition: 'odoo'}),
        {
            content: "Ensure that the description has correctly been added on the field",
            trigger: "iframe .s_website_form_field:contains('Test conditional visibility') .s_website_form_field_description",
            isCheck: true,
        },
        // Check that visibility condition is deleted on dependency type change.
        ...addCustomField("char", "text", "dependent", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("selection", "radio", "dependency", false),
        ...selectFieldByLabel("dependent"),
        ...selectButtonByData('data-set-visibility-dependency="dependency"'),
        ...selectFieldByLabel("dependency"),
        ...selectButtonByData('data-custom-field="char"'),
        ...selectFieldByLabel("dependent"),
        {
            content: "Open the select",
            trigger: 'we-select:has(we-button[data-set-visibility="visible"]) we-toggler',
        },
        {
            content: "Check that the field no longer has conditional visibility",
            trigger: "we-select we-button[data-set-visibility='visible'].active",
            isCheck: true,
        },

        ...addExistingField('date', 'text', 'Test Date', true),

        ...addExistingField('record_name', 'text', 'Awesome Label', false, {visibility: HIDDEN}),

        ...addExistingField('body_html', 'textarea', 'Your Message', true),

        ...addExistingField('recipient_ids', 'checkbox'),

        ...addCustomField('one2many', 'checkbox', 'Products', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Iphone',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Galaxy S',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Xperia',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change added Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Wiko Stairway',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='horizontal'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        ...selectButtonByData('data-multi-checkbox-display="vertical"'),
        {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='vertical'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        // Check conditional visibility for the relational fields
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='recipient_ids'"),
        ...selectButtonByText("Is not equal to"),
        ...selectButtonByText("Mitchell Admin"),
        ...wTourUtils.clickOnSave(),
        {
            content: "Check 'products' field is visible.",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("Products")}:visible)`,
            isCheck: true,
        }, {
            content: "choose the option 'Mitchell Admin' of partner.",
            trigger: "iframe .checkbox:has(label:contains('Mitchell Admin')) input[type='checkbox']",
        }, {
            content: "Check 'products' field is not visible.",
            trigger: "iframe .s_website_form" +`:has(${triggerFieldByLabel("Products")}:not(:visible))`,
            isCheck: true,
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),

        ...addCustomField('selection', 'radio', 'Service', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text After-sales Service',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Invoicing Service',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Development Service',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Management Service',
        }, {
            content: "Mark the field as not required",
            trigger: 'we-button[data-name="required_opt"] we-checkbox',
            run: function () {
                // We need this 'setTimeout' to ensure that the 'blur' event of
                // the input has enough time to be executed. Without it, the
                // click on the 'we-checkbox' takes priority, and the 'blur'
                // event is not executed (see the '_onListItemBlurInput'
                // function of the 'we-list' widget)."
                setTimeout(() => {
                    this.$anchor[0].click();
                }, 500);
            },
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom:not(.s_website_form_required)" +
                        ":has(.radio:has(label:contains('After-sales Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Invoicing Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Development Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Management Service')):has(input[type='radio']:not([required])))",
            run: function () {},
        },

        ...addCustomField('many2one', 'select', 'State', true),

        // Customize custom selection field
        {
            content: "Change Option 1 Label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Germany',
        }, {
            content: "Change Option 2 Label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Belgium',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text France',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Canada',
        }, {
            content: "Remove Germany Option",
            trigger: '.o_we_select_remove_option:eq(0)',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last option label with a number",
            trigger: 'we-list table input:eq(3)',
            run: 'text 44 - UK',
        }, {
            content: "Check that the input value is the full option value",
            trigger: 'we-list table input:eq(3)',
            run: () => {
                // We need this 'setTimeout' to ensure that the 'input' event of
                // the input has enough time to be executed (see the
                // '_onListItemBlurInput' function of the 'we-list' widget).
                setTimeout(() => {
                    const addedOptionEl = document.querySelector('iframe.o_iframe').contentDocument.querySelector('.s_website_form_field select option[value="44 - UK"]');
                    if (!addedOptionEl) {
                        console.error('The number option was not correctly added');
                    }
                }, 500);
            },
        }, {
            content: "Check the resulting snippet",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(label:contains('State'))" +
                        ":has(select[required]:hidden)" +
                        ":has(.s_website_form_select_item:contains('Belgium'))" +
                        ":has(.s_website_form_select_item:contains('France'))" +
                        ":has(.s_website_form_select_item:contains('Canada'))" +
                        ":has(.s_website_form_select_item:contains('44 - UK'))" +
                        ":not(:has(.s_website_form_select_item:contains('Germany')))",
            run: function () {},
        },

        ...addExistingField('attachment_ids', 'file', 'Invoice Scan'),

        {
            content: "Insure the history step of the editor is not checking for unbreakable",
            trigger: 'iframe #wrapwrap',
            run: () => {
                const wysiwyg = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrapwrap').data('wysiwyg');
                wysiwyg.odooEditor.historyStep(true);
            },
        },
        // Edit the submit button using linkDialog.
        {
            content: "Click submit button to show edit popover",
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Click on Edit Link in Popover",
            trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
        }, {
            content: "Check that no URL field is suggested",
            trigger: '.oe-toolbar:not(.oe-floating):has(#url_row:hidden)',
            run: () => null,
        }, {
            content: "Change button's style",
            trigger: '.dropdown:has([name="link_style_color"]) > button',
            run: () => {
                $('.dropdown:has([name="link_style_color"]) > button').click();
                $('[data-value="secondary"]').click();
                $('.dropdown:has([name="link_style_shape"]) > button').click();
                $('[data-value="rounded-circle"]').click();
                $('.dropdown:has([name="link_style_size"]) > button').click();
                $('[data-value="sm"]').click();
            },
        }, {
            content: "Check the resulting button",
            trigger: 'iframe .s_website_form_send.btn.btn-sm.btn-secondary.rounded-circle',
            run: () => null,
        },
        // Add a default value to a auto-fillable field.
        {
            content: 'Select the name field',
            trigger: 'iframe .s_website_form_field:eq(0)',
        }, {
            content: 'Set a default value to the name field',
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text John Smith',
        },

        // Add two fields: the 1st one's visibility is tied to the 2nd one
        // being set, and the 2nd one is autopopulated. As a result, both
        // should be visible by default.
        ...addCustomField("char", "text", "field A", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("char", "text", "field B", false),
        ...selectFieldByLabel("field A"),
        ...selectButtonByData('data-set-visibility-dependency="field B"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        ...selectFieldByLabel("field B"),
        {
            content: "Insert default value",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "text prefilled",
        },
        ...wTourUtils.clickOnSave(),
        {
            content: 'Verify value attribute and property',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]:propValue("Mitchell Admin")',
        },
        {
            content: 'Verify that phone field is still auto-fillable',
            trigger: 'iframe .s_website_form_field input[data-fill-with="phone"]:propValue("+1 555-555-5555")',
        },
        // Check that the resulting form behavior is correct.
        {
            content: "Check that field B prefill text is set",
            trigger: `iframe ${triggerFieldByLabel("field B")}:has(input[value="prefilled"])`,
            isCheck: true,
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            isCheck: true,
        },
        // A) Check that if we edit again and save again the default value is
        // not deleted.
        // B) Add a 3rd field. Field A's visibility is tied to field B being set,
        // field B is autopopulated and its visibility is tied to field C being
        // set, and field C is empty.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Edit the form',
            trigger: 'iframe .s_website_form_field:eq(0) input',
            run: 'click',
        },
        ...addCustomField("char", "text", "field C", false),
        ...selectFieldByLabel("field B"),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        {
            content: "Check that there is a comparator after two clicks on 'Visible only if'",
            trigger: "[data-attribute-name='visibilityComparator']",
            run: function () {
                if (!this.$anchor[0].querySelector("we-button.active")) {
                    console.error("A default comparator should be set");
                }
            },
        },
        ...selectButtonByData('data-set-visibility-dependency="field C"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form behavior is correct.
        {
            content: 'Verify that the value has not been deleted',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]',
        }, {
            content: "Check that fields A and B are not visible and that field B's prefill text is still set",
            trigger: "iframe .s_website_form" +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))` +
                `:has(${triggerFieldByLabel("field B")}` +
                `:has(input[value="prefilled"]):not(:visible))`,
            isCheck: true,
        }, {
            content: "Type something in field C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Sesame",
        }, {
            content: "Check that fields A and B are visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:visible)`,
            isCheck: true,
        },

        // Have field A's visibility tied to field B containing something,
        // while field B's visibility is also tied to another field.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...selectFieldByLabel("field A"),
        {
            content: "Verify that the form editor appeared",
            trigger: ".o_we_customize_panel .snippet-option-WebsiteFormEditor",
            run: () => null,
        },
        ...selectButtonByData('data-select-data-attribute="contains"'),
        {
            content: "Tie the visibility of field A to field B containing 'peek-a-boo'",
            trigger: "we-input[data-name=hidden_condition_additional_text] input",
            run: "text peek-a-boo",
        },
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form works and does not raise an error.
         {
            content: "Write anything in C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Mellon",
        }, {
            content: "Check that field B is visible, but field A is not",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))`,
            isCheck: true,
        }, {
            content: "Insert 'peek-a-boo' in field B",
            trigger: `iframe ${triggerFieldByLabel("field B")} input`,
            run: "text peek-a-boo",
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            isCheck: true,
        },

        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...addCustomField("char", "text", "Philippe of Belgium", false),
        {
            content: "Select the 'Subject' field",
            trigger: 'iframe .s_website_form_field.s_website_form_model_required:has(label:contains("Subject"))',
        },
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="Philippe of Belgium"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        {
            content: "Set a default value to the 'Subject' field",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text Default Subject',
        },
        {
            content: "Select the 'Your Message' field",
            trigger: 'iframe .s_website_form_field.s_website_form_required:has(label:contains("Your Message"))',
        },
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="Philippe of Belgium"'),
        ...selectButtonByData('data-select-data-attribute="set"'),

        ...wTourUtils.clickOnSave(),
        // Ensure that a field required for a model is not disabled when
        // conditionally hidden.
        {
            content: "Check that the 'Subject' field is not disabled",
            trigger: `iframe .s_website_form:has(.s_website_form_model_required ` +
                `.s_website_form_input[value="Default Subject"]:not([disabled]):not(:visible))`,
            run: () => null, // it's a check
        },
        // Ensure that a required field (but not for a model) is disabled when
        // conditionally hidden.
        {
            content: "Check that the 'Your Message' field is disabled",
            trigger: `iframe .s_website_form:has(.s_website_form_required ` +
                `.s_website_form_input[name="body_html"][required][disabled]:not(:visible))`,
            run: () => null, // it's a check
        },

        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "Select the 'Subject' field",
            trigger: 'iframe .s_website_form_field.s_website_form_model_required:has(label:contains("Subject"))',
        },
        ...selectButtonByData("data-set-visibility='visible'"),
        {
            content: "Empty the default value of the 'Subject' field",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "remove_text",
        },
        {
            content: "Select the 'Your Message' field",
            trigger: 'iframe .s_website_form_field.s_website_form_required:has(label:contains("Your Message"))',
        },
        ...selectButtonByData("data-set-visibility='visible'"),
        {
            content: 'Click on the submit button',
            trigger: 'iframe .s_website_form_send',
            run: 'click',
        },
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
        // Test a field visibility when it's tied to another Date [Time] field
        // being set.
        ...addCustomField("char", "text", "field D", false, { visibility: CONDITIONALVISIBILITY }),
        ...addCustomField("date", "text", "field E", false),
        ...selectFieldByLabel("field D"),
        ...selectButtonByData('data-set-visibility-dependency="field E"'),
        ...selectButtonByData('data-select-data-attribute="after"'),
        {
            content: "Enter a date in the date input",
            trigger: "[data-name='hidden_condition_additional_date'] input",
            run: "text 03/28/2017",
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "Enter an invalid date in field E",
            trigger: `iframe ${triggerFieldByLabel("field E")} input`,
            run() {
                this.$anchor[0].value = "25071981";
                this.$anchor[0].dispatchEvent(new InputEvent("input", {bubbles: true}));
                // Adds a delay to let the input code run.
                setTimeout(() => {
                    this.$anchor[0].classList.add("invalidDate");
                }, 500);
            },
        },
        {
            content: "Enter an valid date in field E",
            trigger: `iframe ${triggerFieldByLabel("field E")} input.invalidDate`,
            run() {
                this.$anchor[0].classList.remove("invalidDate");
                this.$anchor[0].value = "07/25/1981";
                this.$anchor[0].dispatchEvent(new InputEvent("input", {bubbles: true}));
                // Adds a delay to let the input code run.
                setTimeout(() => {
                    this.$anchor[0].classList.add("validDate");
                }, 500);
            },
        },
        {
            content: "Click to open the date picker popover from field E",
            trigger: `iframe ${triggerFieldByLabel("field E")} input.validDate`,
            run(actions) {
                this.$anchor[0].classList.remove("validDate");
                actions.click();
            },
        },
        {
            content: "Select today's date from the date picker",
            trigger: "iframe .o_datetime_picker .o_date_item_cell.o_today",
        },
        {
            content: "Check that field D is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field D")}:visible)`,
            isCheck: true,
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        // The next four calls to "addCustomField" are there to ensure such
        // characters do not make the form editor crash.
        ...addCustomField("char", "text", "''", false),
        ...addCustomField("char", "text", '""', false),
        ...addCustomField("char", "text", "``", false),
        ...addCustomField("char", "text", "\\", false),

        // Ensure that the description option is working as wanted.
        ...addCustomField("char", "text", "Check description option", false),
        wTourUtils.changeOption("WebsiteFieldEditor", "we-button[data-toggle-description] we-checkbox"),
        {
            content: "Ensure that the description has correctly been added on the field",
            trigger: "iframe .s_website_form_field:contains('Check description option') .s_website_form_field_description",
            isCheck: true,
        },

        ...wTourUtils.clickOnSave(),
        {
            content: 'Verify that the recipient email has been saved',
            // We have to this that way because the input type = hidden.
            trigger: 'iframe form:has(input[name="email_to"][value="test@test.test"])',
            isCheck: true,
        },
    ]);

    function editContactUs(steps) {
        return [
            {
                content: "Select the contact us form by clicking on an input field",
                trigger: 'iframe .s_website_form input',
                extra_trigger: '#oe_snippets .oe_snippet_thumbnail',
                run: 'click',
            },
            ...steps,
            ...wTourUtils.clickOnSave(),
        ];
    }

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_with_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, () => editContactUs([
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
    ]));
    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_no_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, () => editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        }, {
            content: "Check that the recipient email is correct",
            trigger: 'we-input[data-field-name="email_to"] input:propValue("website_form_contactus_edition_no_email@mail.com")',
            isCheck: true,
        },
    ]));

    wTourUtils.registerWebsitePreviewTour('website_form_conditional_required_checkboxes', {
        test: true,
        url: '/',
        edition: true,
    }, () => [
        // Create a form with two checkboxes: the second one required but
        // invisible when the first one is checked. Basically this should allow
        // to have: both checkboxes are visible by default but the form can
        // only be sent if one of the checkbox is checked.
        {
            content: "Add the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop_native iframe #wrap',
        }, {
            content: "Select the form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
            run: function (actions) {
                actions.auto();

                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const requiredFields = this.$anchor.closest('[data-snippet]').find('.s_website_form_required');
                if (requiredFields.length !== NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM) {
                    console.error('The amount of required fields seems to have changed');
                }
            },
        },
        ...((function () {
            const steps = [];
            for (let i = 0; i < NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM; i++) {
                steps.push({
                    content: "Select required field to remove",
                    trigger: 'iframe .s_website_form_required .s_website_form_input',
                });
                steps.push({
                    content: "Remove required field",
                    trigger: 'iframe .oe_overlay .oe_snippet_remove',
                });
            }
            return steps;
        })()),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 1', false),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 2', true, {visibility: CONDITIONALVISIBILITY}),
        {
            content: "Open condition item select",
            trigger: 'we-select[data-name="hidden_condition_opt"] we-toggler',
        }, {
            content: "Choose first checkbox as condition item",
            trigger: 'we-button[data-set-visibility-dependency="Checkbox 1"]',
        }, {
            content: "Open condition comparator select",
            trigger: 'we-select[data-attribute-name="visibilityComparator"] we-toggler',
        }, {
            content: "Choose 'not equal to' comparator",
            trigger: 'we-button[data-select-data-attribute="!selected"]',
        },
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form behavior is correct
        {
            content: "Wait for page reload",
            trigger: 'iframe body:not(.editor_enable) [data-snippet="s_website_form"]',
            run: function (actions) {
                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const essentialFields = this.$anchor.find('.s_website_form_model_required');
                if (essentialFields.length !== ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM.length) {
                    console.error('The amount of model-required fields seems to have changed');
                }
            },
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Try sending empty form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: 'Check the form could not be sent',
            trigger: 'iframe #s_website_form_result.text-danger',
            run: () => null,
        }, {
            content: 'Check the first checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 1"]',
        }, {
            content: 'Check the second checkbox is now hidden',
            trigger: 'iframe .s_website_form:has(input[type="checkbox"][name="Checkbox 2"]:not(:visible))',
            run: () => null,
        }, {
            content: 'Try sending the form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }, {
            content: "Go back to the form",
            trigger: 'iframe a.navbar-brand.logo',
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Check the second checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 2"]',
        }, {
            content: 'Try sending the form again',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }
    ]);

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_change_random_option', {
        test: true,
        url: '/contactus',
        edition: true,
    }, () => editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        },
    ]));

    // Check that the editable form content is actually editable.
    wTourUtils.registerWebsitePreviewTour("website_form_editable_content", {
        test: true,
        url: "/",
        edition: true,
    }, () => [
        {
            ...wTourUtils.dragNDrop({id: "s_website_form", name: "Form"}),
            run: "drag_and_drop_native iframe #wrap",
        },
        {
            content: "Check that a form field is not editable",
            extra_trigger: "iframe .s_website_form_field",
            trigger: "iframe section.s_website_form input",
            run: function () {
                if (this.$anchor[0].isContentEditable) {
                    console.error("A form field should not be editable.");
                }
            },
        },
        {
            content: "Go back to blocks",
            trigger: ".o_we_add_snippet_btn",
        },
        wTourUtils.dragNDrop({id: "s_three_columns", name: "Columns"}),
        {
            content: "Select the first column",
            trigger: "iframe .s_three_columns .row > :nth-child(1)",
        },
        {
            content: "Drag and drop the selected column inside the form",
            trigger: "iframe .o_overlay_move_options .o_move_handle",
            run: "drag_and_drop_native iframe section.s_website_form",
        },
        {
            content: "Click on the text inside the dropped form column",
            extra_trigger: "iframe section.s_website_form .col-lg-4[contenteditable=true]",
            trigger: "iframe section.s_website_form h3.card-title",
            run: "dblclick",
        },
        {
            // Simulate a user interaction with the editable content.
            content: "Update the text inside the form column",
            trigger: "iframe section.s_website_form h3.card-title",
            run: "text ABC",
        },
        {
            content: "Check that the new text value was correctly set",
            trigger: "iframe section.s_website_form h3:containsExact(ABC)",
            run: () => null, // it's a check
        },
        {   content: "Remove the dropped column",
            trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
            run: "click",
        },
        ...wTourUtils.clickOnSave(),
    ]);

    wTourUtils.registerWebsitePreviewTour("website_form_nested_forms", {
        test: true,
        url: "/my/account",
        edition: true,
    },
    () => [
        {
            ...wTourUtils.dragNDrop({ id: "s_website_form", name: "Form" }),
            run: "drag_and_drop_native iframe #wrap .o_portal_details",
        },
        {
            content: "Check the form was not dropped into another form",
            trigger: "iframe form:not(:has([data-snippet='s_website_form']))",
            isCheck: true,
        },
    ]);

    wTourUtils.registerWebsitePreviewTour("website_form_special_characters", {
        test: true,
        url: "/",
        edition: true,
    }, () => [
        {
            ...wTourUtils.dragNDrop({id: "s_website_form", name: "Form"}),
            run: "drag_and_drop_native iframe #wrap",
        },
        {
            content: "Select form by clicking on an input field",
            extra_trigger: "iframe .s_website_form_field",
            trigger: "iframe section.s_website_form input",
        },
        ...addCustomField("char", "text", `Test1"'`, false),
        ...addCustomField("char", "text", 'Test2`\\', false),
        ...wTourUtils.clickOnSave(),
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: "Complete 'Your Question' field",
            trigger: "iframe textarea[name='description']",
            run: "text test",
        }, {
            content: "Complete the first added field",
            trigger: "iframe input[name='Test1&quot;&apos;']",
            run: "text test1",
        }, {
            content: "Complete the second added field",
            trigger: "iframe input[name='Test2&lsquo;&bsol;']",
            run: "text test2",
        }, {
            content: "Click on 'Submit'",
            trigger: "iframe a.s_website_form_send",
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: "iframe body:not(:has([data-snippet='s_website_form'])) .fa-check-circle",
            isCheck: true,
        },
    ]);

    __exports[Symbol.for("default")] = {};

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor_frontend.js  *
*  Lines: 240                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/website_form_editor_frontend', ['@web/core/network/rpc_service', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { jsonrpc } = require("@web/core/network/rpc_service");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_form_editor_tour_submit", {
    test: true,
    steps: () => [
    {
        content:  "Try to send the form with some required fields not filled in",
        extra_trigger:  "form[data-model_name='mail.mail']" +
                        "[data-success-page='/contactus-thank-you']" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):has(input[type='text'][name='name'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Email')):has(input[type='email'][name='email_from'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')):has(textarea[name='description'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):has(input[type='text'][name='subject'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')):has(input[type='text'][name='date'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Awesome Label')):hidden)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):has(textarea[name='body_html'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Iphone'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Galaxy S'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Xperia'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Wiko Stairway'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='After-sales Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Invoicing Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Development Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Management Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Belgium'])))" +
                        ":has(.s_website_form_field.s_website_form_required:has(label:contains('State')):has(select[name='State'][required]:has(option[value='France'])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Canada'])))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')))" +
                        ":has(.s_website_form_field:has(input[name='email_to'][value='test@test.test']))" +
                        ":has(.s_website_form_field:has(input[name='website_form_signature']))",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Subject field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=subject]",
        run:      "text Jane Smith"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Message field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "textarea[name=body_html]",
        run:      "text A useless message"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields was detected and check a product. If this fails, you probably broke the cleanForSave.",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=Products][value='Wiko Stairway']"
    },
    {
        content:  "Open datetime picker",
        trigger:  ".s_website_form_datetime input",
        run:      "click",
    },
    {
        content:  "Complete Date field",
        trigger:  ".o_date_picker .o_today",
    },
    {
        content:  "Check another product",
        trigger:  "input[name='Products'][value='Xperia']"
    },
    {
        content:  "Check a service",
        trigger:  "input[name='Service'][value='Development Service']"
    },
    {
        content:  "Select a State",
        trigger:  "select[name='State']",
        run:      "text Canada",
    },
    {
        content:  "Complete Your Name field",
        trigger:  "input[name='name']",
        run:      "text chhagan"
    },
    {
        content:  "Complete Email field",
        trigger:  "input[name=email_from]",
        run:      "text test@mail.com"
    },
    {
        content: "Complete Subject field",
        trigger: 'input[name="subject"]',
        run: 'text subject',
    },
    {
        content:  "Complete Your Question field",
        trigger:  "textarea[name='description']",
        run:      "text magan"
    },
    {
        content: "Check if conditional field is visible, it shouldn't.",
        trigger: "body",
        run: function () {
            const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_website_form_field_hidden_if')[0]);
            if (style.display !== 'none') {
                console.error('error This field should be invisible when the name is not odoo');
            }
        }
    },
    {
        content: "Change name input",
        trigger: "input[name='name']",
        run: "text odoo",
    },
    {
        content: "Check if conditional field is visible, it should.",
        trigger: "input[name='email_cc']",
    },
    {
        content: "Select state option",
        trigger: "select[name='State']",
        run: 'text 44 - UK',
    },
    {
        content:  "Send the form",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check form is submitted without errors",
        trigger:  "#wrap:has(h1:contains('Thank You!'))",
        isCheck: true,
    }
]});

registry.category("web_tour.tours").add("website_form_editor_tour_results", {
    test: true,
    steps: () => [
    {
        content: "Check mail.mail records have been created",
        trigger: "body",
        run: function () {
            var mailDef = jsonrpc(`/web/dataset/call_kw/mail.mail/search_count`, {
                model: "mail.mail",
                method: "search_count",
                args: [[
                    ['email_to', '=', 'test@test.test'],
                    ['body_html', 'like', 'A useless message'],
                    ['body_html', 'like', 'Service : Development Service'],
                    ['body_html', 'like', 'State : 44 - UK'],
                    ['body_html', 'like', 'Products : Xperia,Wiko Stairway']
                ]],
                kwargs: {},
            });
            var success = function(model, count) {
                if (count > 0) {
                    $('body').append('<div id="website_form_editor_success_test_tour_'+model+'"></div>');
                }
            };
            mailDef.then(success.bind(this, 'mail_mail'));
        }
    },
    {
        content:  "Check mail.mail records have been created",
        trigger:  "#website_form_editor_success_test_tour_mail_mail",
        allowInvisible: true,
        isCheck: true,
    }
]});
registry.category("web_tour.tours").add('website_form_contactus_submit', {
    test: true,
    url: '/contactus',
    steps: () => [
    // As the demo portal user, only two inputs needs to be filled to send
    // the email
    {
        content: "Fill in the subject",
        trigger: 'input[name="subject"]',
    },
    {
        content: 'Fill in the message',
        trigger: 'textarea[name="description"]',
    },
    {
        content: 'Send the form',
        trigger: '.s_website_form_send',
    },
    {
        content: 'Check form is submitted without errors',
        trigger: '#wrap:has(h1:contains("Thank You!"))',
        isCheck: true,
    },
]});
registry.category("web_tour.tours").add('website_form_contactus_check_changed_email', {
    test: true,
    url: '/contactus',
    steps: () => [
        {
            content: "Check that the recipient email is updated",
            trigger: 'form:has(input[name="email_to"][value="after.change@mail.com"])',
            isCheck: true,
        },
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_navbar_menu.js  *
*  Lines: 24                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_navbar_menu', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_navbar_menu", {
    test: true,
    url: "/",
    steps: () => [
    {
        content: "Ensure menus are in DOM",
        trigger: '.top_menu .nav-item a:contains("Test Tour Menu")',
        run: function () {}, // it's a check
    }, {
        content: "Ensure menus loading is done (so they are actually visible)",
        trigger: 'body:not(:has(.o_menu_loading))',
        run: function () {}, // it's a check
    }
]});

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_no_dirty_page.js  *
*  Lines: 128                                                      *
*******************************************************************/
odoo.define('@website/../tests/tours/website_no_dirty_page', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const makeSteps = (steps = []) => [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }), {
        content: "Click on Discard",
        trigger: '.o_we_website_top_actions [data-action="cancel"]',
    }, {
        content: "Check that discarding actually warns when there are dirty changes, and cancel",
        trigger: ".modal-footer .btn-secondary",
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        // This makes sure the last step about leaving edit mode at the end of
        // this tour makes sense.
        content: "Confirm we are in edit mode",
        trigger: 'body.editor_has_snippets',
        run: () => null,
    },
    ...steps,
    {
        // Makes sure the dirty flag does not happen after a setTimeout or
        // something like that.
        content: "Click elsewhere and wait for a few ms",
        trigger: 'iframe #wrap',
        run: function (actions) {
            actions.auto();
            setTimeout(() => document.body.classList.add('o_test_delay'), 999);
        },
    }, {
        content: "Click on Discard",
        trigger: '.o_we_website_top_actions [data-action="cancel"]',
        extra_trigger: 'body.o_test_delay',
    }, {
        content: "Confirm we are not in edit mode anymore",
        trigger: 'body:not(.editor_has_snippets)',
        run: () => null,
    },
];

wTourUtils.registerWebsitePreviewTour('website_no_action_no_dirty_page', {
    test: true,
    url: '/',
    edition: true,
}, () => makeSteps());

wTourUtils.registerWebsitePreviewTour('website_no_dirty_page', {
    test: true,
    url: '/',
    edition: true,
}, () => makeSteps([
    {
        // This has been known to mark the page as dirty because of the "drag
        // the column on image move" feature.
        content: "Click on default image",
        trigger: 'iframe .s_text_image img',
    }, {
        content: "Click on default paragraph",
        trigger: 'iframe .s_text_image h2 + p.o_default_snippet_text',
    }, {
        // TODO this should be done in a dedicated test which would be testing
        // all default snippet texts behaviors. Will be done in master where a
        // task will review this feature.
        // TODO also test that applying an editor command removes that class.
        content: "Make sure the paragraph still acts as a default paragraph",
        trigger: 'iframe .s_text_image h2 + p.o_default_snippet_text',
        run: () => null,
    }, {
        content: "Click on button",
        trigger: 'iframe .s_text_image .btn',
        run: function (actions) {
            actions.click();
            const el = this.$anchor[0];
            const sel = el.ownerDocument.getSelection();
            sel.collapse(el, 0);
            el.focus();
        },
    },
]));

wTourUtils.registerWebsitePreviewTour('website_no_dirty_lazy_image', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }), {
        content: "Replace first paragraph, to insert a new link",
        // Ensure the test keeps testing what it should test (eg if we ever
        // remove the lazy loading on those language img))
        extra_trigger: 'iframe img.o_lang_flag[loading="lazy"]',
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text SomeTestText',
    }, {
        content: "Click elsewhere to be sure the editor fully process the new content",
        extra_trigger: 'iframe #wrap .s_text_image p:contains("SomeTestText")',
        trigger: 'iframe #wrap .s_text_image img',
    }, {
        content: "Check that there is no more than one dirty flag",
        extra_trigger: '.o_we_user_value_widget[data-replace-media="true"]',
        trigger: 'iframe body',
        run: function () {
            const dirtyCount = this.$anchor[0].querySelectorAll('.o_dirty').length;
            if (dirtyCount !== 1) {
                console.error(dirtyCount + " dirty flag(s) found");
            } else {
                this.$anchor[0].querySelector('#wrap').classList.add('o_dirty_as_expected');
            }
        },
    }, {
        content: "Check previous step went through correctly about dirty flags",
        trigger: 'iframe #wrap.o_dirty_as_expected',
        run: () => null, // it's a check
    }
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_page_options.js  *
*  Lines: 89                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_page_options', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('website_page_options', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="transparent"]'),
    // It's important to test saving right after changing that option only as
    // this is why this test was made in the first place: the page was not
    // marked as dirty when that option was the only one that was changed.
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is transparent",
        trigger: 'iframe #wrapwrap.o_header_overlay',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('topMenuColor', 'we-select.o_we_so_color_palette'),
    wTourUtils.changeOption('topMenuColor', 'button[data-color="black-50"]', 'background color', 'bottom', true),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is in black-50",
        trigger: 'iframe header#top.bg-black-50',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption("topMenuColor", '[data-page-option-name="header_text_color"]'),
    wTourUtils.changeOption("topMenuColor", 'button[style="background-color:#FF0000;"]', "text color", "bottom", true),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that text color of the header is in red",
        trigger: 'iframe header#top[style=" color: #FF0000;"]',
        isCheck: true,
    },
    {
        content: "Enable the mobile view",
        trigger: ".o_mobile_preview > a",
    },
    {
        content: "Check that text color of the navbar toggler icon is in red",
        trigger: 'iframe header#top [data-bs-toggle="offcanvas"] .navbar-toggler-icon',
        run: function () {
            if (getComputedStyle(this.$anchor[0]).color !== "rgb(255, 0, 0)") {
                console.error("The navbar toggler icon is not in red");
            }
        },
    },
    {
        content: "Disable the mobile view",
        trigger: ".o_mobile_preview > a",
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: "o_header_standard", name: "Header"}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="hidden"]'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is hidden",
        trigger: 'iframe #wrapwrap:has(header#top.d-none.o_snippet_invisible)',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on 'header' in the invisible elements list",
        trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    },
    wTourUtils.clickOnSnippet({id: 'o_footer', name: 'Footer'}),
    wTourUtils.changeOption('HideFooter', 'we-button[data-name="hide_footer_page_opt"] we-checkbox'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the footer is hidden and the header is visible",
        trigger: 'iframe #wrapwrap:has(.o_footer.d-none.o_snippet_invisible)',
        extra_trigger: 'iframe #wrapwrap header#top:not(.d-none)',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/website_snippets_menu_tabs.js  *
*  Lines: 39                                                            *
************************************************************************/
odoo.define('@website/../tests/tours/website_snippets_menu_tabs', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("website_snippets_menu_tabs", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.goToTheme(),
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        extra_trigger: 'we-customizeblock-option.snippet-option-ThemeColors',
        trigger: 'iframe main > .oe_structure.oe_empty',
        run: 'click',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: '#snippets_menu .o_we_customize_snippet_btn',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_style_edition.js  *
*  Lines: 113                                                      *
*******************************************************************/
odoo.define('@website/../tests/tours/website_style_edition', ['@web_editor/js/common/utils', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const weUtils = require("@web_editor/js/common/utils")[Symbol.for("default")];
const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const TARGET_FONT_SIZE = 30;
const TARGET_BODY_BG_COLOR = '#00FF00';
const TARGET_BODY_BG_COLOR_V2 = 'rgb(0, 255, 0)';
const TARGET_BODY_COLOR = '#FF00FF';
const TARGET_BODY_COLOR_V2 = 'rgb(255, 0, 255)';

const checkFontSize = function () {
    const style = document.defaultView.getComputedStyle(this.$anchor[0]);
    if (!weUtils.areCssValuesEqual(style.fontSize, `${TARGET_FONT_SIZE}px`, 'font-size', this.$anchor)) {
        console.error(`Expected the font-size to be equal to ${TARGET_FONT_SIZE}px but found ${style.fontSize} instead`);
    }
};
const checkBodyBgColor = function () {
    const style = document.defaultView.getComputedStyle(this.$anchor[0]);
    if (!weUtils.areCssValuesEqual(style.backgroundColor, `${TARGET_BODY_BG_COLOR}`, 'background-color', this.$anchor)) {
        console.error(`Expected the background color to be equal to ${TARGET_BODY_BG_COLOR} but found ${style.backgroundColor} instead`);
    }
};
const checkBodyColor = function () {
    const style = document.defaultView.getComputedStyle(this.$anchor[0]);
    if (!weUtils.areCssValuesEqual(style.color, `${TARGET_BODY_COLOR}`, 'color', this.$anchor)) {
        console.error(`Expected the color to be equal to ${TARGET_BODY_COLOR} but found ${style.color} instead`);
    }
};

wTourUtils.registerWebsitePreviewTour("website_style_edition", {
    test: true,
    url: '/',
    edition: true,
}, () => [
wTourUtils.goToTheme(),
{
    content: "Change font size",
    trigger: '[data-variable="font-size-base"] input',
    run: `text_blur ${TARGET_FONT_SIZE}`,
}, {
    content: "Check the font size was properly adapted",
    trigger: 'iframe #wrapwrap',
    // Waiting the CSS to be reloaded: the code adds a new assets bundle with
    // a #t=... at the end then removes the old one.
    extra_trigger: 'iframe html:not(:has(link[href$="web.assets_frontend.min.css"]))',
    run: checkFontSize,
}, {
    content: "Open the color combinations area",
    trigger: '.o_we_theme_presets_collapse we-toggler',
}, {
    content: "Open a color combination",
    trigger: '.o_we_cc_preview_wrapper',
}, {
    content: "Edit the background color of that color combination",
    trigger: '.o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(0)',
}, {
    content: "Choose a color",
    trigger: `.o_we_color_btn[style*="background-color:${TARGET_BODY_BG_COLOR}"]`,
}, {
    content: "Check the body background color was properly adapted",
    trigger: 'iframe body',
    extra_trigger: `
        .o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(0) .o_we_color_preview[style*="${TARGET_BODY_BG_COLOR}"],
        .o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(0) .o_we_color_preview[style*="${TARGET_BODY_BG_COLOR_V2}"]
    `,
    run: checkBodyBgColor,
}, {
    content: "Edit the text color of that color combination",
    trigger: '.o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(1)',
}, {
    content: "Choose a color",
    trigger: `.o_we_color_btn[style*="background-color:${TARGET_BODY_COLOR}"]`,
}, {
    content: "Check the body color was properly adapted",
    trigger: 'iframe body',
    extra_trigger: `
        .o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(1) .o_we_color_preview[style*="${TARGET_BODY_COLOR}"],
        .o_we_theme_presets_collapse we-collapse .o_we_so_color_palette:eq(1) .o_we_color_preview[style*="${TARGET_BODY_COLOR_V2}"]
    `,
    run: checkBodyColor,
},
...wTourUtils.clickOnSave(),
{
    content: "Check the font size is still ok outside of edit mode",
    trigger: 'iframe body #wrapwrap',
    run: checkFontSize,
}, {
    content: "Check the body background color is still ok outside of edit mode",
    trigger: 'iframe body',
    run: checkBodyBgColor,
}, {
    content: "Check the body color is still ok outside of edit mode",
    trigger: 'iframe body',
    run: checkBodyColor,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.goToTheme(),
{
    content: "Click on the Background Image selection",
    trigger: '[data-customize-body-bg-type="\'image\'"]:not(.active)',
    extra_trigger: '[data-customize-body-bg-type="NONE"].active',
}, {
    content: "The media dialog should open",
    trigger: '.o_select_media_dialog',
    run: () => {}, // It's a check.
}]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_text_edition.js  *
*  Lines: 66                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_text_edition', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

const WEBSITE_MAIN_COLOR = '#ABCDEF';

wTourUtils.registerWebsitePreviewTour('website_text_edition', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    wTourUtils.goToTheme(),
    {
        content: "Open colorpicker to change website main color",
        trigger: 'we-select[data-color="o-color-1"] .o_we_color_preview',
    },
    {
        content: "Input the value for the new website main color (also make sure it is independent from the backend)",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    wTourUtils.goBackToBlocks(),
    wTourUtils.dragNDrop({id: 's_text_block', name: 'Text'}),
    {
        content: "Click on the text block first paragraph (to auto select)",
        trigger: 'iframe .s_text_block p',
    },
    {
        content: "Open the foreground colorpicker",
        trigger: '#toolbar:not(.oe-floating) #oe-text-color',
    },
    {
        content: "Go to the 'solid' tab",
        trigger: '.o_we_colorpicker_switch_pane_btn[data-target="custom-colors"]',
    },
    {
        content: "Input the website main color explicitly",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Check that paragraph now uses the main color *class*",
        trigger: 'iframe .s_text_block p',
        run: function (actions) {
            const fontEl = this.$anchor[0].querySelector('font');
            if (!fontEl) {
                console.error("A background color should have been applied");
                return;
            }
            if (fontEl.style.backgroundColor) {
                console.error("The paragraph should not have an inline style background color");
                return;
            }
            if (!fontEl.classList.contains('text-o-color-1')) {
                console.error("The paragraph should have the right background color class");
                return;
            }
        },
    }
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/website_text_font_size.js  *
*  Lines: 133                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/website_text_font_size', ['@website/js/tours/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];
const {FONT_SIZE_CLASSES} = require('@web_editor/js/editor/odoo-editor/src/utils/utils');

const classNameInfo = new Map();
classNameInfo.set("display-1-fs", {scssVariableName: "display-1-font-size", start: 80, end: 90});
classNameInfo.set("display-2-fs", {scssVariableName: "display-2-font-size", start: 72, end: 80});
classNameInfo.set("display-3-fs", {scssVariableName: "display-3-font-size", start: 64, end: 70});
classNameInfo.set("display-4-fs", {scssVariableName: "display-4-font-size", start: 56, end: 60});
classNameInfo.set("h1-fs", {scssVariableName: "h1-font-size", start: 48, end: 50});
classNameInfo.set("h2-fs", {scssVariableName: "h2-font-size", start: 40, end: 42});
classNameInfo.set("h3-fs", {scssVariableName: "h3-font-size", start: 32, end: 38});
classNameInfo.set("h4-fs", {scssVariableName: "h4-font-size", start: 24, end: 34});
classNameInfo.set("h5-fs", {scssVariableName: "h5-font-size", start: 20, end: 30});
classNameInfo.set("h6-fs", {scssVariableName: "h6-font-size", start: 16, end: 26});
classNameInfo.set("base-fs", {scssVariableName: "font-size-base", start: 16, end: 26});
classNameInfo.set("o_small-fs", {scssVariableName: "small-font-size", start: 14, end: 24});

function checkComputedFontSize(fontSizeClass, stage) {
    return {
        content: `Check that the computed font size for ${fontSizeClass} is correct`,
        trigger: `iframe #wrap .s_text_block .${fontSizeClass}`,
        run: function () {
            const computedFontSize = parseInt(getComputedStyle(this.$anchor[0]).fontSize);
            const expectedFontSize = classNameInfo.get(fontSizeClass)[stage];
            const gapBetweenSizes = Math.abs(computedFontSize - expectedFontSize);
            const gapTolerance = 7; // Because the font size is responsive.
            if (gapBetweenSizes > gapTolerance) {
                console.error(`When applied class ${fontSizeClass}, the font size is ` +
                    `${computedFontSize} instead of ~${expectedFontSize}`);
            }
        }
    };
}

function getFontSizeTestSteps(fontSizeClass) {
    return [
        wTourUtils.dragNDrop({id: "s_text_block", name: "Text"}),
        {
            content: `[${fontSizeClass}] Click on the text block first paragraph (to auto select)`,
            trigger: "iframe .s_text_block p",
        }, {
            content: `Open the font size dropdown to select ${fontSizeClass}`,
            trigger: "#font-size button",
        }, {
            content: `Select ${fontSizeClass} in the dropdown`,
            trigger: `a[data-apply-class="${fontSizeClass}"]:contains(${classNameInfo.get(fontSizeClass).start})`,
        },
        checkComputedFontSize(fontSizeClass, "start"),
        wTourUtils.goToTheme(),
        {
            content: `Open the collapse to see the font size of ${fontSizeClass}`,
            trigger: `we-collapse:has(we-input[data-variable="` +
            `${classNameInfo.get(fontSizeClass).scssVariableName}"]) we-toggler`,
        }, {
            content: `Check that the setting for ${fontSizeClass} is correct`,
            trigger: `we-input[data-variable="${classNameInfo.get(fontSizeClass).scssVariableName}"]`
                + ` input:propValue("${classNameInfo.get(fontSizeClass).start}")`,
            isCheck: true,
        }, {
            content: `Change the setting value of ${fontSizeClass}`,
            trigger: `[data-variable="${classNameInfo.get(fontSizeClass).scssVariableName}"] input`,
            run: `text_blur ${classNameInfo.get(fontSizeClass).end}`,
        }, {
            content: `[${fontSizeClass}] Go to blocks tab`,
            trigger: ".o_we_add_snippet_btn",
        }, {
            content: `[${fontSizeClass}] Wait to be in blocks tab`,
            trigger: ".o_we_add_snippet_btn.active",
        },
        wTourUtils.goToTheme(),
        {
            content: `Check that the setting of ${fontSizeClass} has been updated`,
            trigger: `we-input[data-variable="${classNameInfo.get(fontSizeClass).scssVariableName}"]`
                + ` input:propValue("${classNameInfo.get(fontSizeClass).end}")`,
            isCheck: true,
        }, {
            content: `Close the collapse to hide the font size of ${fontSizeClass}`,
            trigger: `we-collapse:has(we-input[data-variable=` +
                `"${classNameInfo.get(fontSizeClass).scssVariableName}"]) we-toggler`,
            extra_trigger: `body:not(:has(.o_we_ui_loading))`,
        },
        checkComputedFontSize(fontSizeClass, "end"),
        {
            content: `Click again on the text with class ${fontSizeClass}`,
            trigger: `iframe #wrap .s_text_block .${fontSizeClass}`,
        }, {
            content: `Remove the text snippet containing the text with class ${fontSizeClass}`,
            trigger: `.oe_snippet_remove`,
        }
    ];
}

function getAllFontSizesTestSteps() {
    const steps = [];
    const fontSizeClassesToSkip = [
        // This option is hidden by default because same value as base-fs.
        "h6-fs",
        // There is nothing related to these classes in the UI to test anymore.
        "small",
        "o_small_twelve-fs",
        "o_small_ten-fs",
        "o_small_eight-fs",
    ];
    for (const fontSizeClass of FONT_SIZE_CLASSES) {
        if (fontSizeClassesToSkip.includes(fontSizeClass)) {
            continue;
        }
        steps.push(...getFontSizeTestSteps(fontSizeClass));
    }
    return steps;
}

wTourUtils.registerWebsitePreviewTour("website_text_font_size", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    ...getAllFontSizesTestSteps(),
    // The last step has to be a check.
    {
        content: "Verify that the text block has been deleted",
        trigger: "iframe #wrap:not(:has(.s_text_block))",
        isCheck: true,
    },
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/website_update_column_count.js  *
*  Lines: 201                                                            *
*************************************************************************/
odoo.define('@website/../tests/tours/website_update_column_count', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

const columnCountOptSelector = ".snippet-option-layout_column we-select[data-name='column_count_opt']";
const columnsSnippetRow = "iframe .s_three_columns .row";
const textImageSnippetRow = "iframe .s_text_image .row";
const changeFirstAndSecondColumnsMobileOrder = (snippetRowSelector, snippetName) => {
    return [{
        content: `Click on the first column of the '${snippetName}' snippet`,
        trigger: `${snippetRowSelector} > div:nth-child(1)`,
    }, {
        content: "Change the orders of the 1st and 2nd columns",
        trigger: "iframe .o_overlay_move_options [data-name='move_right_opt']",
    }];
};

const addMobileOrderToTextImageSnippet = [
    ...changeFirstAndSecondColumnsMobileOrder(textImageSnippetRow, "Text-Image"),
    {
        content: "Check that the mobile order classes and styles are correct",
        trigger: `${textImageSnippetRow}:has(.order-lg-0[style*='order: 1;']:nth-child(1))`
            + ":has(.order-lg-0[style*='order: 0;']:nth-child(2))",
        isCheck: true,
    },
];

const checkIfNoMobileOrder = (snippetRowSelector) => {
    return {
        content: "Check that the mobile order classes and styles were removed",
        trigger: `${snippetRowSelector}:not(:has(.order-lg-0[style*='order: ']))`,
        isCheck: true,
    };
};

wTourUtils.registerWebsitePreviewTour("website_update_column_count", {
    test: true,
    url: "/",
    edition: true,
}, () => [
wTourUtils.dragNDrop({
    id: "s_three_columns",
    name: "Columns",
}),
wTourUtils.clickOnSnippet({
    id: "s_three_columns",
    name: "Columns",
}), {
    content: "Open the columns count select",
    trigger: columnCountOptSelector,
}, {
    content: "Set 5 columns on desktop",
    trigger: `${columnCountOptSelector} we-button[data-select-count='5']`,
}, {
    content: "Check that there are now 5 items on 5 columns, and that it didn't change the mobile layout",
    trigger: `${columnsSnippetRow}:has(.col-lg-2:nth-child(5):not(.col-2)):not(:has(:nth-child(6)))`,
    isCheck: true,
}, {
    content: "Check that there is an offset on the 1st item to center the row on desktop, but not on mobile",
    trigger: `${columnsSnippetRow} > .offset-lg-1:not(.offset-1):first-child`,
    isCheck: true,
}, {
    content: "Open the columns count select",
    trigger: columnCountOptSelector,
}, {
    content: "Set 2 columns on desktop",
    trigger: `${columnCountOptSelector} we-button[data-select-count='2']`,
}, {
    content: "Check that there are still 5 items in the row and click on the last one",
    trigger: `${columnsSnippetRow} > :nth-child(5)`,
}, {
    content: "Delete the item",
    trigger: "we-title:contains('Column'):not(:contains('Columns')) .oe_snippet_remove",
}, {
    content: "Toggle mobile view",
    trigger: ".o_we_website_top_actions [data-action='mobile']",
}, {
    content: "Check that there is 1 column on mobile and click on the selector",
    trigger: `${columnCountOptSelector} we-toggler:contains('1')`,
}, {
    content: "Set 3 columns on mobile",
    trigger: `${columnCountOptSelector} we-button[data-select-count='3']`,
}, {
    content: "Check that there are still 4 items but on rows of 3 columns",
    trigger: `${columnsSnippetRow}:has(.col-lg-6.col-4:nth-child(4))`,
    isCheck: true,
},
// As there is no practical way to resize the items through the handles, the
// next step approximates part of what could be reached.
{
    content: "Add a fake resized class on mobile to the 2nd item",
    trigger: `${columnsSnippetRow} > :nth-child(2)`,
    run: ({ tip_widget }) => {
        const secondItemEl = tip_widget.$anchor[0];
        secondItemEl.classList.replace("col-4", "col-6");
        // As this is a hardcoded class replacement, a click is needed to
        // update the column count.
        secondItemEl.previousElementSibling.click();
    },
}, {
    content: "Check that the counter shows 'Custom'",
    trigger: `${columnCountOptSelector} we-toggler:contains('Custom')`,
    isCheck: true,
}, {
    content: "Click on the 2nd item",
    trigger: `${columnsSnippetRow} > :nth-child(2)`,
}, {
    content: "Change the orders of the 2nd and 3rd items",
    trigger: "iframe .o_overlay_move_options [data-name='move_right_opt']",
}, {
    content: "Check that the 1st item now has order: 0 and a class .order-lg-0 " +
             "and that order: 1, .order-lg-0 is set on the 3rd item, and order: 2, .order-lg-0 on the 2nd",
    trigger: `${columnsSnippetRow}:has([style*='order: 0;'].order-lg-0:first-child)`,
    extra_trigger: `${columnsSnippetRow}:has([style*='order: 2;'].order-lg-0:nth-child(2) + [style*='order: 1;'].order-lg-0:nth-child(3))`,
    isCheck: true,
}, {
    content: "Toggle desktop view",
    trigger: ".o_we_website_top_actions [data-action='mobile']",
}, {
    content: "Open the columns count select",
    trigger: columnCountOptSelector,
}, {
    content: "Add 2 more items through the columns counter",
    trigger: `${columnCountOptSelector} we-button[data-select-count='6']`,
}, {
    content: "Check that each item has a different mobile order from 0 to 5",
    trigger: `${columnsSnippetRow}${[0, 1, 2, 3, 4, 5].map(n => `:has([style*='order: ${n};'].order-lg-0)`).join("")}`,
    isCheck: true,
}, {
    content: "Click on the 6th item",
    trigger: `${columnsSnippetRow} > :nth-child(6)`,
}, {
    // TODO: remove this step. It should not be needed, but the build fails
    // without it.
    content: "Wait for move arrows to appear",
    trigger: "iframe .o_overlay_move_options [data-name='move_left_opt']:has(+ .d-none[data-name='move_right_opt'])",
    isCheck: true,
}, {
    content: "Change the orders of the 5th and 6th items to override the mobile orders",
    trigger: "iframe .o_overlay_move_options [data-name='move_left_opt']",
}, {
    content: "Check that there are no orders anymore",
    trigger: `${columnsSnippetRow}:not(:has([style*='order: 0;'])):not(:has(.order-lg-0))`,
    isCheck: true,
},
]);

wTourUtils.registerWebsitePreviewTour("website_mobile_order_with_drag_and_drop", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({id: "s_three_columns", name: "Columns"}),
    wTourUtils.dragNDrop({id: "s_text_image", name: "Text - Image"}),
    ...wTourUtils.toggleMobilePreview(true),
    // Add a mobile order to the "Columns" snippet columns.
    ...changeFirstAndSecondColumnsMobileOrder(columnsSnippetRow, "Columns"),
    {
        content: "Check that the mobile order classes and styles are correct",
        trigger: `${columnsSnippetRow}:has(.order-lg-0[style*='order: 1;']:nth-child(1))`
            + ":has(.order-lg-0[style*='order: 0;']:nth-child(2))"
            + ":has(.order-lg-0[style*='order: 2;']:nth-child(3))",
        isCheck: true,
    },
    // Add a mobile order to the "Text-Image" snippet columns.
    ...addMobileOrderToTextImageSnippet,
    // Test the drag and drop in the same snippet.
    ...wTourUtils.toggleMobilePreview(false),
    {
        content: "Drag a 'Text-Image' column and drop it in the same snippet",
        trigger: "iframe .o_overlay_move_options .o_move_handle",
        run: `drag_and_drop_native ${textImageSnippetRow}`,
    },
    checkIfNoMobileOrder(textImageSnippetRow),
    // Add again a mobile order to the "Text-Image" snippet columns.
    ...wTourUtils.toggleMobilePreview(true),
    ...addMobileOrderToTextImageSnippet,
    // Test the drag and drop from "Columns" to "Text-Image".
    ...wTourUtils.toggleMobilePreview(false),
    {
        content: "Click on the second column of the 'Columns' snippet",
        trigger: `${columnsSnippetRow} > div:nth-child(2)`,
    }, {
        content: "Drag the second column of 'Columns' and drop it in 'Text-Image'",
        trigger: "iframe .o_overlay_move_options .o_move_handle",
        run: `drag_and_drop_native ${textImageSnippetRow}`,
    },
    checkIfNoMobileOrder(textImageSnippetRow),
    {
        content: "Check that the order gap left in 'Columns' was filled",
        trigger: `${columnsSnippetRow}:has(.order-lg-0[style*='order: 0;']:nth-child(1))`
            + ":has(.order-lg-0[style*='order: 1;']:nth-child(2))",
        isCheck: true,
    },
]);

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/widget_lifecycle.js  *
*  Lines: 75                                                  *
**************************************************************/
odoo.define('@website/../tests/tours/widget_lifecycle', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

// Note: cannot import @website/../tests/tour_utils/widget_lifecycle_dep_widget
// here because that module requires web.public.widget which is not available
// in the backend, where this tour definition is loaded. Easier to duplicate
// that key for now rather than create a whole file to handle this localStorage
// key only.
const localStorageKey = 'widgetAndWysiwygLifecycle';

wTourUtils.registerWebsitePreviewTour("widget_lifecycle", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: "s_countdown",
        name: "Countdown",
    }),
    {
        content: "Wait for the widget to be started and empty the widgetAndWysiwygLifecycle list",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {
            // Start recording the calls to the "start" and "destroy" method of
            // the widget and the wysiwyg.
            window.localStorage.setItem(localStorageKey, '[]');
        },
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Wait for the widget to be started",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {}, // It's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Wait for the widget to be started and check the order of the lifecycle method call of the widget and the wysiwyg",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {
            const result = JSON.parse(window.localStorage.widgetAndWysiwygLifecycle);
            const expected = ["widgetStop", "wysiwygStop", "widgetStart",
                "widgetStop", "wysiwygStart", "wysiwygStarted", "widgetStart",
            ];
            const alternative = ["widgetStop", "widgetStart", "wysiwygStop",
                "widgetStop", "wysiwygStart", "wysiwygStarted", "widgetStart",
            ];
            const resultIsEqualTo = (arr) => {
                return arr.length === result.length
                    && arr.every((item, i) => item === result[i]);
            };
            if (!(resultIsEqualTo(expected) || resultIsEqualTo(alternative))) {
                // The "destroy" method of the wysiwyg is called two times when
                // leaving the edit mode: the first one comes explicitly from
                // the "leaveEditMode" of the "wysiwyg_adapter". The second
                // comes from the OWL mechanism as the wysiwyg is not present in
                // the DOM when the page is reloaded. Because it is not
                // guaranteed that this last call happens before the start of
                // the widget at the page reload, two sequences are acceptable
                // as a result.
                console.error(`
                    Expected: ${expected.toString()}
                    Or:       ${alternative.toString()}
                    Result:   ${result.toString()}
                `);
            }
        },
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_campaign.js  *
*  Lines: 67                                                       *
*******************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_campaign', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category('web_tour.tours').add('mailing_campaign', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Select the "Email Marketing" app',
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        },
        {
            content: 'Select "Campaings" Navbar item',
            trigger: '.o_nav_entry[data-menu-xmlid="mass_mailing.menu_email_campaigns"]',
        },
        {
            content: 'Select "Newsletter" campaign',
            trigger: '.oe_kanban_card:contains("Newsletter")',
        },
        {
            content: 'Add a line (create new mailing)',
            trigger: '.o_field_x2many_list_row_add a',
        },
        {
            content: 'Pick the basic theme',
            trigger: 'iframe',
            run(actions) {
                // For some reason the selectors inside the iframe cannot be triggered.
                const link = this.$anchor[0].contentDocument.querySelector('#basic');
                actions.click(link);
            }
        },
        {
            content: 'Fill in Subject',
            trigger: '#subject_0',
            run: 'text TestFromTour',
        },
        {
            content: 'Fill in Mailing list',
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: 'Pick "Newsletter" option',
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: 'Save form',
            trigger: '.o_form_button_save',
        },
        {
            content: 'Check that newly created record is on the list',
            trigger: '[name="mailing_mail_ids"] td[name="subject"]:contains("TestFromTour")',
            run: () => null,
        },
        ...stepUtils.saveForm(),
    ]
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_editor.js  *
*  Lines: 64                                                     *
*****************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_editor', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('mailing_editor', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
}, {
    trigger: 'button.o_list_button_add',
}, {
    trigger: 'div[name="contact_list_ids"] .o_input_dropdown input[type="text"]',
}, {
    trigger: 'div[name="contact_list_ids"] .ui-state-active'
}, {
    content: 'choose the theme "empty" to edit the mailing with snippets',
    trigger: '[name="body_arch"] iframe #empty',
}, {
    content: 'wait for the editor to be rendered',
    trigger: '[name="body_arch"] iframe .o_editable[data-editor-message="DRAG BUILDING BLOCKS HERE"]',
    run: () => {},
}, {
    content: 'drag the "Title" snippet from the design panel and drop it in the editor',
    trigger: '[name="body_arch"] iframe #email_designer_default_body [name="Title"] .oe_snippet_thumbnail',
    run: function (actions) {
        actions.drag_and_drop_native('[name="body_arch"] iframe .o_editable', this.$anchor);
    }
}, {
    content: 'wait for the snippet menu to finish the drop process',
    trigger: '[name="body_arch"] iframe #email_designer_header_elements:not(:has(.o_we_already_dragging))',
    run: () => {}
}, {
    content: 'verify that the title was inserted properly in the editor',
    trigger: '[name="body_arch"] iframe .o_editable h1',
    run: () => {},
}, {
    trigger: 'button.o_form_button_save',
}, {
    content: 'verify that the save failed (since the field "subject" was not set and it is required)',
    trigger: 'label.o_field_invalid',
    run: () => {},
}, {
    content: 'verify that the edited mailing body was not lost during the failed save',
    trigger: '[name="body_arch"] iframe .o_editable h1',
    run: () => {},
}, {
    trigger: 'input#subject_0',
    run: 'text TestFromTour',
}, {
    trigger: '.o_form_view', // blur previous input
},
...stepUtils.saveForm(),
{
    trigger: 'iframe .o_editable',
    run: () => {},
}]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_editor_theme.js  *
*  Lines: 152                                                          *
***********************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_editor_theme', ['@web/core/registry', '@web_tour/tour_service/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { boundariesIn, setSelection } = require("@web_editor/js/editor/odoo-editor/src/utils/utils");

registry.category("web_tour.tours").add('mailing_editor_theme', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Select the 'Email Marketing' app.",
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        },
        {
            content: "Click on the create button to create a new mailing.",
            trigger: 'button.o_list_button_add',
        },
        {
            content: "Fill in Subject",
            trigger: '#subject_0',
            run: 'text Test Basic Theme',
        },
        {
            content: "Fill in Mailing list",
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: "Pick 'Newsletter' option",
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: "Pick the basic theme",
            trigger: 'iframe #basic',
            extra_trigger: 'iframe .o_mail_theme_selector_new',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null, // no click, just check
        },
        {
            content: "Click on the New button to create another mailing",
            trigger: 'button.o_form_button_create',
        },
        {
            content: "Fill in Subject",
            trigger: '#subject_0',
            extra_trigger: 'iframe .o_mail_theme_selector_new',
            run: 'text Test Newsletter Theme',
        },
        {
            content: "Fill in Mailing list",
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: "Pick 'Newsletter' option",
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: "Pick the newsletter theme",
            trigger: 'iframe #newsletter',
        },
        {
            content: "Make sure the snippets menu is displayed",
            trigger: 'iframe #oe_snippets',
            run: () => null, // no click, just check
        },
        {
            content: 'Save form',
            trigger: '.o_form_button_save',
        },
        {
            content: 'Go back to previous mailing',
            trigger: 'button.o_pager_previous',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null,
        },
        {
            content: "Add some content to be selected afterwards",
            trigger: 'iframe p',
            run: 'text content',
        },
        {
            content: "Select text",
            trigger: 'iframe p:contains(content)',
            run() {
                setSelection(...boundariesIn(this.$anchor[0]), false);
            }
        },
        {
            content: "Make sure the floating toolbar is visible",
            trigger: '#toolbar.oe-floating[style*="visible"]',
            run: () => null,
        },
        {
            content: "Open the color picker",
            trigger: '#toolbar #oe-text-color',
        },
        {
            content: "Pick a color",
            trigger: '#toolbar button[data-color="o-color-1"]',
        },
        {
            content: "Check that color was applied",
            trigger: 'iframe p font.text-o-color-1',
            run: () => null,
        },
        {
            content: 'Save changes',
            trigger: '.o_form_button_save',
        },
        {
            content: "Go to 'Mailings' list view",
            trigger: '.breadcrumb a:contains(Mailings)'
        },
        {
            content: "Open newly created mailing",
            trigger: 'td:contains("Test Basic Theme")',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null,
        },
        {
            content: "Select content",
            trigger: 'iframe p:contains(content)',
            run() {
                setSelection(...boundariesIn(this.$anchor[0]), false);
            }
        },
        {
            content: "Make sure the floating toolbar is visible",
            trigger: '#toolbar.oe-floating[style*="visible"]',
            run: () => null,
        },
        ...stepUtils.discardForm(),
    ]
});

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_document.js  *
*  Lines: 116                                                                              *
*******************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_document', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: unsubscribe from a mailing done on documents (aka not on contacts or
 * mailing lists). We assume email is not member of any mailing list in this test.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_document', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of our services and will not be contacted again.')",
        }, {
            content: "No warning should be displayed",
            trigger: "div#o_mailing_subscription_form_blocklisted:not(:has(p:contains('You will not receive any news from those mailing lists you are a member of')))",
        }, {
            contnet: "Warning will not receive anything anymore",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not hear from us anymore.')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});


/*
 * Tour: unsubscribe from a mailing done on documents (aka not on contacts or
 * mailing lists). We assume email is member of mailing lists in this test.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_document_with_lists', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of our services and will not be contacted again.')",
        }, {
            content: "Display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List1')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_list.js  *
*  Lines: 159                                                                          *
***************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_list', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: unsubscribe from a mailing done on lists (aka playing with opt-out flag
 * instead of directly blocking emails).
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_list', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of the List1, List2 mailing list')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});


/*
 * Tour: unsubscribe from a mailing done on lists (aka playing with opt-out flag
 * instead of directly blocking emails), then play with list subscriptions and
 * blocklist addition / removal. This is mainly an extended version of the tour
 * hereabove, easing debug and splitting checks.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_list_with_update', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of the List1, List2 mailing list')",
        }, {
            content: "List1 is present, just opt-outed",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List1') span:contains('Not subscribed')",
        }, {
            content: "List3 is present, opt-outed (test starting data)",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Not subscribed')",
        }, {
            content: "List2 is proposed (not member -> proposal to join)",
            trigger: "ul#o_mailing_subscription_form_lists_additional li.list-group-item:contains('List2')",
        }, {
            content: "List4 is not proposed (not member but not private)",
            trigger: "ul#o_mailing_subscription_form_lists_additional:not(:has(li.list-group-item:contains('List4')))",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "This should disable the 'Update my subscriptions' (Apply changes) button",
            trigger: "div#o_mailing_subscription_blocklist:not(button#button_form_send)",
            isCheck: true,
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        },  {
            content: "'Update my subscriptions' button usable again",
            trigger: "button#button_form_send:not([disabled])",
            isCheck: true,
        }, {
            content: "Choose the mailing list 3 to come back",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List3']",
        }, {
            content: "Add list 2",
            trigger: "ul#o_mailing_subscription_form_lists_additional input[title='List2']",
        }, {
            content: "Update subscription",
            trigger: "button#button_form_send",
        }, {
            content: "Confirmation changes are done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Membership updated')",
        }, {
            content: "List 3 is noted as subscribed again",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Subscribed')",
        }, {
            content: "List 2 has joined the subscriptions",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List2') span:contains('Subscribed')",
        }, {
            content: "No list in proposals",
            trigger: "div#o_mailing_subscription_form_manage:not(:has(ul#o_mailing_subscription_form_lists_additional))",
        }, {
            content: "Feedback area is not displayed (nothing opt-out or no blocklist done, no feedback required)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
            extra_trigger: "div#o_mailing_portal_subscription:not(fieldset)",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "Should display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List2')",
            extra_trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List3')",
        }, {
            content: "Give a reason for blocklist (first one)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_my.js  *
*  Lines: 117                                                                        *
*************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_my', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: use 'my' portal page of mailing to manage mailing lists subscription
 * as well as manage blocklist (add / remove my own email from block list).
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_my', {
    test: true,
    steps: () => [
       {
            content: "List1 is present, opt-in member",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List1') span:contains('Subscribed')",
        }, {
            content: "List3 is present, opt-outed (test starting data)",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Not subscribed')",
        }, {
            content: "List2 is proposed (not member -> proposal to join)",
            trigger: "ul#o_mailing_subscription_form_lists_additional li.list-group-item:contains('List2')",
        }, {
            content: "List4 is not proposed (not member but not private)",
            trigger: "ul#o_mailing_subscription_form_lists_additional:not(:has(li.list-group-item:contains('List4')))",
        },{
            content: "List5 is not proposed (not member and not public)",
            trigger: "body:not(:has(li.list-group-item:contains('List5')))",
        }, {
            content: "Feedback area is not displayed (nothing done, no feedback required)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
            extra_trigger: "div#o_mailing_portal_subscription:not(fieldset)",
        }, {
            content: "List3: come back (choose to opt-in instead of opt-out)",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List3']",
        }, {
            content: "List2: join (opt-in, not already member)",
            trigger: "ul#o_mailing_subscription_form_lists_additional input[title='List2']",
        }, {
            content: "List1: opt-out",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List1']",
        }, {
            content: "Update subscription",
            trigger: "button#button_form_send",
        }, {
            content: "Confirmation changes are done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Membership updated')",
        }, {
            content: "Should make feedback reasons choice appear (feedback still not displayed, linked to reasons)",
            trigger: "div#o_mailing_portal_subscription fieldset",
            extra_trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose first reason, which should not display feedback (see data)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Once sent feedback area is readonly",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason[disabled]",
            extra_trigger: "textarea[disabled]",
            isCheck: true,
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "This should disable the 'Update my subscriptions' (Apply changes) button",
            trigger: "div#o_mailing_subscription_blocklist:not(button#button_form_send)",
            isCheck: true,
        }, {
            content: "This should enabled Feedback again",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List2')",
            extra_trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List3')",
        }, {
            content: "Give a reason for blocklist (first one)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/*************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mass_mailing_code_view.js  *
*  Lines: 72                                                             *
*************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mass_mailing_code_view', ['@odoo/owl', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { markup } = require("@odoo/owl");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('mass_mailing_code_view_tour', {
    url: '/web?debug=tests',
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        }, {
            trigger: 'button.o_list_button_add',
        }, {
            trigger: 'input#subject_0',
            content: markup('Pick the <b>email subject</b>.'),
            position: 'bottom',
            run: 'text Test'
        }, {
            trigger: 'div[name="contact_list_ids"] .o_input_dropdown input[type="text"]',
            content: 'Click on the dropdown to open it and then start typing to search.',
        }, {
            trigger: 'div[name="contact_list_ids"] .ui-state-active',
            content: 'Select item from dropdown',
            run: 'click',
        }, {
            trigger: 'div[name="body_arch"] iframe #default',
            content: markup('Choose this <b>theme</b>.'),
            run: 'click',
        }, {
            trigger: 'iframe .o_codeview_btn',
            content: markup('Click here to switch to <b>code view</b>'),
            run: 'click'
        }, {
            trigger: 'iframe .o_codeview',
            content: ('Remove all content from codeview'),
            run: function () {
                const iframe = document.querySelector('.wysiwyg_iframe');
                const iframeDocument = iframe.contentWindow.document;
                let element = iframeDocument.querySelector(".o_codeview");
                element.value = '';
            }
        }, {
            trigger: 'iframe .o_codeview_btn',
            content: markup('Click here to switch back from <b>code view</b>'),
            run: 'click'
        }, {
            trigger: '[name="body_arch"] iframe .o_mail_wrapper_td',
            content: 'Verify that the dropable zone was not removed',
            run: () => {},
        }, {
            trigger: '[name="body_arch"] iframe #email_designer_default_body [name="Title"] .oe_snippet_thumbnail',
            content: 'Drag the "Title" snippet from the design panel and drop it in the editor',
            run: function (actions) {
                actions.drag_and_drop_native('[name="body_arch"] iframe .o_editable', this.$anchor);
            }
        }, {
            trigger: '[name="body_arch"] iframe .o_editable h1',
            content: 'Verify that the title was inserted properly in the editor',
            run: () => {},
        },
        ...stepUtils.discardForm(),
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_tabs.js  *
*  Lines: 59                                                                 *
*****************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_tabs', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_tabs', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
    },
    {
        content: "Click on the 'Start From Scratch' template.",
        trigger: 'iframe #empty',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        trigger: 'iframe .oe_structure.o_mail_no_options',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Verify that the customize panel is not empty.",
        trigger: 'iframe .o_we_customize_panel .snippet-option-DesignTab',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: 'iframe .o_we_customize_snippet_btn',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Verify that the customize panel is not empty.",
        trigger: 'iframe .o_we_customize_panel .snippet-option-DesignTab',
        run: () => null, // it's a check
    },
    ...stepUtils.discardForm(),
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_toolbar.js  *
*  Lines: 84                                                                    *
********************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_toolbar', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_toolbar', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
    },
    {
        content: "Wait for the theme selector to load.",
        trigger: 'iframe .o_mail_theme_selector_new',
    },
    {
        content: "Make sure there does not exist a floating toolbar",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (iframeDocument.querySelector('#toolbar.oe-floating')) {
                console.error('There should not be a floating toolbar in the iframe');
            }
        },
    },
    {
        content: "Make sure the empty template is an option on non-mobile devices.",
        trigger: 'iframe #empty',
        run: () => null,
    },
    {
        content: "Click on the default 'welcome' template.",
        trigger: 'iframe #default',
    },
    { // necessary to wait for the cursor to be placed in the first p
      // and to avoid leaving the page before the selection is added
        content: "Wait for template selection event to be over.",
        trigger: 'iframe .o_editable.theme_selection_done',
    },
    {
        content: "Make sure the snippets menu is not hidden",
        trigger: 'iframe #oe_snippets:not(.d-none)',
        run: () => null,
    },
    {
        content: "Wait for .s_text_block to be populated",
        trigger: 'iframe .s_text_block p',
        run: () => null,
    },
    {
        content: "Click and select p block inside the editor",
        trigger: 'iframe',
        run: function () {
            const iframeWindow = this.$anchor[0].contentWindow;
            const iframeDocument = iframeWindow.document;
            const p = iframeDocument.querySelector('.s_text_block p');
            p.click();
            const selection = iframeWindow.getSelection();
            const range = iframeDocument.createRange();
            range.selectNodeContents(p);
            selection.removeAllRanges();
            selection.addRange(range);
        },
    },
    {
        content: "Make sure the toolbar is there",
        trigger: 'iframe #oe_snippets .o_we_customize_panel #toolbar',
        run: () => null,
    },
    ...stepUtils.discardForm(),
    ],
});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_toolbar_mobile.js  *
*  Lines: 75                                                                           *
***************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_toolbar_mobile', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_toolbar_mobile', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
        mobile: true,
    },
    {
        content: "Check templates available in theme selector",
        trigger: 'iframe .o_mail_theme_selector_new',
        run: function () {
            if (this.$anchor[0].querySelector('#empty')) {
                console.error('The empty template should not be visible on mobile.');
            }
        },
        mobile: true,
    },
    {
        content: "Make sure the toolbar isn't floating",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (iframeDocument.querySelector('#toolbar.oe-floating')) {
                console.error('There should not be a floating toolbar in the iframe');
            }
        },
        mobile: true,
    },
    {
        content: "Click on the 'Start From Scratch' template.",
        trigger: 'iframe #default',
        mobile: true,
    },
    {
        content: "Select an editable element",
        trigger: 'iframe .s_text_block',
        mobile: true,
    },
    {
        content: "Make sure the snippets menu is hidden",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (!iframeDocument.querySelector('#oe_snippets.d-none')) {
                console.error('The snippet menu should be hidden');
            }
        },
        mobile: true,
    },
    {
        content: "Make sure the toolbar is there",
        trigger: 'iframe #toolbar.oe-floating',
        run: () => null, // it's a check
        mobile: true,
    },
    ...stepUtils.discardForm().map(command => ({...command, mobile: true})),
    ]
});

return __exports;
});
;

/*********************************************************
*  Filepath: /hr/static/tests/tours/hr_employee_flow.js  *
*  Lines: 36                                             *
*********************************************************/
odoo.define('@hr/../tests/tours/hr_employee_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('hr_employee_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
        run: 'click',
    },
    {
        content: "Open an Employee Profile",
        trigger: ".o_kanban_record_title:contains('Johnny H.')",
        run: 'click',
    },
    {
        content: "Open user account menu",
        trigger: ".o_user_menu .dropdown-toggle",
        run: 'click',
    }, {
        content: "Open My Profile",
        trigger: "[data-menu=settings]",
        run: 'click',
    },
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 37                                                         *
*********************************************************************/
odoo.define('@hr/../tests/tours/user_modify_own_profile_tour', ['@web_tour/tour_service/tour_utils', '@web/core/registry', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { registry } = require("@web/core/registry");
const { patch } = require("@web/core/utils/patch");

/**
 * As 'hr' changes the flow a bit and displays the user preferences form in a full view instead of
 * a modal, we adapt the steps of the original tour accordingly.
 */
patch(registry.category("web_tour.tours").get("mail/static/tests/tours/user_modify_own_profile_tour.js"), {
    steps() {
        return [
            {
                content: 'Open user account menu',
                trigger: '.o_user_menu button',
            }, 
            {
                content: "Open preferences / profile screen",
                trigger: '[data-menu=settings]',
            }, 
            {
                content: "Update the email address",
                trigger: 'div[name="email"] input',
                run: 'text updatedemail@example.com',
            }, 
            ...stepUtils.saveForm(),
        ];
    }
});


return __exports;
});
;

/*********************************************************************
*  Filepath: /hr_expense/static/tests/tours/expense_upload_tours.js  *
*  Lines: 119                                                        *
*********************************************************************/
odoo.define('@hr_expense/../tests/tours/expense_upload_tours', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('hr_expense_test_tour', {
        test: true,
        url: "/web",
        steps: () => [stepUtils.showAppsMenuItem(),
        {
            content: "Go to Expense",
            trigger: '.o_app[data-menu-xmlid="hr_expense.menu_hr_expense_root"]',
        },
        {
            content: "Check Upload Button",
            trigger: '.o_button_upload_expense',
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in My Expenses to Report > List View');
                }
            }
        },
        {
            content: "Check Create Report Button, but not click on it",
            trigger: "button.o_switch_view.o_list.active",
            run() {
                const button = Array.from(document.querySelectorAll('.btn-secondary'))
                    .filter(element => element.textContent.includes('Create Report'));
                if(!button) {
                    console.error('Missing Create Report button in My Expenses to Report > List View');
                }
            }
        },
        {
            content: "Go to kanban view",
            trigger: "button.o_switch_view.o_kanban",
        },
        {
            content: "Check Upload Button",
            trigger: "button.o_switch_view.o_kanban.active",
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in My Expenses to Report > Kanban View');
                }
            }
        },
        {
            content: "Check Create Report Button, but not click on it",
            trigger: "button.o_switch_view.o_kanban.active",
            run() {
                const button = Array.from(document.querySelectorAll('.btn-secondary'))
                    .filter(element => element.textContent.includes('Create Report'));
                if(!button) {
                    console.error('Missing Create Report button in My Expenses to Report > Kanban View');
                }
            }
        },
        {
            content: "Go to Reporting",
            trigger: 'button[data-menu-xmlid="hr_expense.menu_hr_expense_reports"]',
        },
        {
            content: "Go to Expenses Analysis",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_all_expenses"]',
        },
        {
            content: "Go to list view",
            trigger: "button.o_switch_view.o_list",
        },
        {
            content: "Check Upload Button",
            trigger: "button.o_switch_view.o_list.active",
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in Expenses Analysis > List View');
                }
            }
        },
    ]});

    registry.category("web_tour.tours").add('hr_expense_access_rights_test_tour', {
        test: true,
        url: "/web",
        steps: () => [stepUtils.showAppsMenuItem(),
        {
            content: "Go to Expense",
            trigger: '.o_app[data-menu-xmlid="hr_expense.menu_hr_expense_root"]',
        },
        {
            content: "Go to My Expenses",
            trigger: 'button[data-menu-xmlid="hr_expense.menu_hr_expense_my_expenses"]',
        },
        {
            content: "Go to My Reports",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_sheet_my_reports"]',
        },
        {
            content: "Go to First Expense for employee",
            trigger: 'td[data-tooltip="First Expense for employee"]',
        },
        {
            content: "Click Submit to Manager Button",
            trigger: '.o_expense_sheet_submit',
        },
        {
            content: 'Verify the expene sheet is submitted',
            trigger: '.o_arrow_button_current:contains("Submitted")',
            isCheck: true,
        },
    ]});

return __exports;
});
;

/*******************************************************************
*  Filepath: /hr_expense/static/tests/tours/expense_form_tours.js  *
*  Lines: 55                                                       *
*******************************************************************/
odoo.define('@hr_expense/../tests/tours/expense_form_tours', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('create_expense_no_employee_access_tour', {
    test: true,
    url: "/web",
    steps: () => [
    ...stepUtils.goToAppSteps('hr_expense.menu_hr_expense_root', "Go to the Expenses app"),
    {
        content: "Remove filter for own expenses",
        trigger: '.o_facet_value:contains(My Expense) + button[title="Remove"]',
    },
    {
        content: "Go to form view of pre-prepared record",
        trigger: '.o_data_cell:contains(expense_for_tour_0)'
    },
    {
        content: "Click employee selection dropdown",
        trigger: 'input#employee_id_0',
    },
    {
        content: "Delete default search",
        trigger: 'input#employee_id_0',
        run() {
            const dropdown = document.querySelector('input#employee_id_0');
            dropdown.value = '';
        }
    },
    {
        content: "Select test expense employee",
        trigger: 'a.dropdown-item:contains(expense_employee)',
    },
    {
        content: "Save",
        trigger: '.o_form_button_save',
    },
    {
        content: "Exit form",
        trigger: '.o_menu_brand',
    },
    stepUtils.showAppsMenuItem(),
    {
        content: "Check",
        trigger: '.o_app[data-menu-xmlid="hr_expense.menu_hr_expense_root"]',
        isCheck: true,
    },
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /web_enterprise/static/tests/tours/web_enterprise_tours.js  *
*  Lines: 26                                                             *
*************************************************************************/
odoo.define('@web_enterprise/../tests/tours/web_enterprise_tours', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry")

registry.category("web_tour.tours").add("web_enterprise.test_studio_list_upsell",
    {
        test: true,
        steps: () => [
            {
                trigger: ".o_list_view",
            },
            {
                trigger: ".o_optional_columns_dropdown > button",
            },
            {
                trigger: ".o_optional_columns_dropdown .dropdown-item-studio",
                isCheck: true,
            },
        ]
    }
);

return __exports;
});
;

/**********************************************************************
*  Filepath: /documents/static/tests/tours/documents_delete_tours.js  *
*  Lines: 144                                                         *
**********************************************************************/
odoo.define('@documents/../tests/tours/documents_delete_tours', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function deleteWorspaceSteps() {
    return [
        {
            trigger: '.o_search_panel_label_title:contains("Workspace1")',
            content: "Open workspace",
            run: "click",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Workspace1")',
            content: "Move to mouse on the workspace to display the edit widget",
            run: async function () {
                const elements = document.querySelectorAll(".o_search_panel_label_title");
                elements.forEach((element) => {
                    if (element.textContent.includes("Workspace1")) {
                        const event = new MouseEvent("mouseenter", {
                            view: window,
                            bubbles: true,
                            cancelable: true,
                        });
                        element.dispatchEvent(event);
                    }
                });
                await document
                    .querySelector("header.active .o_documents_search_panel_section_edit")
                    .click();
            },
        },
        {
            trigger: ".o_search_panel_value_edit_edit",
            content: "Edit workspace",
        },
        {
            trigger: ".modal-footer .btn-outline-danger",
            content: "Delete workspace",
        },
        {
            trigger: "button:has(span:contains('Move to trash'))",
            content: "Confirm",
        },
    ];
}

function restoreDocumentSteps() {
    return [
        {
            trigger: '.o_search_panel_label_title:contains("Trash")',
            content: "Open trash",
            run: "click",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Trash")',
            content: "Check that we are in the trash",
            isCheck: true,
        },
        {
            trigger: ".o_record_selector",
            content: "Select document",
        },
        {
            trigger: ".o_inspector_button.o_archived",
            content: "Restore the document",
        },
    ];
}

registry.category("web_tour.tours").add("document_delete_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        // 1) Archive a document and restore it in an active folder
        {
            trigger: '.o_search_panel_label_title:contains("Workspace1")',
            content: "Open workspace",
            run: "click",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Workspace1")',
            extra_trigger: '.o_inspector_value:contains("1")',
            content: "Make sure we start with one card",
        },
        {
            trigger: ".o_record_selector",
            content: "Select document",
        },
        {
            trigger: ".o_inspector_button.o_inspector_archive",
            content: "Move document to trash",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Confirm deletion",
        },
        {
            trigger: ".o_kanban_renderer:not(:has(.o_kanban_record:not(.o_kanban_ghost)))",
            content: "Check that the document is no longer visible",
            isCheck: true,
        },
        ...restoreDocumentSteps(),
        // 2) Archive a folder (and this its documents) and restore the archived document
        ...deleteWorspaceSteps(),
        ...restoreDocumentSteps(),
        // 3) Archive a folder (and this its documents) and delete permanently the document
        ...deleteWorspaceSteps(),
        {
            trigger: '.o_search_panel_label_title:contains("Trash")',
            content: "Open trash",
            run: "click",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Trash")',
            content: "Check that we are in the trash",
            isCheck: true,
        },
        {
            trigger: ".o_record_selector",
            content: "Select document",
        },
        {
            trigger: ".o_inspector_button.o_inspector_delete",
            content: "Delete permanently the document",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Confirm deletion",
        },
    ],
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /documents/static/tests/tours/documents_folder_rights_tours.js  *
*  Lines: 41                                                                 *
*****************************************************************************/
odoo.define('@documents/../tests/tours/documents_folder_rights_tours', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("test_document_folder_rights_for_multi_company", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            run: "click",
        },
        {
            trigger: ".o_search_panel_label[data-tooltip='Workspace1']",
            run: "click",
        },
        {
            trigger: ".o_switch_company_menu > .dropdown-toggle",
            run: "click",
        },
        {
            trigger: "div.btn.btn-link[aria-label='Switch to Company_A']",
            run: "click",
        },
        {
            trigger: ".o_switch_company_menu:contains('Company_A')",
        },
        {
            contet: "Check that the workspace is not visible",
            trigger: ".o_search_panel_label_title:not(:contains('Workspace1'))",
        },
    ],
});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /maintenance/static/tests/tours/tour_calendar_with_recurrence.js  *
*  Lines: 79                                                                   *
*******************************************************************************/
odoo.define('@maintenance/../tests/tours/tour_calendar_with_recurrence', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("test_dblclick_event_from_calendar", {
    test: true,
    steps: () => [
        {
            content: "Enter event form",
            trigger: 'a[data-event-id="1"]',
            run: "dblclick",
        },
        {
            content: "Change the name of the form",
            trigger: "input#name_0",
            run: "text make your bed",
        },
        {
            content: "Return to calendar",
            trigger: ".o_back_button",
        },
        {
            content: "Move to next week",
            trigger: ".o_calendar_button_next"
        },
        {
            content: "Access occurrence",
            trigger: 'a[data-event-id="2"]',
            run: "dblclick",
        },
        {
            content: "Change equipment",
            trigger: "input#duration_0",
            run: "text 2:00"
        },
        {
            content: "Return to calendar",
            trigger: ".o_back_button",
        },
        {
            trigger: 'a[data-event-id="2"]',
            isCheck: true,
        }
    ],
});

registry.category("web_tour.tours").add("test_drag_and_drop_event_in_calendar", {
    test: true,
    steps: () => [
        {
            content: "Open calendar display selector",
            trigger: ".scale_button_selection",
        },
        {
            content: "Select monthly display",
            trigger: ".o_scale_button_month",
        },
        {
            trigger: '.fc-dayGridMonth-view',
            isCheck: true,
        },
        {
            content: "Move event to 15th of the month",
            trigger: 'a[data-event-id="1"]',
            run: 'drag_and_drop_native .fc-day.fc-widget-content[data-date$="15"]',
        },
        {
            content: "Move occurrence to 20th of the month (nothing should happen)",
            trigger: 'a[data-event-id="2"]',
            run: 'drag_and_drop_native .fc-day.fc-widget-content[data-date$="20"]',
        },
    ],
});

return __exports;
});
;

/*******************************************************************
*  Filepath: /sign/static/tests/tours/sign_request_shared_tour.js  *
*  Lines: 103                                                      *
*******************************************************************/
odoo.define('@sign/../tests/tours/sign_request_shared_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("shared_sign_request_tour", {
    test: true,
    url: "/web",
    steps: () => [
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_role"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Share the template",
            trigger: '.o_kanban_record_bottom:first button:contains("Share"):first',
            extra_trigger: '.oe_kanban_main:first span:contains("template_1_role")',
            run: "click",
        },
        {
            content: "Go on signing page",
            trigger: ".o_field_CopyClipboardChar",
            run: function () {
                const share_link = this.$anchor.contents()[0].firstChild.textContent;
                // Retrieve the link without the origin to avoid
                // mismatch between localhost:8069 and 127.0.0.1:8069
                // when running the tour with chrome headless
                const regex = "/sign/document/mail/.*";
                const url = share_link.match(regex)[0];
                window.location.href = window.location.origin + url;
            },
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Validate & Send Completed Document",
            trigger: ".o_validate_button",
            run: "click",
        },
        {
            content: "Fill name",
            trigger: "#o_sign_public_signer_name_input",
            extra_trigger: '.modal-title:contains("Final Validation")',
            run: "text Mitchell Admin",
        },
        {
            content: "Fill email",
            trigger: "#o_sign_public_signer_mail_input",
            run: "text mitchell.admin@public.com",
        },
        {
            content: "Validate & Send",
            trigger: '.modal-footer button:contains("Validate & Send")',
            run: "click",
        },
        {
            trigger: ".modal-title:contains(Thank you!)",
        },
        {
            content: "Download Document",
            trigger: "button.btn.btn-primary",
            run: "click",
        },
    ],
});

registry.category("web_tour.tours").add("sign_resend_expired_link_tour", {
    test: true,
    steps: () => [
        {
            trigger: "a:contains(Send a new link)",
        },
        {
            trigger: ".btn.btn-primary",
            content: "Click to resend the url",
            run: "click",
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /sign/static/tests/tours/sign_template_creation_tour.js  *
*  Lines: 189                                                         *
**********************************************************************/
odoo.define('@sign/../tests/tours/sign_template_creation_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function triggerDragEvent(element, type, data = {}) {
    const event = new DragEvent(type, { bubbles: true });
    for (const key in data) {
        Object.defineProperty(event, key, {
            value: data[key],
        });
    }
    element.dispatchEvent(event);
}

function dragAndDropSignItemAtHeight(type, page, height = 0.5, width = 0.5) {
    const iframe = document.querySelector("iframe");
    const iframeDocument = iframe.contentWindow.document;
    const signItemTypeButtons = iframeDocument.querySelectorAll(
        ".o_sign_field_type_toolbar_items .o_sign_field_type_button"
    );
    const from = Array.from(signItemTypeButtons).find((el) => el.innerText === type);

    const to = iframeDocument.querySelector(`.page[data-page-number="${page}"]`);
    const toPosition = to.getBoundingClientRect();
    toPosition.x += iframe.contentWindow.scrollX + to.clientWidth * width;
    toPosition.y += iframe.contentWindow.scrollY + to.clientHeight * height;

    const dataTransferObject = {};
    const dataTransferMock = {
        setData: (key, value) => {
            dataTransferObject[key] = value;
        },
        getData: (key) => {
            return dataTransferObject[key];
        },
        setDragImage: () => {},
    };

    triggerDragEvent(from, "dragstart", {
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(to, "drop", {
        pageX: toPosition.x,
        pageY: toPosition.y,
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(from, "dragend");
}

registry.category("web_tour.tours").add("sign_template_creation_tour", {
    test: true,
    url: "/web?debug=1",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign App",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "blank_template"',
            trigger: ".o_cp_searchview input",
            run: "text blank_template",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Enter Template Edit Mode",
            trigger: '.oe_kanban_main:first span:contains("blank_template")',
            run: "click",
        },
        {
            content: "Wait for iframe to load PDF",
            trigger: "iframe #viewerContainer",
            run: () => {},
        },
        {
            content: "Wait for page to be loaded",
            trigger: "iframe .page",
            run: () => {},
        },
        {
            content: "Drop Signature Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Signature", 1, 0.5, 0.25);
            },
        },
        {
            content: "Drop Name Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Name", 1, 0.25, 0.25);
            },
        },
        {
            content: "Drop Text Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Text", 1, 0.15, 0.25);
            },
        },
        {
            content: "Open popover on name sign item",
            trigger: 'iframe .o_sign_sign_item:contains("Name") .o_sign_item_display',
            run: "click",
        },
        {
            content: "Change responsible",
            trigger: ".o_popover .o_input_dropdown input",
            run: "text employee",
        },
        {
            content: "select employee",
            trigger: '.o_popover .o_input_dropdown .dropdown .dropdown-item:contains("Employee")',
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Drop Selection Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Selection", 1, 0.75, 0.25);
            },
        },
        {
            content: "Open popover on Selection sign item",
            trigger: 'iframe .o_sign_sign_item:contains("Selection") .o_sign_item_display',
            run: "click",
        },
        {
            content: "Write new selection option name",
            trigger: ".o_popover .o_input_dropdown input",
            run: "text option",
        },
        {
            content: "Create new selection option",
            trigger: '.o_popover .o_input_dropdown .dropdown a:contains("Create")',
        },
        {
            content: "Check option is added",
            trigger: '.o_popover #o_sign_select_options_input .o_tag_badge_text:contains("option")',
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Open popover on text sign item",
            trigger: "iframe .o_sign_sign_item:contains('Text') .o_sign_item_display",
        },
        {
            content: "Change text placeholder",
            trigger: ".o_popover .o_popover_placeholder input",
            run: "text placeholder",
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Change template name",
            trigger: ".o_sign_template_name_input",
            run: "text filled_template",
        },
        {
            trigger: ".breadcrumb .o_back_button",
        },
    ],
});

return __exports;
});
;

/************************************************************
*  Filepath: /sign/static/tests/tours/sign_widgets_tour.js  *
*  Lines: 85                                                *
************************************************************/
odoo.define('@sign/../tests/tours/sign_widgets_tour', ['@web/core/l10n/translation', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { _t } = require("@web/core/l10n/translation");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("sign_widgets_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: "click",
        },
        {
            content: "Users",
            trigger: "div#invite_users button.o_web_settings_access_rights",
            run: "click",
        },
        {
            content: "Mitchel",
            trigger: "table.o_list_table td.o_data_cell:contains(Admin)",
            run: "click",
        },

        {
            content: "Preference tab",
            trigger: 'a.nav-link:contains("' + _t("Preferences") + '")',
            run: "click",
        },
        {
            content: "Editor loaded",
            trigger: ".note-editable",
        },
        {
            content: "Click on widget sign",
            trigger: ".o_signature:first",
            run: "click",
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(3)",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(2)",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Adopt & Sign")',
            extra_trigger: "canvas.jSignature",
            run: function () {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        ...stepUtils.saveForm(),
    ],
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /sign/static/tests/tours/test_report_modal_tour.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@sign/../tests/tours/test_report_modal_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("sign_report_modal_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign app",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Open Reports menu",
            trigger: '.o_main_navbar button[data-menu-xmlid="sign.sign_reports"]',
            run: "click",
        },
        {
            content: "Open Green Savings Report",
            trigger: '.dropdown-item[data-menu-xmlid="sign.sign_report_green_savings"]',
            run: "click",
        },
        {
            content: "Open the modal",
            extra_trigger: 'iframe .green-savings-page a[data-bs-target=".modal_green_savings"]',
            trigger: 'iframe a:contains("How are these results calculated?")',
            run: "click",
        },
        {
            trigger: "iframe .modal_green_savings.show",
            run: () => {},
        },
    ],
});

return __exports;
});
;

/**************************************************************
*  Filepath: /sign/static/tests/tours/test_sign_flow_tour.js  *
*  Lines: 108                                                 *
**************************************************************/
odoo.define('@sign/../tests/tours/test_sign_flow_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("test_sign_flow_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_roles"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role(2)",
            position: "bottom",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "list view",
            trigger: "button.o_list",
            run: "click",
        },
        {
            content: "Click Sign Now",
            extra_trigger: '.o_list_button button:contains("Sign Now")',
            trigger: "button:contains('Sign Now')",
            run: "click",
        },
        {
            content: "Click sign",
            trigger: "button[name='sign_directly']",
            run: "click",
        },
        {
            content: "Click to start",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Click to start")',
            position: "bottom",
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Click next 1",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("next")',
            run: "click",
        },
        {
            content: "Click navigator",
            trigger: 'iframe .o_sign_sign_item_navigator',
            run: "click",
        },
        {
            trigger: "iframe button.o_sign_sign_item:has(> img)",
            extra_trigger: "iframe :not(:has(.o_sign_sign_item_navigator))",
            auto: true,
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Sign all")',
            extra_trigger: "canvas.jSignature",
            run() {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        {
            content: "Validate & Send Completed Document",
            extra_trigger: ".o_sign_validate_banner",
            trigger: "button:contains('Validate & Send Completed Document')",
            run: "click",
        },
        {
            content: "view",
            extra_trigger: ".modal-dialog",
            trigger: ".modal-footer button.btn-primary",
            alt_trigger: ".modal-footer button.btn-secondary",
            run: "click",
        },
    ],
});

return __exports;
});
;

/***************************************************************************
*  Filepath: /sign/static/tests/tours/translate_sign_instructions_tour.js  *
*  Lines: 20                                                               *
***************************************************************************/
odoo.define('@sign/../tests/tours/translate_sign_instructions_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("translate_sign_instructions", {
    test: true,
    steps: () => [
        {
            content: "Translations must be loaded",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Cliquez pour commencer")',
            run: () => null, // it's a check
        },
    ],
});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /website_profile/static/tests/tours/tour_website_profile_description.js  *
*  Lines: 33                                                                          *
**************************************************************************************/
odoo.define('@website_profile/../tests/tours/tour_website_profile_description', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_profile_description', {
    test: true,
    url: "/profile/users",
    steps: () => [{
        content: "Click on one user profile card",
        trigger: "div[onclick]:contains(\"test_user\")",
    }, {
        content: "Edit profile",
        trigger: "a:contains('EDIT PROFILE')",
    }, {
        content: "Add some content",
        trigger: ".odoo-editor-editable p",
        run: "text content <p>code here</p>",
    }, {
        content: "Save changes",
        trigger: "button:contains('Update')",
    }, {
        content: "Check the content is saved",
        trigger:
            "span[data-oe-field='website_description']:contains('content <p>code here</p>')",
        run: () => { },
    }]
})

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_slides/static/tests/tours/slide_course_publisher_standard.js  *
*  Lines: 105                                                                       *
************************************************************************************/
odoo.define('@website_slides/../tests/tours/slide_course_publisher_standard', ['@website_slides/../tests/tours/slides_tour_tools', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const slidesTourTools = require('@website_slides/../tests/tours/slides_tour_tools')[Symbol.for("default")];
const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

/**
 * Global use case:
 * a user (website publisher) creates a course;
 * they update it;
 * they create some lessons in it;
 * they publish it;
 */
wTourUtils.registerWebsitePreviewTour('course_publisher_standard', {
    url: '/slides',
    test: true,
}, () => [{
    content: 'eLearning: click on New (top-menu)',
    trigger: 'div.o_new_content_container a'
}, {
    content: 'eLearning: click on New Course',
    trigger: '#o_new_content_menu_choices a:contains("Course")'
}, {
    content: 'eLearning: set name',
    trigger: 'div[name="name"] input',
    run: 'text How to Déboulonnate',
}, {
    content: 'eLearning: click on tags',
    trigger: '.o_field_many2many_tags input',
    run: 'text Gard',
}, {
    content: 'eLearning: select Gardening tag',
    trigger: '.ui-autocomplete a:contains("Gardening")',
    in_modal: false,
}, {
    content: 'eLearning: set description',
    trigger: '.o_field_html[name="description"]',
    run: 'text Déboulonnate is very common at Fleurus',
}, {
    content: 'eLearning: we want reviews',
    trigger: '.o_field_boolean[name="allow_comment"] input',
}, {
    content: 'eLearning: seems cool, create it',
    trigger: 'button:contains("Save")',
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'eLearning: double click image to edit it',
    trigger: 'iframe img.o_wslides_course_pict',
    run: 'dblclick',
}, {
    content: 'eLearning: click "Add URL" to trigger URL box',
    trigger: '.o_upload_media_url_button',
}, {
    content: 'eLearning: add a bioutifoul URL',
    trigger: 'input.o_we_url_input',
    run: 'text https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/ThreeTimeAKCGoldWinnerPembrookeWelshCorgi.jpg/800px-ThreeTimeAKCGoldWinnerPembrookeWelshCorgi.jpg'
}, {
    content: 'eLearning: click "Add URL" really adding image',
    trigger: '.o_upload_media_url_button',
    extra_trigger: '.o_we_url_success',
}, {
    content: 'eLearning: is the Corgi set ?',
    trigger: 'iframe img.o_wslides_course_pict[data-original-src$="GoldWinnerPembrookeWelshCorgi.jpg"]',
}, {
    content: 'eLearning: save course edition',
    trigger: 'button[data-action="save"]',
}, {
    content: 'eLearning: course create with current member',
    extra_trigger: 'iframe body:not(.editor_enable)',  // wait for editor to close
    trigger: 'iframe .o_wslides_js_course_join:contains("You\'re enrolled")',
    run: function () {} // check membership
}
].concat(
    slidesTourTools.addExistingCourseTag(true),
    slidesTourTools.addNewCourseTag('The Most Awesome Course', true),
    slidesTourTools.addSection('Introduction', true),
    slidesTourTools.addArticleToSection('Introduction', 'MyArticle', true),
    [{
    content: "eLearning: check editor is loaded for article",
    trigger: 'iframe body.editor_enable',
    timeout: 30000,
    run: () => null, // it's a check
}, {
    content: "eLearning: save article",
    trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
}, {
    content: "eLearning: use breadcrumb to go back to channel",
    trigger: 'iframe .o_wslides_course_nav a:contains("Déboulonnate")',
}],
    slidesTourTools.addImageToSection('Introduction', 'Overview', true),
    slidesTourTools.addPdfToSection('Introduction', 'Exercise', true),
//     [
// {
//     content: 'eLearning: move new course inside introduction',
//     trigger: 'div.o_wslides_slides_list_drag',
//     // run: 'drag_and_drop div.o_wslides_slides_list_drag ul.ui-sortable:first',
//     run: 'drag_and_drop div.o_wslides_slides_list_drag a.o_wslides_js_slide_section_add',
// }]
));

return __exports;
});
;

/*************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_member.js  *
*  Lines: 166                                                            *
*************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_member', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/**
 * Global use case:
 * an user (either employee, website restricted editor or portal) joins a public
    course;
 * they have access to the full course content when they are a member of the
    course;
 * they use fullscreen player to complete the course;
 * they rate the course;
 */
registry.category("web_tour.tours").add('course_member', {
    url: '/slides',
    test: true,
    steps: () => [
// eLearning: go on free course and join it
{
    trigger: 'a:contains("Basics of Gardening - Test")'
}, {
    trigger: 'a:contains("Join this Course")'
}, {
    trigger: '.o_wslides_js_course_join:contains("You\'re enrolled")',
    run: function () {} // check membership
}, {
    trigger: 'a:contains("Gardening: The Know-How")',
},
// eLearning: follow course by cliking on first lesson and going to fullscreen player
{
    trigger: '.o_wslides_fs_slide_name:contains("Home Gardening")',
    run: 'click',
},
// eLearning: share the first slide
{
    trigger: '.o_wslides_fs_share'
}, {
    trigger: '.o_wslides_js_share_email input',
    run: 'text friend@example.com'
}, {
    trigger: '.o_wslides_js_share_email button',
}, {
    trigger: '.o_wslides_js_share_email:contains("Sharing is caring")',
    run: function () {}  // check email has been sent
}, {
    trigger: '.modal-footer button:contains("Close")',
},
// eLeaning: course completion
{
    trigger: '.o_wslides_fs_sidebar_header',
    run: function () {
        // check navigation with arrow keys
        var event = jQuery.Event("keydown");
        event.key = "ArrowLeft";
        // go back once
        $(document).trigger(event);
        // check that it selected the previous tab
        if ($('.o_wslides_fs_sidebar_list_item.active:contains("Gardening: The Know-How")').length === 0) {
            return;
        }
        // getting here means that navigation worked
        $('.o_wslides_fs_sidebar_header').addClass('navigation-success-1');
    }
}, {
    trigger: '.o_wslides_fs_sidebar_header.navigation-success-1',
    extra_trigger: '.o_wslides_progress_percentage:contains("40")',
    run: function () {
        // check navigation with arrow keys
        var event = jQuery.Event("keydown");
        event.key = "ArrowRight";
        $(document).trigger(event);
        // check that it selected the next/next tab
        if ($('.o_wslides_fs_sidebar_list_item.active:contains("Home Gardening")').length === 0) {
            return;
        }
        // getting here means that navigation worked
        $('.o_wslides_fs_sidebar_header').addClass('navigation-success-2');
    }
}, {
    trigger: '.o_wslides_progress_percentage:contains("40")',
    run: function () {} // check progression
}, {
    trigger: '.o_wslides_fs_sidebar_header.navigation-success-2',
    extra_trigger: '.o_wslides_progress_percentage:contains("40")',
    run: function () {
        // check navigation with arrow keys
        var event = jQuery.Event("keydown");
        event.key = "ArrowRight";
        setTimeout(function () {
            $(document).trigger(event);
            // check that it selected the next/next tab
            if ($('.o_wslides_fs_sidebar_list_item.active:contains("Mighty Carrots")').length === 0) {
                return;
            }
            // getting here means that navigation worked
            $('.o_wslides_fs_sidebar_header').addClass('navigation-success-3');
        }, 300);
    }
}, {
    trigger: '.o_wslides_progress_percentage:contains("60")',
    run: function () {} // check progression
}, {
    trigger: '.o_wslides_fs_sidebar_header.navigation-success-3',
    extra_trigger: '.o_wslides_progress_percentage:contains("60")',
    run: function () {} // check that previous step succeeded
}, {
    trigger: '.o_wslides_fs_slide_name:contains("How to Grow and Harvest The Best Strawberries | Basics")',
    run: 'click',
}, {
    trigger: '.o_wslides_fs_sidebar_section_slides li:contains("How to Grow and Harvest The Best Strawberries | Basics") .o_wslides_slide_completed',
    run: function () {} // check that video slide is marked as 'done'
}, {
    trigger: '.o_wslides_progress_percentage:contains("80")',
    run: function () {} // check progression
},
// eLearning: last slide is a quiz, complete it
{
    trigger: '.o_wslides_fs_slide_name:contains("Test your knowledge")',
    run: 'click',
}, {
    trigger: '.o_wslides_js_lesson_quiz_question:first .list-group a:first'
}, {
    trigger: '.o_wslides_js_lesson_quiz_question:last .list-group a:first'
}, {
    trigger: '.o_wslides_js_lesson_quiz_submit'
}, {
    // check that we have a properly motivational message to motivate us!
    trigger: '.o_wslides_quiz_modal_rank_motivational > div > div:contains("Reach the next rank and gain a very nice mug!")'
}, {
    trigger: 'a:contains("End course")'
},
// eLearning: ending course redirect to /slides, course is completed now
{
    trigger: 'div:contains("Basics of Gardening") span:contains("Completed")',
    run: function () {} // check that the course is marked as completed
},
// eLearning: go back on course and rate it (new rate or update it, both should work)
{
    trigger: 'a:contains("Basics of Gardening")'
}, {
    trigger: 'button[data-bs-target="#ratingpopupcomposer"]'
}, {
    trigger: 'div.o_portal_chatter_composer_input i.fa:eq(2)',
    extra_trigger: 'div.modal_shown',
    run: 'click',
    in_modal: false,
}, {
    trigger: 'div.o_portal_chatter_composer_input textarea',
    run: 'text This is a great course. Top !',
    in_modal: false,
}, {
    trigger: 'button.o_portal_chatter_composer_btn',
    in_modal: false,
}, {
    trigger: 'a[id="review-tab"]'
}, {
    trigger: '.o_portal_chatter_message:contains("This is a great course. Top !")',
    run: function () {}, // check review is correctly added
}
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_member_invited_logged.js  *
*  Lines: 38                                                                            *
****************************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_member_invited_logged', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require('@web/core/registry');


registry.category('web_tour.tours').add('invite_check_channel_preview_as_logged', {
    test: true,
    steps: () => [
{
    trigger: 'a:contains("Gardening: The Know-How")',
    content: 'Check that the previews are accessible',
    run: function () {}
}, {
    trigger: '.o_wslides_slides_list_slide:contains("Home Gardening")',
    content: 'Check that other slides are not accessible',
    run: function () {
        if (this.$anchor[0].querySelector('.o_wslides_js_slides_list_slide_link')) {
            throw new Error('Invited attendee should not see non-preview slides');
        }
    }
}, {
    trigger: 'a:contains("Join this Course")',
}, {
    trigger: '.o_wslides_js_course_join:contains("You\'re enrolled")',
    content: 'Check that user is enrolled',
    run: function () {}
}, {
    trigger: '.o_wslides_js_slides_list_slide_link:contains("Home Gardening")',
    content: 'Check that slides are now accessible',
    run: function () {}
},
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_member_invited_public.js  *
*  Lines: 46                                                                            *
****************************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_member_invited_public', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require('@web/core/registry');


registry.category('web_tour.tours').add('invite_check_channel_preview_as_public', {
    test: true,
    steps: () => [
{
    trigger: '.o_wslides_identification_banner',
    content: 'Check that there is an identification banner',
    run: function () {}
}, {
    trigger: '.o_wslides_slides_list_slide:contains("Gardening: The Know-How")',
    run: function () {
        if (this.$anchor[0].querySelector('.o_wslides_js_slides_list_slide_link')) {
            throw new Error('The preview should not allow the public user to browse slides');
        }
    }
}, {
    trigger: 'a:contains("Join this Course")',
}, {
    trigger: 'a:contains("login")',
}, {
    trigger: 'input[id="password"]',
    run: 'text portal',
}, {
    trigger: 'button:contains("Log in")',
}, {
    trigger: 'a:contains("Join this Course")',
}, {
    trigger: '.o_wslides_js_course_join:contains("You\'re enrolled")',
    content: 'Check that user is enrolled',
    run: function () {}
}, {
    trigger: '.o_wslides_js_slides_list_slide_link:contains("Gardening: The Know-How")',
    content: 'Check that slides are now accessible',
    run: function () {}
}
]});

return __exports;
});
;

/****************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_member_yt.js  *
*  Lines: 80                                                                *
****************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_member_yt', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

function patchFullScreen(){
    /**
     * Alter this method for test purposes.
     * This will make the video start at 10 minutes.
     * As it lasts 10min24s, it will mark it as completed immediately.
    */
    const FullScreen = odoo.loader.modules.get('@website_slides/js/slides_course_fullscreen_player')[Symbol.for("default")];
    FullScreen.include({
        _renderSlide: function () {

            var slide = this.get('slide');
            slide.embedUrl += '&start=260';
            this.set('slide', slide);

            return this._super.call(this, arguments);
        }
    });
}


/**
 * Global use case:
 * an user (either employee, website restricted editor or portal) joins a public
    course;
 * they have access to the full course content when they are a member of the
    course;
 * they use fullscreen player to complete the course;
 * they rate the course;
 */
registry.category("web_tour.tours").add('course_member_youtube', {
    url: '/slides',
    test: true,
    steps: () => [
{
    content: "Patching FullScreen",
    trigger: 'body',
    run: function() {
        patchFullScreen()
    }
},
// eLearning: go on /all, find free course and join it
{
    trigger: 'a.o_wslides_home_all_slides'
}, {
    trigger: 'a:contains("Choose your wood")'
}, {
    trigger: 'a:contains("Join this Course")'
}, {
    trigger: '.o_wslides_js_course_join:contains("You\'re enrolled")',
    run: function () {} // check membership
}, {
    trigger: 'a:contains("Comparing Hardness of Wood Species")',
},  {
    trigger: '.o_wslides_progress_percentage:contains("50")',
    run: function () {} // check progression
}, {
    trigger: '.o_wslides_fs_slide_name:contains("Wood Bending With Steam Box")',
}, {
    trigger: '.player',
    run: function () {} // check player loading
}, {
    trigger: '.o_wslides_fs_sidebar_section_slides li:contains("Wood Bending With Steam Box") .o_wslides_slide_completed',
    run: function () {} // check that video slide is marked as 'done'
}, {
    trigger: '.o_wslides_channel_completion_completed:contains(Completed)',
    run: function () {} // check progression
}, {
    trigger: 'a:contains("Back to course")'
}
]});

return __exports;
});
;

/****************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_publisher.js  *
*  Lines: 103                                                               *
****************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_publisher', ['@website/js/tours/tour_utils', '@website_slides/../tests/tours/slides_tour_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];
const slidesTourTools = require('@website_slides/../tests/tours/slides_tour_tools')[Symbol.for("default")];

/**
 * Global use case:
 * a user (website restricted editor) creates a course;
 * they update it;
 * they create some lessons in it;
 * they publishe it;
 */
wTourUtils.registerWebsitePreviewTour('course_publisher', {
    // TODO: replace by wTourUtils.getClientActionURL when it's added
    url: '/slides',
    test: true
}, () => [{
    content: 'eLearning: click on New (top-menu)',
    trigger: 'div.o_new_content_container a',
}, {
    content: 'eLearning: click on New Course',
    trigger: '#o_new_content_menu_choices a:contains("Course")'
}, {
    content: 'eLearning: set name',
    trigger: 'div[name="name"] input',
    run: 'text How to Déboulonnate',
    in_modal: true,
}, {
    content: 'eLearning: click on tags',
    trigger: '.o_field_many2many_tags input',
    run: 'text Gard',
    in_modal: true,
}, {
    content: 'eLearning: select gardener tag',
    trigger: '.ui-autocomplete a:contains("Gardener")',
    in_modal: true,
}, {
    content: 'eLearning: set description',
    trigger: '.o_field_html[name="description"]',
    run: 'text Déboulonnate is very common at Fleurus',
    in_modal: true,
}, {
    content: 'eLearning: we want reviews',
    trigger: '.o_field_boolean[name="allow_comment"] input',
}, {
    content: 'eLearning: seems cool, create it',
    trigger: 'button:contains("Save")',
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'eLearning: double click image to edit it',
    trigger: 'iframe img.o_wslides_course_pict',
    run: 'dblclick',
}, {
    content: 'eLearning: click "Add URL" to trigger URL box',
    trigger: '.o_upload_media_url_button',
}, {
    content: 'eLearning: add a bioutifoul URL',
    trigger: 'input.o_we_url_input',
    run: 'text https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/ThreeTimeAKCGoldWinnerPembrookeWelshCorgi.jpg/800px-ThreeTimeAKCGoldWinnerPembrookeWelshCorgi.jpg'
}, {
    content: 'eLearning: click "Add URL" really adding image',
    trigger: '.o_upload_media_url_button',
    extra_trigger: '.o_we_url_success',
}, {
    content: 'eLearning: is the Corgi set ?',
    trigger: 'iframe img.o_wslides_course_pict[data-original-src$="GoldWinnerPembrookeWelshCorgi.jpg"]',
}, {
    content: 'eLearning: save course edition',
    trigger: 'button[data-action="save"]',
}, {
    content: 'eLearning: course create with current member',
    extra_trigger: 'iframe body:not(.editor_enable)',  // wait for editor to close
    trigger: 'iframe .o_wslides_js_course_join:contains("You\'re enrolled")',
    run: function () {} // check membership
}
].concat(
    slidesTourTools.addExistingCourseTag(true),
    slidesTourTools.addNewCourseTag('The Most Awesome Course', true),
    slidesTourTools.addSection('Introduction', true),
    slidesTourTools.addVideoToSection('Introduction', false, true),
    [{
    content: 'eLearning: publish newly added course',
    trigger: 'iframe span:contains("Dschinghis Khan - Dschinghis Khan (1979)")',  // wait for slide to appear
    // trigger: 'span.o_wslides_js_slide_toggle_is_preview:first',
    run: function () {
        $('.o_website_preview iframe').contents().find('span.o_wslides_js_slide_toggle_is_preview:first')[0].click();
    }
}]
//     [
// {
//     content: 'eLearning: move new course inside introduction',
//     trigger: 'div.o_wslides_slides_list_drag',
//     // run: 'drag_and_drop div.o_wslides_slides_list_drag ul.ui-sortable:first',
//     run: 'drag_and_drop div.o_wslides_slides_list_drag a.o_wslides_js_slide_section_add',
// }]
));

return __exports;
});
;

/**************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_course_reviews.js  *
*  Lines: 49                                                              *
**************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_course_reviews', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require('@web/core/registry');

/**
 * This tour test that a log note isn't considered
 * as a course review. And also that a member can
 * add only one review.
 */
registry.category('web_tour.tours').add('course_reviews', {
    url: '/slides',
    test: true,
    steps: () => [
{
    trigger: 'a:contains("Basics of Gardening - Test")',
}, {
    trigger: 'a[id="review-tab"]',
}, {
    trigger: '.o_portal_chatter_message:contains("Log note")',
    run: function() {},
}, {
    trigger: 'span:contains("Add Review")',
    // If it fails here, it means the log note is considered as a review
}, {
    trigger: 'div.o_portal_chatter_composer_body textarea',
    extra_trigger: 'div.modal_shown',
    run: 'text Great course!',
    in_modal: false,
}, {
    trigger: 'button.o_portal_chatter_composer_btn',
    in_modal: false,
}, {
    trigger: 'a[id="review-tab"]',
}, {
    trigger: 'label:contains("Public")',
}, {
    trigger: 'span:contains("Edit Review")',
    // If it fails here, it means the system is allowing you to add another review.
}, {
    trigger: 'div.o_portal_chatter_composer_body textarea:contains("Great course!")',
    run: function() {},
}
]});

return __exports;
});
;

/**********************************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_full_screen_web_editor.js  *
*  Lines: 38                                                                      *
**********************************************************************************/
odoo.define('@website_slides/../tests/tours/slides_full_screen_web_editor', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

/**
 * Global use case:
 * - a user (website restricted editor) lands on the fullscreen view of a course ;
 * - they click on the website editor "Edit" button ;
 * - they are redirected to the non-fullscreen view with the editor opened.
 *
 * This tour tests a fix made when editing a course in fullscreen view.
 * See "Fullscreen#_onWebEditorClick" for more information.
 *
 */
 wTourUtils.registerWebsitePreviewTour('full_screen_web_editor', {
    url: '/slides',
    test: true,
}, () => [{
    // open to the course
    trigger: 'iframe a:contains("Basics of Gardening")'
}, {
    // click on a slide to open the fullscreen view
    trigger: 'iframe a.o_wslides_js_slides_list_slide_link:contains("Home Gardening")'
}, {
    trigger: 'iframe .o_wslides_fs_main',
    run: function () {} // check we land on the fullscreen view
},
...wTourUtils.clickOnEditAndWaitEditMode()
, {
    trigger: 'iframe .o_wslides_lesson_main',
    run: function () {} // check we are redirected on the detailed view
}]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website_slides/static/tests/tours/slides_tour_tools.js  *
*  Lines: 303                                                         *
**********************************************************************/
odoo.define('@website_slides/../tests/tours/slides_tour_tools', ['@web/../tests/utils', '@web/core/utils/urls'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { contains } = require("@web/../tests/utils");
const { getDataURLFromFile } = require("@web/core/utils/urls");

/*
 * Constant
 */
const testPngImage = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAD0lEQVQIHQEEAPv/AIdaewLIAV0IjhGPAAAAAElFTkSuQmCC';
const testPdf = 'JVBERi0xLjEKJWPDtsO2bW1lbnQKMSAwIG9iago8PC9UeXBlIC9DYXRhbG9nCi9QYWdlcyAyIDAgUgo+PgplbmRvYmoKMiAwIG9iago8PC9UeXBlIC9QYWdlcwovS2lkcyBbMyAwIFJdCi9Db3VudCAxCi9NZWRpYUJveCBbMCAwIDIxMCAyOTddCj4+CmVuZG9iagozIDAgb2JqCjw8L1R5cGUgL1BhZ2UKL1BhcmVudCAyIDAgUgovUmVzb3VyY2VzCjw8L0ZvbnQKPDwvRjEKPDwvVHlwZSAvRm9udAovU3VidHlwZSAvVHlwZTEKL0Jhc2VGb250IC9UaW1lcy1Sb21hbgo+Pgo+Pgo+PgovQ29udGVudHMgNCAwIFIKPj4KZW5kb2JqCjQgMCBvYmoKPDwvTGVuZ3RoIDQ4Pj4Kc3RyZWFtCkJUCi9GMSA0OCBUZgo1MCAxMzAgVGQKKFRFU1QpIFRqCkVUCmVuZHN0cmVhbQplbmRvYmoKeHJlZgowIDUKMDAwMDAwMDAwMCA2NTUzNSBmCjAwMDAwMDAwMjEgMDAwMDAgbgowMDAwMDAwMDY5IDAwMDAwIG4KMDAwMDAwMDE0OSAwMDAwMCBuCjAwMDAwMDAyOTggMDAwMDAgbgp0cmFpbGVyCjw8L1Jvb3QgMSAwIFIKL1NpemUgNQo+PgpzdGFydHhyZWYKMzgxCiUlRU9G';

/*
 * PUBLISHER / CONTENT CREATION
 */

var addSection = function (sectionName, backend = false) {
	return [
{
    content: 'eLearning: click on Add Section',
    trigger: (backend ? 'iframe ' : '' ) + 'a.o_wslides_js_slide_section_add',
}, {
    content: 'eLearning: set section name',
    trigger: (backend ? 'iframe ' : '' ) + 'input[name="name"]',
    run: 'text ' + sectionName,
}, {
    content: 'eLearning: create section',
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Save")'
}, {
	content: 'eLearning: section created empty',
	trigger: (backend ? 'iframe ' : '' ) + 'div.o_wslides_slide_list_category_header:contains("' + sectionName + '")',
}];
};

var addVideoToSection = function (sectionName, saveAsDraft, backend = false) {
	var base_steps = [
{
	content: 'eLearning: add content to section',
	trigger: (backend ? 'iframe ' : '' ) + 'div.o_wslides_slide_list_category_header:contains("' + sectionName + '") a:contains("Add Content")',
}, {
	content: 'eLearning: click on video',
	trigger: (backend ? 'iframe ' : '' ) + 'a[data-slide-category=video]',
}, {
	content: 'eLearning: fill video link',
	trigger: (backend ? 'iframe ' : '' ) + 'input[name=video_url]',
	run: 'text https://www.youtube.com/watch?v=pzmI3vAIhbE',
}, {
    content: 'eLearning: click outside to trigger onchange',
    trigger: (backend ? 'iframe ' : '' ) + 'div.o_w_slide_upload_modal_container',
    run: ({ tip_widget }) => {
		tip_widget.$anchor[0].click();
	},
}];
	if (saveAsDraft) {
		base_steps = [].concat(base_steps, [{
    content: 'eLearning: save as draft slide',
    extra_trigger: (backend ? 'iframe ' : '' ) + 'div.o_slide_preview img:not([src="/website_slides/static/src/img/document.png"])',  // wait for onchange to perform its duty
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Save as Draft")',
}]);
	}
	else {
		base_steps = [].concat(base_steps, [{
    content: 'eLearning: create and publish slide',
    extra_trigger: (backend ? 'iframe ' : '' ) + 'div.o_slide_preview img:not([src="/website_slides/static/src/img/document.png"])',  // wait for onchange to perform its duty
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Publish")',
}]);
	}
	return base_steps;
};

var addArticleToSection = function (sectionName, pageName, backend) {
	return [
{
	content: 'eLearning: add content to section',
	trigger: (backend ? 'iframe ' : '' ) + 'div.o_wslides_slide_list_category_header:contains("' + sectionName + '") a:contains("Add Content")',
}, {
	content: 'eLearning: click on article',
	trigger: (backend ? 'iframe ' : '' ) + 'a[data-slide-category=article]',
}, {
	content: 'eLearning: fill article title',
	trigger: (backend ? 'iframe ' : '' ) + 'input[name=name]',
	run: 'text ' + pageName,
}, {
    content: 'eLearning: click on tags',
    trigger: (backend ? 'iframe ' : '' ) + 'ul.select2-choices:first',
}, {
    content: 'eLearning: select Practice tag',
    trigger: (backend ? 'iframe ' : '' ) + 'div.select2-result-label:contains("Practice")',
    in_modal: false,
}, {
	content: 'eLearning: fill article completion time',
	trigger: (backend ? 'iframe ' : '' ) + 'input[name=duration]',
	run: 'text 4',
}, {
    content: 'eLearning: create and publish slide',
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Publish")',
}];
};

const fillInFileInput = async (input, name, type, content) => {
    const blob = await (await fetch(`data:${type};base64,${content}`)).blob();
    const file = new File([blob], name, { type: type});
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(file);
    input.files = dataTransfer.files;
    input.dispatchEvent(new Event('change', { bubbles: true }));
};

const compareBase64Content = async (url, name, type, expectedContent) => {
    const blob = await (await fetch(url)).blob();
    const file = new File([blob], name, { type: type});
    const actualContent = await getDataURLFromFile(file).then(dataURL => dataURL.split(',', 2)[1]);
    return expectedContent === actualContent;
};

/**
 * Test the upload of an image file as a new content and especially the binary content of the uploaded image.
 */
const addImageToSection = (sectionName, pageName, backend) => {
    const prefix = backend ? 'iframe ' : '';
    return [
{
    content: 'eLearning: add content to section',
    trigger: `${prefix}div.o_wslides_slide_list_category_header:contains("${sectionName}") a:contains("Add Content")`,
}, {
    content: 'eLearning: click on image',
    trigger: `${prefix}a[data-slide-category=infographic]`,
}, {
    content: 'eLearning: choose upload from device',
    trigger: `${prefix}#source_type_local_file`,
}, {
    content: 'eLearning: load image',
    trigger: 'body',
    run: async () => {
        const uploadInput = backend ?
            document.getElementsByTagName('iframe')[0].contentWindow.document.getElementById('upload') :
            document.getElementById('upload');
        await fillInFileInput(uploadInput, 'Overview.png', 'image/png', testPngImage);
    },
}, {
    content: 'eLearning: ensure that the preview is displayed which means that data is loaded and can be submitted',
    trigger: `${prefix}#slide-image[src*="data:"]`,
}, {
    content: 'eLearning: create and publish slide',
    trigger: `${prefix}footer.modal-footer button:contains("Publish")`,
}, {
    content: 'eLearning: launch content',
    trigger: `${prefix}a.o_wslides_js_slides_list_slide_link:contains("Overview")`,
}, {
    content: 'eLearning: check uploaded image presence and perform comparison',
    trigger: (backend ? 'iframe ' : '') + '.o_wslides_fs_player img',
    run: async () => {
        const baseElement = backend ? document.querySelector('iframe').contentDocument : document;
        const img = baseElement.querySelector('.o_wslides_fs_player img');
        if (await compareBase64Content(img.getAttribute('src'), 'Overview.png', 'image/png', testPngImage)) {
            img.classList.add('o_wslides_tour_img_upload_success');
        }
    }
}, {
    content: 'eLearning: check uploaded image content',
    trigger: `${prefix}.o_wslides_fs_player img.o_wslides_tour_img_upload_success`,
},
{
    content: 'eLearning: back to course',
    trigger: `${prefix}.o_wslides_fs_sidebar_header a:contains("Déboulonnate")`,
},
{
    content: 'eLearning: check course page',
    trigger: `${prefix}.o_wslides_course_main`,
    isCheck: true,
}];
};

/**
 * Test the upload of a pdf file as a new content and especially the binary content of the uploaded pdf.
 */
const addPdfToSection = function (sectionName, pageName, backend) {
    const prefix = backend ? 'iframe ' : '';
    return [
{
    content: 'eLearning: add content to section',
    trigger: `${prefix}div.o_wslides_slide_list_category_header:contains("${sectionName}") a:contains("Add Content")`,
}, {
    content: 'eLearning: click on document',
    trigger: `${prefix}a[data-slide-category=document]`,
}, {
    content: 'eLearning: choose upload from device',
    trigger: `${prefix}#source_type_local_file`,
}, {
    content: 'eLearning: load pdf',
    trigger: 'body',
    run: async () => {
        const upload = backend ?
            document.getElementsByTagName('iframe')[0].contentWindow.document.getElementById('upload') :
            document.getElementById('upload');
        await fillInFileInput(upload, 'Exercise.pdf', 'application/pdf', testPdf);
    },
}, {
    content: 'eLearning: ensure that the preview is displayed which means that data is loaded and can be submitted',
    trigger: `${prefix}#slide-image[src*="data:"]`,
}, {
    content: 'eLearning: create and publish slide',
    trigger: `${prefix}footer.modal-footer button:contains("Publish")`,
}, {
    content: 'eLearning: launch content',
    trigger: `${prefix}a.o_wslides_js_slides_list_slide_link:contains("Exercise")`,
}, {
    content: 'eLearning: check uploaded pdf presence and perform comparison',
    trigger: (backend ? 'iframe.o_iframe ' : '') + '.o_wslides_fs_content',
    run: async () => {
        const baseElement = backend ? document.querySelector('iframe.o_iframe').contentDocument : document;
        await contains('iframe.o_wslides_iframe_viewer', { target: baseElement });
        const iframeViewerDoc = baseElement.querySelector('iframe.o_wslides_iframe_viewer').contentDocument;
        await contains('#PDFSlideViewer', { target: iframeViewerDoc });
        const pdfViewer = iframeViewerDoc.querySelector('#PDFSlideViewer');
        if (await compareBase64Content(pdfViewer.getAttribute('data-slideurl'), 'Exercise.pdf', 'application/pdf', testPdf)) {
            baseElement.querySelector('.o_wslides_fs_content').classList.add('o_wslides_tour_pdf_upload_success');
        }
    },
}, {
    content: 'eLearning: check uploaded pdf content',
    trigger: `${prefix}.o_wslides_fs_content.o_wslides_tour_pdf_upload_success`,
}, {
    content: 'eLearning: back to course',
    trigger: `${prefix}.o_wslides_fs_sidebar_header a:contains("Déboulonnate")`,
}, {
    content: 'eLearning: check course page',
    trigger: `${prefix}.o_wslides_course_main`,
    isCheck: true,
}];
};

var addExistingCourseTag = function (backend = false) {
	return [
{
    content: 'eLearning: click on Add Tag',
    trigger: (backend ? 'iframe ' : '' ) + 'a.o_wslides_js_channel_tag_add',
}, {
    content: 'eLearning: click on tag dropdown',
    trigger: (backend ? 'iframe ' : '' ) + 'a.select2-choice:first',
}, {
    content: 'eLearning: select advanced tag',
    trigger: (backend ? 'iframe ' : '' ) + 'div.select2-result-label:contains("Advanced")',
    in_modal: false,
}, {
    content: 'eLearning: add existing course tag',
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Add")'
}, {
	content: 'eLearning: check that modal is closed',
	trigger: (backend ? 'iframe ' : '' ) + 'body:not(.modal-open)',
}];
};

var addNewCourseTag = function (courseTagName, backend) {
	return [
{
    content: 'eLearning: click on Add Tag',
    trigger: (backend ? 'iframe ' : '' ) + 'a.o_wslides_js_channel_tag_add',
}, {
    content: 'eLearning: click on tag dropdown',
	trigger: (backend ? 'iframe ' : '' ) + 'a.select2-choice:first',
}, {
    content: 'eLearning: add a new course tag',
	trigger: (backend ? 'iframe ' : '' ) + 'a.select2-choice:first',
	run: function () {
		// directly add new tag since we can assume select2 works correctly
		let $jq = $;
		if (backend) {
			$jq = $('.o_website_preview iframe:not(.o_ignore_in_tour)').contents()[0].defaultView.$;
		}
		$jq('#tag_id').select2('data', {id:'123', text: courseTagName, create: true});
		$jq('#tag_id').trigger('change');
	}
}, {
    content: 'eLearning: click on tag group dropdown',
	trigger: (backend ? 'iframe ' : '' ) + 'a.select2-choice:last',
}, {
	content: 'eLearning: select Tags tag group',
    trigger: (backend ? 'iframe ' : '' ) + 'div.select2-result-label:contains("Tags")',
	in_modal: false,
}, {
    content: 'eLearning: add new course tag',
    trigger: (backend ? 'iframe ' : '' ) + 'footer.modal-footer button:contains("Add")'
}, {
	content: 'eLearning: check that modal is closed',
	trigger: (backend ? 'iframe ' : '' ) + 'body:not(.modal-open)',
}];
};

__exports[Symbol.for("default")] = {
	addSection: addSection,
	addImageToSection: addImageToSection,
	addPdfToSection: addPdfToSection,
	addVideoToSection: addVideoToSection,
	addArticleToSection: addArticleToSection,
	addExistingCourseTag: addExistingCourseTag,
	addNewCourseTag: addNewCourseTag,
};

return __exports;
});
;

/*************************************************************************
*  Filepath: /planning/static/tests/tours/planning_split_shift_tours.js  *
*  Lines: 98                                                             *
*************************************************************************/
odoo.define('@planning/../tests/tours/planning_split_shift_tours', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('planning_split_shift_week', {
    url: '/web?debug=tests',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Let's start managing your employees' schedule!",
    position: 'bottom',
}, {
    trigger: ".scale_button_selection",
    content: "The initial default scale should be week",
    run() {
        const subjectValue = document.querySelector('.scale_button_selection').textContent;
        if (subjectValue !== "Week") {
            console.error(
                `Default scale should be week (actual: ${subjectValue})`
            );
        }
    },
},{
    trigger: ".o_searchview_dropdown_toggler",
    content: "Open Filter",
}, {
    trigger: ".o_add_custom_filter",
    content: "Click on custom filter",
}, {
    trigger: ".o_model_field_selector",
    content: "Write domain excluding open shifts",
    run() {
        const input = document.querySelector(".o_domain_selector_debug_container textarea")
        input.value = '[("resource_id", "!=", False)]';
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: ".modal-footer > .btn-primary",
    content: "Add custom filter",
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Aramis",
    run: "text Aramis",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Aramis",
    run: 'click',
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Athos",
    run: "text Athos",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Athos",
    run: 'click',
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Porthos",
    run: "text Porthos",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Porthos",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__1_0']",
    content: "Split the slot assigned to Aramis after one day",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__4']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__3_1']",
    content: "Split the slot assigned to Athos after two days",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__5']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__3_0']",
    content: "Split the first slot assigned to Athos after one day",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__6']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__6_0']",
    content: "Split the first slot assigned to Porthos after one day",
    run: 'click',
}]});

return __exports;
});
;

/*******************************************************************
*  Filepath: /planning/static/tests/tours/planning_tests_tours.js  *
*  Lines: 213                                                      *
*******************************************************************/
odoo.define('@planning/../tests/tours/planning_tests_tours', ['@odoo/owl', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { markup } = require("@odoo/owl");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('planning_test_tour', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Let's start managing your employees' schedule!",
    position: 'bottom',
}, {
    trigger: ".o_gantt_button_add",
    content: markup("Let's create your first <b>shift</b>."),
    id: 'project_planning_start',
}, {
    trigger: ".o_field_widget[name='resource_id'] input",
    content: markup("Assign this shift to your <b>resource</b>, or leave it open for the moment."),
    run: 'text Aaron',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Aaron')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='role_id'] input",
    content: markup("Select the <b>role</b> your employee will have (<i>e.g. Chef, Bartender, Waiter, etc.</i>)."),
    run: 'text Developer',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Developer')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='start_datetime'] input",
    content: "Set start datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '08:00:00');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: "input[data-field=end_datetime]",
    content: "Set end datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '11:59:59');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: "div[name='template_creation'] input",
    content: "Save this shift as a template",
    run: function (actions) {
        if (!this.$anchor.prop('checked')) {
            actions.click(this.$anchor);
        }
    },
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: ".o_gantt_pill :contains('11:59')",
    content: markup("<b>Drag & drop</b> your shift to reschedule it. <i>Tip: hit CTRL (or Cmd) to duplicate it instead.</i> <b>Adjust the size</b> of the shift to modify its period."),
    auto: true,
    run: function () {
        if (this.$anchor.length) {
            const expected = "8:00 AM - 11:59 AM (4h)";
            // Without the replace below, this step could break since luxon
            // (via Intl) uses sometimes U+202f instead of a simple space.
            // Note: U+202f is a narrow non-break space.
            const actual = this.$anchor[0].textContent.replace(/\u202f/g, " ");
            if (!actual.startsWith(expected)) {
                console.error("Test in gantt view doesn't start as expected. Expected : '" + expected + "', actual : '" + actual + "'");
            }
        } else {
            console.error("Not able to select pill ending at 11h59");
        }
    }
}, {
    trigger: ".o_gantt_button_send_all",
    content: markup("If you are happy with your planning, you can now <b>send</b> it to your employees."),
}, {
    trigger: "button[name='action_check_emails']",
    content: markup("<b>Publish & send</b> your planning to make it available to your employees."),
}, {
    trigger: ".o_gantt_row_header:contains('Aaron') .o_gantt_progress_bar",
    content: "See employee progress bar",
    auto: true,
    run: function () {
        const $progressbar = this.$anchor;
        if ($progressbar.length) {
            if ($progressbar[0].querySelector("span").style.width === '') {
                console.error("Progress bar should be displayed");
            }
            if (!$progressbar[0].classList.contains("o_gantt_group_success")) {
                console.error("Progress bar should be displayed in success");
            }
        } else {
            console.error("Not able to select progressbar");
        }
    }
}, {
    trigger: ".o_gantt_button_copy_previous_week",
    content: "Copy previous week if you want to follow previous week planning schedule",
    run: 'click',
}, {
    id: "planning_check_format_step",
    trigger: ".o_gantt_pill span:contains(Developer)",
    content: "Check naming format of resource and role when grouped",
    auto: true,
    run: function () {}
}, {
    trigger: ".o_gantt_button_auto_plan",
    content: "Click on Auto Plan button to assign open shifts to employees",
    run: 'click',
}, {
    id: "planning_check_format_step",
    trigger: ".o_gantt_pill.opacity-25",
    content: "Check that the filter is applied",
    auto: true,
    run: function () {},
}]});

registry.category("web_tour.tours").add('planning_shift_switching_backend', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on one of your shifts in the gantt view",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: 'button[name="action_switch_shift"]',
    content: "Click on the 'Switch Shift' button on the Gantt Form view modal",
}, {
    trigger: 'div.o_view_scale_selector > .scale_button_selection',
    content: 'Toggle the view scale selector',
}, {
    trigger: 'div.o_view_scale_selector > .dropdown-menu',
    content: 'Click on the dropdown button to change the scale of the gantt view',
    extra_trigger: 'div.o_view_scale_selector .o_scale_button_day',
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift in the gantt view again",
},
{
    trigger: ".popover-footer button",
    content: "Click again on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: '.alert-warning:contains("The employee assigned would like to switch shifts with someone else.")',
    content: "Check that the warning has been shown",
}, {
    trigger: '.btn-close',
    content: "Click on the close button to hide the shift form modal",
}, {
    trigger: '.o_planning_gantt',
    isCheck: true,
}]});

registry.category("web_tour.tours").add('planning_assigning_unwanted_shift_backend', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift of the employee",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: ".o_field_widget[name='resource_id'] input",
    content: "Assign this shift to another employee.",
    run: 'text joseph',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('joseph')",
    auto: true,
    in_modal: false,
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: '.o_gantt_pill :contains("joseph")',
    content: "Click again on the newly assigned shift",
}, {
    trigger: '.o_popover',
    content: "Check the popover opened",
    isCheck: true,
}]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /website_event/static/tests/tours/tickets_questions.js  *
*  Lines: 70                                                         *
*********************************************************************/
odoo.define('@website_event/../tests/tours/tickets_questions', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
registry.category("web_tour.tours").add('test_tickets_questions', {
    test: true,
    url: '/event',
    steps: () => [{
    content: "Click on the Design Fair event",
    trigger: 'article:contains("Design Fair New York")',
}, {
    content: "Click on Register modal tickets button",
    trigger: 'button:contains("Register")',
    run: 'click'
}, {
    content: "Check Register button is disabled when no ticket selected",
    trigger: 'button:disabled:contains("Register")',
    isCheck: true,
}, {
    content: "Select 2 'Free' tickets to buy",
    trigger: 'div.o_wevent_ticket_selector:contains("Free") select.form-select',
    run: 'text 2'
}, {
    content: "Click on Register (to fill tickets data) button",
    trigger: 'div.modal-footer button:contains("Register")',
    run: 'click'
}, {
    trigger: 'div:contains("Ticket #1").modal-body input[name*="name"]',
    run: 'text Attendee A'
}, {
    trigger: 'div:contains("Ticket #1").modal-body input[name*="email"]',
    run: 'text attendee-a@gmail.com'
}, {
    trigger: 'div:contains("Ticket #1").modal-body input[name*="phone"]',
    run: 'text +32499123456'
}, {
    trigger: 'div:contains("Ticket #1").modal-body select[name*="1-simple_choice"]',
    run: 'text Vegetarian'
}, {
    trigger: 'div:contains("Ticket #1").modal-body textarea[name*="1-text_box"]',
    run: 'text Fish and Nuts'
}, {
    trigger: 'div:contains("Ticket #2").modal-body input[name*="name"]',
    run: 'text Attendee B'
}, {
    trigger: 'div:contains("Ticket #2").modal-body input[name*="email"]',
    run: 'text attendee-b@gmail.com'
}, {
    trigger: 'div:contains("Ticket #2").modal-body input[name*="company_name"]',
    run: 'text My Company'
}, {
    trigger: 'div:contains("Ticket #2").modal-body select[name*="2-simple_choice"]',
    run: 'text Pastafarian'
}, {
    trigger: 'div.o_wevent_registration_question_global select[name*="0-simple_choice"]',
    run: 'text A friend'
}, {
    trigger: 'button[type=submit]',
    run: 'click'
}, {
    // The tour stops too early and the registration fails if we don't wait the confirmation.
    content: 'Wait for confirmation',
    trigger: '.o_wereg_confirmed, .oe_cart',
    isCheck: true,
}]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website_event/static/tests/tours/website_event.js  *
*  Lines: 107                                                    *
*****************************************************************/
odoo.define('@website_event/../tests/tours/website_event', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

function websiteCreateEventTourSteps() {
    return [
        {
            content: "Click here to add new content to your website.",
            trigger: ".o_menu_systray .o_new_content_container > a",
            consumeVisibleOnly: true,
        },
        {
            content: "Click here to create a new event.",
            trigger: "a[data-module-xml-id='base.module_website_event']",
        },
        {
            content:
                "Create a name for your new event and click `Continue`. e.g: Technical Training",
            trigger: ".modal-dialog div[name='name'] input",
            run: "text Technical Training",
        },
        {
            content: "Open date range picker. Pick a Start date for your event",
            trigger: ".modal-dialog div[name=date_begin]",
            run: () => {
                document.querySelector("input[data-field='date_begin']").value =
                    "09/30/2020 08:00:00";
                document
                    .querySelector("input[data-field='date_begin']")
                    .dispatchEvent(new Event("change"));

                document.querySelector("input[data-field='date_end']").value =
                    "10/02/2020 23:00:00";
                document
                    .querySelector("input[data-field='date_end']")
                    .dispatchEvent(new Event("change"));

                document.querySelector("input[data-field='date_begin']").click();
            },
        },
        {
            content: "Click `Continue` to create the event.",
            trigger: ".modal-footer button.btn-primary",
            extra_trigger: ".modal-dialog input[type=text][value!='']",
        },
        {
            content: "Drag this block and drop it in your page.",
            trigger:
                "#oe_snippets.o_loaded #snippet_structure .oe_snippet:eq(2) .oe_snippet_thumbnail",
            run: "drag_and_drop_native iframe #wrapwrap > main",
        },
        {
            content: "Once you click on save, your event is updated.",
            trigger: "button[data-action=save]",
            // Wait until the drag and drop is resolved (causing a history step)
            // before clicking save.
            extra_trigger:
                ".o_we_external_history_buttons button[data-action=undo]:not([disabled])",
        },
        {
            content: "Click to publish your event.",
            trigger: ".o_menu_systray_item .o_switch_danger_success",
            extra_trigger: "iframe body:not(.editor_enable)",
        },
    ];
}

function websiteEditEventTourSteps() {
    return [
        {
            content: "Redirect to Event Page",
            trigger: "iframe span:contains('Back to events')",
            run: "click",
        },
        {
            content: "Wait for events list to load",
            trigger: "iframe .o_wevent_events_list",
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "edit the short description of the event",
            trigger: "iframe .o_wevent_events_list small",
            run: "text new short description",
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "is short description updated?",
            trigger: "iframe .o_wevent_events_list small:contains('new short description')",
            isCheck: true,
        },
    ];
}

wTourUtils.registerWebsitePreviewTour(
    "website_event_tour",
    {
        test: true,
        url: "/",
    },
    () => [...websiteCreateEventTourSteps(), ...websiteEditEventTourSteps()]
);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website_event/static/tests/tours/website_event_pages_seo.js  *
*  Lines: 40                                                               *
***************************************************************************/
odoo.define('@website_event/../tests/tours/website_event_pages_seo', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-modules */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_event_pages_seo', {
    test: true,
    // The tour must start on an event's custom page (not register page)
    // url: `/event/openwood-collection-online-reveal-8/page/introduction-openwood-collection-online-reveal`,
    steps: () => [
    {
        content: "Open the site menu",
        trigger: '[data-menu-xmlid="website.menu_site"]',
        extra_trigger: 'iframe #o_wevent_event_submenu', // Ensure we landed on the event page
    },
    {
        content: "Open the optimize SEO dialog",
        trigger: '[data-menu-xmlid="website.menu_optimize_seo"]',
    },
    {
        content: "Fill in the title input",
        trigger: '[for="website_meta_title"] + input',
        run: 'text Hello, world!',
    },
    {
        content: "Save the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Check that the page title is adapted, inside and outside the iframe",
        trigger: 'html:has(title:containsExactText(Hello, world!))',
        extra_trigger: 'iframe html:has(title:containsExactText(Hello, world!))',
        isCheck: true,
    },
]});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /im_livechat/static/tests/tours/im_livechat_channel_creation_tour.js  *
*  Lines: 50                                                                       *
***********************************************************************************/
odoo.define('@im_livechat/../tests/tours/im_livechat_channel_creation_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

const requestChatSteps = [
    {
        trigger: ".o-livechat-LivechatButton",
        run: "click",
    },
    {
        trigger: ".o-mail-ChatWindow",
        isCheck: true,
    },
];

registry.category("web_tour.tours").add("im_livechat_request_chat", {
    test: true,
    steps: () => requestChatSteps,
    shadow_dom: ".o-livechat-root",
});

registry.category("web_tour.tours").add("im_livechat_request_chat_and_send_message", {
    test: true,
    shadow_dom: ".o-livechat-root",
    steps: () => [
        ...requestChatSteps,
        {
            trigger: ".o-mail-Composer-input",
            run: "text Hello, I need help please !",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Message:contains('Hello, I need help')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/*****************************************************************************************
*  Filepath: /im_livechat/static/tests/tours/im_livechat_chatbot_steps_sequence_tour.js  *
*  Lines: 147                                                                            *
*****************************************************************************************/
odoo.define('@im_livechat/../tests/tours/im_livechat_chatbot_steps_sequence_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const commonSteps = [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="im_livechat.menu_livechat_root"]',
    },
    {
        trigger: 'button[data-menu-xmlid="im_livechat.livechat_config"]',
    },
    {
        trigger: 'a[data-menu-xmlid="im_livechat.chatbot_config"]',
    },
    {
        trigger: ".o_list_button_add",
    },
    {
        trigger: 'input[id="title_0"]',
        run: "text Test Chatbot Sequence",
    },
    {
        trigger: 'div[name="script_step_ids"] .o_field_x2many_list_row_add a',
    },
    {
        trigger: "textarea#message_0",
        run: "text Step 1",
    },
    {
        trigger: 'button:contains("Save & New")',
    },
    {
        trigger: 'tr:contains("Step 1")',
        in_modal: false,
        run: () => {},
    },
    {
        trigger: "textarea#message_0",
        run: "text Step 2",
    },
    {
        trigger: 'button:contains("Save & New")',
    },
    {
        trigger: 'tr:contains("Step 2")',
        in_modal: false,
        run: () => {},
    },
    {
        trigger: "textarea#message_0",
        run: "text Step 3",
    },
];

/**
 * Simply create a few steps in order to check the sequences.
 */
registry.category("web_tour.tours").add("im_livechat_chatbot_steps_sequence_tour", {
    test: true,
    url: "/web",
    steps: () => [
        ...commonSteps,
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run() {},
        },
        ...stepUtils.discardForm(),
    ],
});

/**
 * Same as above, with an extra drag&drop at the end.
 */
registry.category("web_tour.tours").add("im_livechat_chatbot_steps_sequence_with_move_tour", {
    test: true,
    url: "/web",
    steps: () => [
        ...commonSteps,
        {
            trigger: 'button:contains("Save & New")',
        },
        {
            trigger: 'tr:contains("Step 3")',
            in_modal: false,
            run: () => {},
        },
        {
            trigger: "textarea#message_0",
            run: "text Step 4",
        },
        {
            trigger: 'button:contains("Save & New")',
        },
        {
            trigger: 'tr:contains("Step 4")',
            in_modal: false,
            run: () => {},
        },
        {
            trigger: "textarea#message_0",
            run: "text Step 5",
        },
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run: () => {},
        },
        {
            trigger: 'div[name="script_step_ids"] tr:nth-child(5) .o_row_handle',
            run: 'drag_and_drop_native div[name="script_step_ids"] tr:nth-child(2)',
        },
        {
            trigger: 'div[name="script_step_ids"] .o_field_x2many_list_row_add a',
        },
        {
            trigger: "textarea#message_0",
            run: "text Step 6",
        },
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run: () => {},
        },
        {
            trigger: 'tr:contains("Step 6")',
            in_modal: false,
            run: () => {},
        },
        ...stepUtils.discardForm(),
    ],
});

return __exports;
});
;

/************************************************************************************
*  Filepath: /im_livechat/static/tests/tours/im_livechat_history_back_and_forth.js  *
*  Lines: 64                                                                        *
************************************************************************************/
odoo.define('@im_livechat/../tests/tours/im_livechat_history_back_and_forth', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("im_livechat_history_back_and_forth_tour", {
    test: true,
    steps: () => [
        {
            trigger: "body",
            // Open Command Palette
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "K", ctrlKey: true, bubbles: true })
                );
            },
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text /",
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text Live Chat",
        },
        {
            trigger: ".o_command:contains(Sessions History)",
        },
        {
            trigger: ".o_data_cell:contains(Visitor operator)",
        },
        {
            trigger: ".o-mail-DiscussSidebar-item:contains(Visitor).o-active",
            run() {
                history.back();
            },
        },
        {
            trigger: ".o_data_cell:contains(Visitor operator)",
            run() {
                history.forward();
            },
        },
        {
            trigger: ".o-mail-DiscussSidebar-item:contains(Visitor).o-active",
        },
        {
            trigger: ".o-mail-DiscussSidebar-item:contains(Visitor).o-active",
            run() {
                history.back();
            },
        },
        {
            trigger: ".o_data_cell:contains(Visitor operator)",
            run() {},
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_failure.js  *
*  Lines: 123                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_failure', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
*/
function patchSurveyWidget() {
    const SurveyFormWidget = odoo.loader.modules.get('@survey/js/survey_form')[Symbol.for('default')]
    SurveyFormWidget.include({
        _submitForm: function () {
            this.fadeInOutDelay = 0;
            return this._super.apply(this, arguments);
        }
    });
}

/**
 * This tour will test that, for the demo certification allowing 2 attempts, a user can
 * try and fail twice and will no longer be able to take the certification.
 */

const { registry } = require("@web/core/registry");

var patch = [{
    content: "Patching Survey Widget",
    trigger: 'body',
    run: function(){
        patchSurveyWidget();
    }
}]

var failSteps = [{ // Page-1
    content: "Clicking on Start Certification",
    trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
}, { // Question: Do we sell Acoustic Bloc Screens?
    content: "Selecting answer 'No'",
    trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("No")',
}, { // Question: Select all the existing products
    content: "Ticking answer 'Fanta'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Fanta")'
}, {
    content: "Ticking answer 'Drawer'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
}, {
    content: "Ticking answer 'Conference chair'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
}, { // Question: Select all the available customizations for our Customizable Desk
    content: "Ticking answer 'Color'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
}, {
    content: "Ticking answer 'Height'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Height")'
}, { // Question: How many versions of the Corner Desk do we have?
    content: "Selecting answer '2'",
    trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
}, { // Question: Do you think we have missing products in our catalog? (not rated)
    content: "Missing products",
    trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
    run: "text I don't know products enough to be able to answer that",
}, { // Page-2 Question: How much do we sell our Cable Management Box?
    content: "Selecting answer '$80'",
    trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
}, { // Question: Select all the products that sell for $100 or more
    content: "Ticking answer 'Corner Desk Right Sit'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
}, {
    content: "Ticking answer 'Desk Combination'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
}, {
    content: "Ticking answer 'Office Chair Black'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Office Chair Black")'
}, { // Question: What do you think about our prices (not rated)?
    trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Correctly priced")',
}, { // Page-3 Question: How many days is our money-back guarantee?
    content: "Inputting answer '60'",
    trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
    run: 'text 60'
}, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
    content: "Inputting answer '01/06/2020'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
    run: 'text 01/06/2020'
}, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
    content: "Inputting answer '01/06/2021 00:00:01'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
    run: 'text 01/06/2021 00:00:01'
}, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
}, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
}, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
    content: "Inputting answer '0'",
    trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
    run: 'text 0'
}, {
    content: "Finish Survey",
    trigger: 'button[type="submit"]',
}];

var retrySteps = [{
    trigger: 'a:contains("Retry")'
}];

var lastSteps = [{
    trigger: 'h1:contains("Thank you!")',
    run: function () {
        if ($('a:contains("Retry")').length === 0) {
            $('h1:contains("Thank you!")').addClass('tour_success');
        }
    }
}, {
    trigger: 'h1.tour_success',
    isCheck: true,
}];

registry.category("web_tour.tours").add('test_certification_failure', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [].concat(patch, failSteps, retrySteps, failSteps, lastSteps) });

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_success.js  *
*  Lines: 111                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_success', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
function patchSurveyWidget() {
    const SurveyFormWidget = odoo.loader.modules.get('@survey/js/survey_form')[Symbol.for('default')]
    SurveyFormWidget.include({
        _submitForm: function () {
            this.fadeInOutDelay = 0;
            return this._super.apply(this, arguments);
        }
    });
}

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_certification_success', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [{
        content: "Patching Survey Widget",
        trigger: 'body',
        run: function(){
            patchSurveyWidget();
        }
    }, { // Page-1
        content: "Clicking on Start Certification",
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
    }, { // Question: Do we sell Acoustic Bloc Screens?
        content: "Selecting answer 'Yes'",
        trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("Yes")',
    }, { // Question: Select all the existing products
        content: "Ticking answer 'Chair floor protection'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Chair floor protection")'
    }, {
        content: "Ticking answer 'Drawer'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
    }, {
        content: "Ticking answer 'Conference chair'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
    }, { // Question: Select all the available customizations for our Customizable Desk
        content: "Ticking answer 'Color'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
    }, {
        content: "Ticking answer 'Legs'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Legs")'
    }, { // Question: How many versions of the Corner Desk do we have?
        content: "Selecting answer '2'",
        trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
    }, { // Question: Do you think we have missing products in our catalog? (not rated)
        content: "Missing products",
        trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
        run: "text I think we should make more versions of the customizable desk, it's such an amazing product!",
    }, { // Page-2 Question: How much do we sell our Cable Management Box?
        content: "Selecting answer '$80' (wrong one)",
        trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
    }, { // Question: Select all the products that sell for $100 or more
        content: "Ticking answer 'Corner Desk Right Sit'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
    }, {
        content: "Ticking answer 'Desk Combination'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
    }, {
        content: "Ticking answer 'Large Desk'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Large Desk")'
    }, { // Question: What do you think about our prices (not rated)?
        content: "Selecting answer 'Underpriced'",
        trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Underpriced")',
    }, { // Page-3 Question: How many days is our money-back guarantee?
        content: "Inputting answer '30'",
        trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
        run: 'text 30'
    }, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
        content: "Inputting answer '01/08/2020'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
        run: 'text 01/08/2020'
    }, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
        content: "Inputting answer '01/07/2021 00:00:01'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
        run: 'text 01/07/2021 00:00:01'
    }, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
        content: "Inputting answer '01/01/2021'",
        trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
        run: 'text 01/01/2021'
    }, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
        content: "Inputting answer '01/01/2021 13:00:01'",
        trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
        run: 'text 01/01/2021 13:00:01'
    }, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
        content: "Inputting answer '1000'",
        trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
        run: 'text 1000'
    }, {
        content: "Finish Survey",
        trigger: 'button[type="submit"]',
    }, {
        content: "Thank you",
        trigger: 'h1:contains("Thank you!")',
    }, {
        content: "test passed",
        trigger: 'div:contains("Congratulations, you have passed the test!")',
        isCheck: true,
    }
]});

return __exports;
});
;

/***************************************************
*  Filepath: /survey/static/tests/tours/survey.js  *
*  Lines: 74                                       *
***************************************************/
odoo.define('@survey/../tests/tours/survey', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [
    // Page-1
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("Where do you live") input',
        run: 'text Mordor-les-bains',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("When is your date of birth") input',
        run: 'text 05/05/1980',
    }, {
        content: 'Answer How frequently do you buy products online',
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online") label:contains("Once a month")',
    }, {
        content: 'Answer How many times did you order products on our website',
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website") input',
        run: 'text 12',
    }, {
        content: 'Submit and go to Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    {
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text This is great. Really.',
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
        isCheck: true,
    }
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /survey/static/tests/tours/survey_chained_conditional_questions.js  *
*  Lines: 94                                                                     *
*********************************************************************************/
odoo.define('@survey/../tests/tours/survey_chained_conditional_questions', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('test_survey_chained_conditional_questions', {
    test: true,
    url: '/survey/start/3cfadce3-3f7e-41da-920d-10fa0eb19527',
    steps: () => [
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Q1 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
    }, {
        content: 'Answer Q2 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
        extra_trigger: 'div.js_question-wrapper:contains("Q4")',
    }, {
        content: 'Answer Q3 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Answer Q1 with Answer 3',  // This should hide Q2 and Q4 but not Q3.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 3")',
    }, {
        content: 'Check that Q2 was hidden',
        trigger: 'div.js_question-wrapper:contains("Q3")',
        run : () => {
            expectHiddenQuestion("Q2");
            expectHiddenQuestion("Q4");
        },
    }, {
        content: 'Answer Q3 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 2")',
    }, {
        content: 'Answer Q1 with Answer 2',  // This should hide all other questions.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now visible',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2's trigger is gone.");
            expectHiddenQuestion("Q3", "No reason to show it now.");
            expectHiddenQuestion("Q4", "No reason to show it now.");
        },
    }, {
        content: 'Answer Q1 with Answer 3',  // This shows Q3.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 3")',
    }, {
        content: 'Check that questions Q2 and Q4 are hidden',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2 should stay hidden.");
            expectHiddenQuestion("Q4", "Q4 should stay hidden.");
        },
    }, {
        content: 'Answer Q3 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 2")',
    }, {
        content: 'Answer Q1 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now the only one visible again',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2's trigger is gone, again.");
            expectHiddenQuestion("Q3", "As Q2's gone, so should this one.");
            expectHiddenQuestion("Q4", "No reason to show it now.");
        },
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
        isCheck: true,
    }

]});

__exports.expectHiddenQuestion = expectHiddenQuestion; function expectHiddenQuestion (questionTitle, msg){
    if ($(`div.js_question-wrapper.d-none:contains('${questionTitle}')`).length !== 1) {
        throw new TourError(msg);
    }
}

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /survey/static/tests/tours/survey_conditional_questions_on_different_page.js  *
*  Lines: 58                                                                               *
*******************************************************************************************/
odoo.define('@survey/../tests/tours/survey_conditional_questions_on_different_page', ['@web/core/registry', '@survey/../tests/tours/survey_chained_conditional_questions'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { expectHiddenQuestion } = require("@survey/../tests/tours/survey_chained_conditional_questions");

registry.category("web_tour.tours").add('test_survey_conditional_question_on_different_page', {
    test: true,
    url: '/survey/start/1cb935bd-2399-4ed1-9e10-c649318fb4dc',
    steps: () => [
        {
            content: 'Click on Start',
            trigger: 'button.btn:contains("Start")',
        }, {
            content: 'Answer Q1 with Answer 1',
            trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
        }, {
            content: 'Go to next page',
            trigger: 'button[value="next"]',
        }, {
            content: 'Check that Q3 is visible',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }, {
            content: 'Answer Q2 with Answer 2',
            trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 2")',
        }, {
            content: 'Check that Q3 is still visible',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }, {
            content: 'Go back',
            trigger: 'button[value="previous"]',
        }, {
            content: 'Answer Q1 with Answer 2',
            trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
        }, {
            content: 'Go to next page',
            trigger: 'button[value="next"]',
        }, {
            content: 'Check that Q3 is hidden',
            trigger: 'div.js_question-wrapper:contains("Q2")',
            run : () => expectHiddenQuestion("Q3", "Q3 should be hidden as q1_a1 trigger is not selected anymore"),
        }, {
            content: 'Answer Q2 with Answer 1',
            trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
        }, {
            content: 'Check that Q3 is now visible again',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/********************************************************
*  Filepath: /survey/static/tests/tours/survey_form.js  *
*  Lines: 281                                           *
********************************************************/
odoo.define('@survey/../tests/tours/survey_form', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('survey_tour_test_survey_form_triggers', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: 'Go to Survey',
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
    }, {
        content: "Create a new survey",
        trigger: ".o-kanban-button-new",
    }, {
        content: "Set the Survey's title",
        trigger: ".o_field_widget[name=title] textarea",
        run: "text Test survey",
    }, {
        content: "Add a first question",
        trigger: "td.o_field_x2many_list_row_add a",
    }, {
        content: "Set the first question's title",
        trigger: ".modal-content .o_field_widget[name=title] input",
        run: "text Question 1",
    },
    ...addTwoAnswers(),
    ...saveAndNew(),
    {
        content: "Set the second question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 2",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...changeTab("options"),
    {
        content: "Set a trigger for the first question",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question's first answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 1 : Answer A")',
        run: 'click',
        in_modal: true,
    },
    ...changeTab("answers"),
    ...saveAndNew(),
    {
        content: "Set the third question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 3",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...changeTab("options"),
    {
        content: "Set a trigger for the second question",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second question's second answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 2 : Answer B")',
        run: 'click',
        in_modal: true,
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 2 has 'normal' trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Check that Question 3 has 'normal' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 3 above its trigger (Question 2)",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(2)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        isCheck: true,
    }, {
        content: "Open that question to check the server's misplacement evaluation agrees",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    }, {
        content: "Check that an alert is shown",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before some or all of its triggers')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Remove invalid trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] span:contains('Question 2') a.o_delete",
        run: "click",
        in_modal: true,
    }, {
        content: "Check that the alert is gone",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        isCheck: true,
    }, {
        content: "Choose a new valid trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question's second answer as trigger, then",
        trigger: 'ul.ui-autocomplete a:contains("Question 1 : Answer B")',
        run: 'click',
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 3 back below Question 2",
        trigger: "tr.o_data_row:nth-child(2) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    },
    ...changeTab("options"),
    {
        content: "Add a second trigger to confirm we can now use Question 2 again",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Add the second question's second answer as trigger, then",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Question 2 : Answer B")',
        run: "click",
    },
    ...stepUtils.saveForm(),
    // Move question 1 below question 3,
    {
        content: "Move Question 1 back below Question 3",
        trigger: "tr.o_data_row:nth-child(1) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        isCheck: true,
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    }, {
        content: "Check that an alert is shown also when only one trigger is misplaced",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before some or all of its triggers')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Remove temporarily used trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] span:contains('Question 1') a.o_delete",
        run: "click",
        in_modal: true,
    }, {
        content: "Check that the alert is gone in this case too",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        isCheck: true,
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 1 back above Question 2",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(1)",
    },
    // Deleting trigger answers or whole question gracefully remove the trigger automatically
    {
        content: "Open Question 2 again",
        trigger: "tr.o_data_row td:contains('Question 2')",
        run: "click",
    }, {
        content: "Delete Answer B",
        trigger: "div[name=suggested_answer_ids] tr:contains('Answer B') button[name=delete]",
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 no longer has a trigger icon",
        trigger: "div[name=question_and_page_ids] tr:contains('Question 3') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        isCheck: true,
    }, {
        content: "Check that Question 2 however still has a trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Delete Question 1",
        trigger: "tr:contains('Question 1') button[name=delete]",
        run: "click",
    }, {
        content: "Check that now Question 2 too does no longer have a trigger icon",
        trigger: "tr:contains('Question 2') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        isCheck: true,
    }, {
        content: 'Go back to Kanban View',
        trigger: '[data-menu-xmlid="survey.menu_survey_form"]',
    }, {
        content: "Check that we arrived on the kanban view",
        trigger: ".o-kanban-button-new",
        isCheck: true,
    }
]});

function addTwoAnswers() {
    return [
        {
            content: "Add the first answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr.o_selected_row div[name=value] input',
            run: 'text Answer A',
            in_modal: true,
        }, {
            content: "Add the second answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr:nth-child(2).o_selected_row div[name=value] input',
            run: 'text Answer B',
            in_modal: true,
        }
    ];
}

function saveAndNew() {
    return [
        {
            content: "Click Save & New",
            trigger: "button.o_form_button_save_new",
            in_modal: true,
        }, {
            content: "Wait for the dialog to render new question form",
            // suggested_answer_ids required even though in_modal is specified...
            trigger: "div[name=suggested_answer_ids] .o_list_table tbody tr:first-child:not(.o_data_row)", // empty answers list
            in_modal: true,
            isCheck: true,
        }
    ];
}


function changeTab(tabName) {
    // Currently, .modal-content is required even though "in_modal"
    return [
        {
            content: `Go to ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link`,
            in_modal: true
        }, {
            content: `Wait for tab ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link.active`,
            in_modal: true,
            isCheck: true,
        }
    ];
}

return __exports;
});
;

/***********************************************************
*  Filepath: /survey/static/tests/tours/survey_prefill.js  *
*  Lines: 158                                              *
***********************************************************/
odoo.define('@survey/../tests/tours/survey_prefill', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_prefill', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [{      // Page-1
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Survey")',
    }, { // Question: Where do you live?
        trigger: 'div.js_question-wrapper:contains("Where do you live?") input',
        run: 'text Grand-Rosiere',
    }, { // Question: When is your date of birth?
        trigger: 'div.js_question-wrapper:contains("When is your date of birth?") input',
        run: 'text 05/05/1980',
    }, { // Question: How frequently do you buy products online?
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week")',
    }, { // Question: How many times did you order products on our website?
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: 'text 42',
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    { // Question: Which of the following words would you use to describe our products?
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text Is the prefill working?',
    }, {
        // Go back to previous page
        content: 'Click on the previous page name in the breadcrumb',
        trigger: 'ol.breadcrumb a:first',
    }, {
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ3.val() === '42.0') {
                $('.o_survey_title').addClass('prefilled');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled',
        run: function () {
            // check that all the answers are prefilled in Page 1
            var $inputQ1 = $('div.js_question-wrapper:contains("Where do you live?") input');
            if ($inputQ1.val() !== 'Grand-Rosiere') {
                return;
            }

            var $inputQ2 = $('div.js_question-wrapper:contains("When is your date of birth?") input');
            if ($inputQ2.val() !== '05/05/1980') {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week") input');
            if (!$inputQ3.is(':checked')) {
                return;
            }

            var $inputQ4 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ4.val() !== '42.0') {
                return;
            }

            $('.o_survey_title').addClass('tour_success');
        }
    }, {
        trigger: '.o_survey_title.tour_success'
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    }, {
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() === "Is the prefill working?") {
                $('.o_survey_title').addClass('prefilled2');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled2',
        run: function () {
            // check that all the answers are prefilled in Page 2
            var $input1Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality") input');
            if (!$input1Q1.is(':checked')) {
                return;
            }

            var $input2Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money") input');
            if (!$input2Q1.is(':checked')) {
                return;
            }

            var $input1Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") input:first');
            if (!$input1Q2.is(':checked')) {
                return;
            }

            var $input2Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") input:eq(2)');
            if (!$input2Q2.is(':checked')) {
                return;
            }

            var $input3Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") input:eq(3)');
            if (!$input3Q2.is(':checked')) {
                return;
            }

            var $input4Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") input:eq(2)');
            if (!$input4Q2.is(':checked')) {
                return;
            }

            var $input5Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") input:last');
            if (!$input5Q2.is(':checked')) {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() !== "Is the prefill working?") {
                return;
            }

            $('.o_survey_title').addClass('tour_success_2');
        }
    }, {
        trigger: '.o_survey_title.tour_success_2',
        isCheck: true,
    }
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /survey/static/tests/tours/survey_roaming_mandatory_questions.js  *
*  Lines: 80                                                                   *
*******************************************************************************/
odoo.define('@survey/../tests/tours/survey_roaming_mandatory_questions', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require('@web/core/registry');

registry.category('web_tour.tours').add('test_survey_roaming_mandatory_questions', {
    test: true,
    url: '/survey/start/853ebb30-40f2-43bf-a95a-bbf0e367a365',
    steps: () => [{
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Skip question Q1',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Skip question Q2',
        extra_trigger: 'div.js_question-wrapper:contains("Q2")',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Check if Q3 button is Submit',
        trigger: 'button.btn:contains("Submit")',
        isCheck: true,
    }, {
        content: 'Go back to Q2',
        trigger: 'button.btn[value="previous"]',
    }, {
        content: 'Check if the alert box is present',
        trigger: 'div.o_survey_question_error span',
        isCheck: true,
    }, {
        content: 'Skip question Q2 again',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Answer Q3',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Click on Submit',
        trigger: 'button.btn:contains("Submit")',
    }, {
        content: 'Check if question is Q1',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        isCheck: true,
    }, {
        content: 'Click on "Next Skipped" button',
        trigger: 'button.btn:contains("Next Skipped")',
    }, {
        content: 'Check if question is Q2',
        trigger: 'div.js_question-wrapper:contains("Q2")',
        isCheck: true,
    }, {
        content: 'Click on "Next Skipped" button',
        trigger: 'button.btn:contains("Next Skipped")',
    }, {
        content: 'Check if question is Q1 again (should loop on skipped questions)',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        isCheck: true,
    }, {
        content: 'Answer Q1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check if the visible question is the skipped question Q2',
        trigger: 'div.js_question-wrapper:contains("Q2")',
        isCheck: true,
    }, {
        content: 'Answer Q2',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 3")',
    }, {
        content: 'Click on Submit',
        trigger: 'button.btn:contains("Submit")',
    }, {
        content: 'Check if the survey is done',
        trigger: 'div.o_survey_finished h1:contains("Thank you!")',
        isCheck: true,
    }],
});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /website_hr_recruitment/static/tests/tours/website_hr_recruitment.js  *
*  Lines: 166                                                                      *
***********************************************************************************/
odoo.define('@website_hr_recruitment/../tests/tours/website_hr_recruitment', ['@web/core/registry', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

    function applyForAJob(jobName, application) {
        return [{
            content: "Select Job",
            trigger: `.oe_website_jobs h3:contains(${jobName})`,
        }, {
            content: "Apply",
            trigger: ".js_hr_recruitment a:contains('Apply')",
        }, {
            content: "Complete name",
            trigger: "input[name=partner_name]",
            run: `text ${application.name}`,
        }, {
            content: "Complete Email",
            trigger: "input[name=email_from]",
            run: `text ${application.email}`,
        }, {
            content: "Complete phone number",
            trigger: "input[name=partner_phone]",
            run: `text ${application.phone}`,
        }, {
            content: "Complete LinkedIn profile",
            trigger: "input[name=linkedin_profile]",
            run: `text linkedin.com/in/${application.name.toLowerCase().replace(' ', '-')}`,
        }, {
            content: "Complete Subject",
            trigger: "textarea[name=description]",
            run: `text ${application.subject}`,
        }, { // TODO: Upload a file ?
            content: "Send the form",
            trigger: ".s_website_form_send",
        }, {
            content: "Check the form is submitted without errors",
            trigger: "#jobs_thankyou h1:contains('Congratulations')",
            isCheck: true,
        }];
    }

    registry.category("web_tour.tours").add('website_hr_recruitment_tour', {
        test: true,
        url: '/jobs',
        steps: () => [
        ...applyForAJob('Guru', {
            name: 'John Smith',
            email: 'john@smith.com',
            phone: '118.218',
            subject: '### [GURU] HR RECRUITMENT TEST DATA ###',
        }),
        {
            content: "Go back to the jobs page",
            trigger: "body",
            run: () => {
                window.location.href = '/jobs';
            },
        },
        ...applyForAJob('Internship', {
            name: 'Jack Doe',
            email: 'jack@doe.com',
            phone: '118.712',
            subject: '### HR [INTERN] RECRUITMENT TEST DATA ###',
        }),
    ]});

    wTourUtils.registerWebsitePreviewTour('website_hr_recruitment_tour_edit_form', {
        test: true,
        url: '/jobs',
    }, () => [{
        content: 'Go to the Guru job page',
        trigger: 'iframe a[href*="guru"]',
    }, {
        content: 'Go to the Guru job form',
        trigger: 'iframe a[href*="apply"]',
    }, {
        content: 'Check if the Guru form is present',
        trigger: 'iframe form'
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Add a fake default value for the job_id field',
        trigger: "body",
        run: () => {
            // It must be done in this way because the editor does not allow to
            // put a default value on a field with type="hidden".
            document.querySelector('.o_iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('input[name="job_id"]').value = 'FAKE_JOB_ID_DEFAULT_VAL';
        },
    }, {
        content: 'Edit the form',
        trigger: 'iframe input[type="file"]',
    }, {
        content: 'Add a new field',
        trigger: 'we-button[data-add-field]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: 'Go back to /jobs page after save',
        trigger: 'iframe body',
        run: () => {
            window.location.href = wTourUtils.getClientActionUrl('/jobs');
        }
    }, {
        content: 'Go to the Internship job page',
        trigger: 'iframe a[href*="internship"]',
    }, {
        content: 'Go to the Internship job form',
        trigger: 'iframe a[href*="apply"]',
    }, {
        content: 'Check that a job_id has been loaded',
        trigger: 'iframe form',
        run: () => {
            const selector =
                'input[name="job_id"]:not([value=""]):not([value = "FAKE_JOB_ID_DEFAULT_VAL"])';
            if (!document.querySelector('.o_iframe:not(.o_ignore_in_tour)').contentDocument.querySelector(selector)) {
                console.error('The job_id field has a wrong value');
            }
        }
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Verify that the job_id field has kept its default value',
        trigger: "body",
        run: () => {
            const doc = document.querySelector(".o_iframe:not(.o_ignore_in_tour)").contentDocument;
            const id = doc.querySelector('[data-oe-model="hr.job"]').dataset.oeId;
            if (!doc.querySelector(`input[name="job_id"][value="${id}"]`)) {
                console.error('The job_id field has lost its default value');
            }
        }
    },
]);

    // This tour addresses an issue that occurred in a website form containing
    // the 'hide-change-model' attribute. Specifically, when a model-required
    // field is selected, the alert message should not display an undefined
    // action name.
    wTourUtils.registerWebsitePreviewTour('model_required_field_should_have_action_name', {
        test: true,
        url: '/jobs',
    }, () => [{
        content: "Select Job",
        trigger: "iframe h3:contains('Guru')",
    }, {
        content: "Apply",
        trigger: "iframe a:contains('Apply')",
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "click on the your name field",
        trigger: "iframe #hr_recruitment_form div.s_website_form_model_required",
    }, {
        content: "Select model-required field",
        trigger: "we-customizeblock-options we-alert > span:not(:contains(undefined))",
        isCheck: true,
    }
]);

__exports[Symbol.for("default")] = {};

return __exports;
});
;

/*************************************************************
*  Filepath: /website_crm/static/tests/tours/website_crm.js  *
*  Lines: 90                                                 *
*************************************************************/
odoo.define('@website_crm/../tests/tours/website_crm', ['@web/core/registry', '@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

    wTourUtils.registerWebsitePreviewTour('website_crm_pre_tour', {
        test: true,
        url: '/contactus',
        edition: true,
    }, () => [{
        content: "Select contact form",
        trigger: "iframe #wrap.o_editable section.s_website_form",
    }, {
        content: "Open action select",
        trigger: "we-select:has(we-button:contains('Create an Opportunity')) we-toggler",
        extra_trigger: "#oe_snippets .o_we_customize_snippet_btn.active",
    }, {
        content: "Select 'Create an Opportunity' as form action",
        trigger: "we-select we-button:contains('Create an Opportunity')",
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Ensure form model has changed and page reload is done after save",
        trigger: "iframe section.s_website_form form[data-model_name='crm.lead']",
        isCheck: true,
    }]);

    registry.category("web_tour.tours").add('website_crm_tour', {
        test: true,
        url: '/contactus',
        steps: () => [{
        content: "Complete name",
        trigger: "input[name=contact_name]",
        run: "text John Smith",
    }, {
        content: "Complete phone number",
        trigger: "input[name=phone]",
        run: "text +32 485 118.218"
    }, {
        content: "Complete Email",
        trigger: "input[name=email_from]",
        run: "text john@smith.com"
    }, {
        content: "Complete Company",
        trigger: "input[name=partner_name]",
        run: "text Odoo S.A."
    }, {
        content: "Complete Subject",
        trigger: "input[name=name]",
        run: "text Useless message"
    }, {
        content: "Complete Subject",
        trigger: "textarea[name=description]",
        run: "text ### TOUR DATA ###"
    }, {
        content: "Send the form",
        trigger: ".s_website_form_send"
    }, {
        content: "Check we were redirected to the success page",
        trigger: "#wrap:has(h1:contains('Thank You!'))",
        isCheck: true,
    }]});

    registry.category("web_tour.tours").add('website_crm_catch_logged_partner_info_tour', {
        test: true,
        url: '/contactus',
        steps: () => [{
        content: "Complete Subject",
        trigger: "input[name=name]",
        run: "text Useless subject"
    }, {
        content: "Complete Subject",
        trigger: "textarea[name=description]",
        run: "text ### TOUR DATA PREFILL ###"
    }, {
        content: "Send the form",
        trigger: ".s_website_form_send"
    }, {
        content: "Check we were redirected to the success page",
        trigger: "#wrap:has(h1:contains('Thank You!'))",
        isCheck: true,
    }]});

    __exports[Symbol.for("default")] = {};

return __exports;
});
;

/**************************************************************************************
*  Filepath: /mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js  *
*  Lines: 41                                                                          *
**************************************************************************************/
odoo.define('@mail_enterprise/../tests/tours/discuss_channel_expand_test_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail_enterprise/tests/test_discuss_channel_expand.py
 */
registry
    .category("web_tour.tours")
    .add("mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js", {
        test: true,
        steps: () => [
            {
                content:
                    "Click on 'Open Actions Menu' in the chat window header to show expand button",
                trigger:
                    '.o-mail-ChatWindow:contains("test-mail-channel-expand-tour") [title="Open Actions Menu"]',
            },
            {
                content: "Click on expand button to open channel in Discuss",
                trigger:
                    '.o-mail-ChatWindow:contains("test-mail-channel-expand-tour") [title="Open in Discuss"]',
            },
            {
                content:
                    "Check that first message of #test-mail-channel-expand-tour is shown in Discuss app",
                trigger:
                    '.o-mail-Discuss-content .o-mail-Message-body:contains("test-message-mail-channel-expand-tour")',
                run: () => {},
            },
        ],
    });

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /appointment_hr_recruitment/static/tests/tours/appointment_hr_recruitment.js  *
*  Lines: 47                                                                               *
*******************************************************************************************/
odoo.define('@appointment_hr_recruitment/../tests/tours/appointment_hr_recruitment', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const oldWriteText = navigator.clipboard.writeText;

registry.category("web_tour.tours").add('appointment_hr_recruitment_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="hr_recruitment.menu_hr_recruitment_root"]',
        run: 'click',
    }, {
        trigger: '.o_kanban_record:contains("Test Job")',
        run: 'click',
    }, {
        trigger: '.o_kanban_record:contains("Test Applicant")',
        run: 'click',
    },{
        trigger: 'button[name="action_makeMeeting"]',
        run: 'click',
    }, {
        trigger: 'button.dropdownAppointmentLink',
        run: 'click',
    }, {
        trigger: '.o_appointment_button_link:contains("Test AppointmentHrRecruitment")',
        run: () => {
            // Patch and ignore write on clipboard in tour as we don't have permissions
            navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
            $('.o_appointment_button_link:contains("Test AppointmentHrRecruitment")').click();
        },
    }, {
        trigger: '.o_appointment_discard_slots',
        run: () => {
            $('.o_appointment_discard_slots').click();
            // Re-patch the function with the previous writeText
            navigator.clipboard.writeText = oldWriteText;
        },
    }],
});

return __exports;
});
;

/***************************************************
*  Filepath: /auth_totp/static/tests/totp_flow.js  *
*  Lines: 350                                      *
***************************************************/
odoo.define('@auth_totp/../tests/totp_flow', ['@web/core/network/rpc_service', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { jsonrpc } = require("@web/core/network/rpc_service");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openRoot() {
    return [{
        content: "return to client root to avoid race condition",
        trigger: 'body',
        run() {
            $('body').addClass('wait');
            window.location = '/web';
        }
    }, {
        content: "wait for client reload",
        trigger: 'body:not(.wait)',
        run() {}
    }];
}
function openUserProfileAtSecurityTab() {
    return [{
        content: 'Open user account menu',
        trigger: '.o_user_menu .dropdown-toggle',
        run: 'click',
    }, {
        content: "Open preferences / profile screen",
        trigger: '[data-menu=settings]',
        run: 'click',
    }, {
        content: "Switch to security tab",
        trigger: 'a[role=tab]:contains("Account Security")',
        run: 'click',
    }];
}

/**
 * Checks that the TOTP button is in the specified state (true = enabled =
 * can disable, false = disabled = can enable), then closes the profile dialog
 * if it's one (= hr not installed).
 *
 * If no totp state is provided, just checks that the toggle exists.
 */
function closeProfileDialog({content, totp_state}) {
    let trigger;
    switch (totp_state) {
    case true: trigger = 'button[name=action_totp_disable]'; break;
    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;
    case undefined: trigger = 'button.o_auth_2fa_btn'; break;
    default: throw new Error(`Invalid totp state ${totp_state}`)
    }

    return [{
        content,
        trigger,
        run() {
            const $modal = this.$anchor.parents('.o_dialog');
            if ($modal.length) {
                $modal.find('button[name=preference_cancel]').click()
            }
        }
    }, {
        trigger: 'body',
        async run() {
            while (document.querySelector('.o_dialog')) {
                await Promise.resolve();
            }
            this.$anchor.addClass('dialog-closed');
        },
    }, {
        trigger: 'body.dialog-closed',
        run() {},
    }];
}

registry.category("web_tour.tours").add('totp_tour_setup', {
    test: true,
    url: '/web',
    steps: () => [...openUserProfileAtSecurityTab(), {
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_enable_wizard]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text test_user',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("When requested to do so")',
    run() {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    async run(helpers) {
        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');
        const $copyBtn = $secret.find('button');
        $copyBtn.remove();
        const token = await jsonrpc('/totphook', {
            secret: $secret.text()
        });
        helpers.text(token, '[name=code] input');
        helpers.click('button.btn-primary:contains(Activate)');
        $('body').addClass('got-token')
    }
}, {
    content: 'wait for rpc',
    trigger: 'body.got-token',
    run() {}
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: true,
}),
]});

registry.category("web_tour.tours").add('totp_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text test_user',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text test_user',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        // TODO: if tours are ever async-aware the click should get moved out,
        //       but currently there's no great way to make the tour wait until
        //       we've retrieved and set the token: `:empty()` is aboutthe text
        //       content of the HTML element, not the JS value property. We
        //       could set a class but that's really no better than
        //       procedurally clicking the button after we've set the input.
        const token = await jsonrpc('/totphook');
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
}]});

registry.category("web_tour.tours").add('totp_login_device', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text test_user',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text test_user',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "check remember device box",
    trigger: 'label[for=switch-remember]',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        const token = await jsonrpc('/totphook')
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run: 'click',
}, {
    content: "click the Log out button",
    trigger: '.dropdown-item[data-menu=logout]',
}, {
    content: "check that we're back on the login page or go to it",
    trigger: 'input#login, a:contains(Log in)'
}, {
    content: "input login again",
    trigger: 'input#login',
    run: 'text test_user',
}, {
    content: 'input password again',
    trigger: 'input#password',
    run: 'text test_user',
}, {
    content: "click da button again",
    trigger: 'button:contains("Log in")',
},  {
    content: "check we're logged in without 2FA",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
},
// now go and disable two-factor authentication would be annoying to do in a separate tour
// because we'd need to login & totp again as HttpCase.authenticate can't
// succeed w/ totp enabled
...openUserProfileAtSecurityTab(),
{
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_disable]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text test_user',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: false
}),
]});

registry.category("web_tour.tours").add('totp_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text test_user',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text test_user',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
},
// normally we'd end the tour here as it's all we care about but there are a
// bunch of ongoing queries from the loading of the web client which cause
// issues, so go and open the preferences / profile screen to make sure
// everything settles down
...openUserProfileAtSecurityTab(),
// close the dialog if that makes sense
...closeProfileDialog({})
]});

const columns = {};
registry.category("web_tour.tours").add('totp_admin_disables', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    content: 'Go to settings',
    trigger: '[data-menu-xmlid="base.menu_administration"]'
}, {
    content: 'Wait for page',
    trigger: '.o_menu_brand:contains("Settings")',
    run() {}
}, {
    content: "Open Users menu",
    trigger: '[data-menu-xmlid="base.menu_users"]'
}, {
    content: "Open Users view",
    trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
    run(helpers) {
        // funny story: the users view we're trying to reach, sometimes we're
        // already there, but if we re-click the next step executes before the
        // action has the time to re-load, the one after that doesn't, and our
        // selection get discarded by the action reloading, so here try to
        // see if we're already on the users action through the breadcrumb and
        // just close the menu if so
        const $crumb = $('.breadcrumb');
        if ($crumb.text().indexOf('Users') === -1) {
            // on general settings page, click menu
            helpers.click();
        } else {
            // else close menu
            helpers.click($('[data-menu-xmlid="base.menu_users"]'));
        }
    }
}, {
    content: "Find test_user User",
    trigger: 'td.o_data_cell:contains("test_user")',
    run(helpers) {
        const $titles = this.$anchor.closest('table').find('tr:first th');
        for (let i=0; i<$titles.length; ++i) {
            columns[$titles[i].getAttribute('data-name')] = i;
        }
        const $row = this.$anchor.closest('tr');
        const sel = $row.find('.o_list_record_selector input[type=checkbox]');
        helpers.click(sel);
    }
}, {
    content: "Open Actions menu",
    trigger: 'button.dropdown-toggle:contains("Action")'
}, {
    content: "Select totp remover",
    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'
}, { // enhanced security yo
    content: "Check that we have to enter enhanced security mode & input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text admin',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(test_user)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check 2FA button",
    trigger: 'body',
    run: () => {
        const button = document.querySelector('button[name=action_totp_enable_wizard]').disabled
        if (!button) {
            console.error("2FA button should be disabled.");
        }
    },
}
]})

return __exports;
});
;

/********************************************************
*  Filepath: /auth_totp_mail/static/tests/totp_flow.js  *
*  Lines: 82                                            *
********************************************************/
odoo.define('@auth_totp_mail/../tests/totp_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openAccountSettingsTab() {
    return [{
        content: 'Go to settings',
        trigger: '[data-menu-xmlid="base.menu_administration"]'
    }, {
        content: 'Wait for page',
        trigger: '.o_menu_brand:contains("Settings")',
        run: () => {}
    }, {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]'
    }, {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: function (helpers) {
            // funny story: the users view we're trying to reach, sometimes we're
            // already there, but if we re-click the next step executes before the
            // action has the time to re-load, the one after that doesn't, and our
            // selection get discarded by the action reloading, so here try to
            // see if we're already on the users action through the breadcrumb and
            // just close the menu if so
            const $crumb = $('.breadcrumb');
            if ($crumb.text().indexOf('Users') === -1) {
                // on general settings page, click menu
                helpers.click();
            } else {
                // else close menu
                helpers.click($('[data-menu-xmlid="base.menu_users"]'));
            }
        }
    }];
}

registry.category("web_tour.tours").add('totp_admin_self_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(admin)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that user cannot invite themselves to use 2FA.",
    trigger: "body",
    run: function () {
        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];
        if (!inviteBtn) {
            $('body').addClass('CannotInviteYourself');
        }
    }
}, {
    content: "check that user cannot invite themself.",
    trigger: "body.CannotInviteYourself",
    isCheck: true,
}]});

registry.category("web_tour.tours").add('totp_admin_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(test_user)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that test_user user can be invited to use 2FA.",
    trigger: "button:contains(Invite to use 2FA)",
    isCheck: true,
}]});

return __exports;
});
;

/************************************************************
*  Filepath: /auth_totp_portal/static/tests/totp_portal.js  *
*  Lines: 128                                               *
************************************************************/
odoo.define('@auth_totp_portal/../tests/totp_portal', ['@web/core/registry', '@web/core/network/rpc_service'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { jsonrpc } = require("@web/core/network/rpc_service");

registry.category("web_tour.tours").add('totportal_tour_setup', {
    test: true,
    url: '/my/security',
    steps: () => [{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_enable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("scan the barcode below")',
    run: () => {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    run: async function(helpers) {
        const secret = this.$anchor.closest('div').find('span[name="secret"]').text();
        const token = await jsonrpc('/totphook', {
            secret
        });
        helpers._text(helpers._get_action_values('input[name=code]'), token);
        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));
    }
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Disable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    run: async function (helpers) {
        const token = await jsonrpc('/totphook');
        helpers._text(helpers._get_action_values(), token);
        // FIXME: is there a way to put the button as its own step trigger without
        //        the tour straight blowing through and not waiting for this?
        helpers._click(helpers._get_action_values('button:contains("Log in")'));
    }
}, {
    content: "check we're logged in",
    trigger: "h3:contains(My account)",
    run: () => {}
}, {
    content: "go back to security",
    trigger: "a:contains(Security)",
},{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_disable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Enable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "check we're logged in",
    trigger: "h3:contains(My account)",
    run: () => {}
}]});

return __exports;
});
;

/****************************************************************
*  Filepath: /documents_spreadsheet/static/tests/utils/tour.js  *
*  Lines: 69                                                    *
****************************************************************/
odoo.define('@documents_spreadsheet/../tests/utils/tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * @param {string} tourName
 * @param {string} templateName
 */
__exports.registerTemplateTour = registerTemplateTour; function registerTemplateTour(tourName, templateName) {
    registry.category("web_tour.tours").add(
        tourName,
        {
            test: true,
            url: "/web",
            steps: () => [
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: 'button[data-menu-xmlid="documents.Config"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger:
                    '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger: ".o_searchview .o_facet_remove",
                content: 'Remove "My templates" filter',
                run: "click",
            },
            {
                trigger: "input.o_searchview_input",
                content: "Search the template",
                run: `text ${templateName}`,
            },
            {
                trigger: ".o_menu_item.focus",
                content: "Validate search",
                run: "click",
            },
            {
                trigger: `tr.o_data_row:first-child td[data-tooltip="${templateName}"]`,
                content: "Wait search to complete",
            },
            {
                trigger: "button.o-new-spreadsheet",
                content: "Create spreadsheet from template",
                run: "click",
            },
            {
                trigger: ".o-spreadsheet",
                content: "Redirected to spreadsheet",
                isCheck: true,
            },
        ]
    });
}

return __exports;
});
;

/**********************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/clone_xlsx.js  *
*  Lines: 94                                                          *
**********************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/clone_xlsx', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module**/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_clone_xlsx", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
        },
        {
            trigger: '.o_search_panel_label_title:contains("Test folder")',
            content: "Open Test folder workspace",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Test folder")',
            extra_trigger: '.o_inspector_value:contains("1")',
            content: "Make sure we start with one card",
        },
        {
            trigger: ".o_document_xlsx",
            content: "Open xlsx card",
        },
        {
            trigger: "input#willArchive",
            content: "Uncheck sending to trash",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Open with Odoo Spreadsheet",
        },
        {
            trigger: ".o-spreadsheet-topbar",
            content: "Check that we are now in Spreadsheet",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first:has('.o_document_spreadsheet')",
            content: "Check a spreadsheet document was created",
            isCheck: true,
        },
        {
            trigger: ".o_document_xlsx",
            content: "Re-open the xlsx card",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Open with Odoo Spreadsheet without unchecking the box",
        },
        {
            trigger: ".o-spreadsheet-topbar",
            content: "Check that we are now in Spreadsheet",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer:not(:has(.o_kanban_record .o_document_xlsx))",
            content: "Check that XLSX is no longer visible",
            isCheck: true,
        },
        {
            trigger: '.o_search_panel_label_title:contains("Trash")',
            content: "Open Trash",
        },
        {
            trigger: ".o_document_xlsx",
            content: "Select xlsx document",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Restore xlsx document",
        },
        {
            trigger: ".o_kanban_renderer",
            extra_trigger: '.o_inspector_value:contains("3")',
        },
    ],
});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_empty_sheet_tour.js  *
*  Lines: 128                                                                      *
***********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/create_empty_sheet_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_create_empty_sheet", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: ".o_cp_buttons:contains('Upload') .dropdown-toggle.dropdown-toggle-split",
            content: "Open dropdown",
        },
        {
            trigger: ".o_documents_kanban_spreadsheet",
            content: "Open template dialog",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet-create",
            content: "Create new spreadsheet",
            run: "click",
        },
        {
            trigger: 'span[title="Fill Color"]',
            content: "Choose a color",
            run: "click",
        },
        {
            trigger: '.o-color-picker-line-item[data-color="#990000"]',
            content: "Choose a color",
            run: "click",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Reopen the sheet",
            run: "click",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
            run: 'click',
        },
        {
            trigger: '.o_action_manager:not(:has(.o_spreadsheet_action))',
            content: "Wait for the spreadsheet to be properly unloaded",
            run() {},
        },
    ],
});
registry.category("web_tour.tours").add("spreadsheet_create_list_view", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: "button.o_switch_view.o_list",
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle",
            extra_trigger: ".o_list_view",
            content: "Open the cog menu",
            run: "click",
        },
        {
            trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle:contains(Spreadsheet)",
            run: function () {
                this.$anchor[0].dispatchEvent(new MouseEvent("mouseenter"));
            },
        },
        {
            trigger: ".o_insert_list_spreadsheet_menu",
            content: "Insert in spreadsheet",
            run: "click",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Confirm",
            run: "click",
        },
        {
            trigger: ".o-topbar-topleft .o-topbar-menu[data-id='data']",
            content: "Open Data menu",
            run: "click",
        },
        {
            trigger: ".o-menu-item[data-name='item_list_1']",
            content: "Open List Side Panel",
            run: "click",
        },
        {
            trigger: ".o_pivot_cancel",
            content: "Go back to the list of lists",
            run: "click",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
            run: "click",
        },
        {
            trigger: '.o_action_manager:not(:has(.o_spreadsheet_action))',
            content: "Wait for the spreadsheet to be properly unloaded",
            run() {},
        },
    ],
});

return __exports;
});
;

/********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_template_tour.js  *
*  Lines: 97                                                                    *
********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/create_template_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const SHEET_NAME = "Res Partner Test Spreadsheet";
const TEMPLATE_NAME = `${SHEET_NAME} - Template`;

registry.category("web_tour.tours").add(
    "documents_spreadsheet_create_template_tour",
    {
        test: true,
        url: "/web",
        steps: () => [
        ...stepUtils.goToAppSteps("documents.menu_root", "Open Document app"),
        {
            trigger: 'li[title="Test folder"] header',
            content: "Open the test folder",
            run: "click",
        },
        {
            trigger: `div[title="${SHEET_NAME}"]`,
            content: "Select Test Sheet",
            run: "click",
        },
        {
            trigger: `button.o_switch_view.o_list`,
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: `img[title="${SHEET_NAME}"]`,
            content: "Open the sheet",
            run: "click",
        },
        {
            trigger: `.o-topbar-menu[data-id="file"]`,
            content: "Open the file menu",
            run: "click",
        },
        {
            trigger: `.o-menu-item[data-name="save_as_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: `button[name="save_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: 'button[data-menu-xmlid="documents.Config"]',
            content: "Open Configuration menu",
            run: "click",
        },
        {
            trigger:
                '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
            content: "Open Templates menu",
            run: "click",
        },
        {
            trigger: ".o_searchview .o_facet_remove",
            content: 'Remove "My templates" filter',
            run: "click",
        },
        {
            trigger: "input.o_searchview_input",
            content: "Search the template",
            run: `text ${TEMPLATE_NAME}`,
        },
        {
            trigger: ".o_menu_item.focus",
            content: "Validate search",
            run: "click",
        },
        {
            trigger: `tr.o_data_row:first-child td[data-tooltip="${TEMPLATE_NAME}"]`,
            content: "Wait search to complete",
        },
        {
            trigger: "button.o-new-spreadsheet",
            content: "Create spreadsheet from template",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet",
            content: "Redirected to spreadsheet",
        },
    ]
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/open_pivot_sheet_tour.js  *
*  Lines: 114                                                                    *
*********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/open_pivot_sheet_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

function assert(current, expected, info) {
    if (current !== expected) {
        fail(info + ': "' + current + '" instead of "' + expected + '".');
    }
}

function fail(errorMessage) {
    throw new TourError(errorMessage);
}

const SHEETNAME = "Res Partner Test Spreadsheet";
registry.category("web_tour.tours").add("spreadsheet_open_pivot_sheet", {
    test: true,
    steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: 'li[title="Test folder"] header',
            content: "Open the test folder",
            run: "click",
        },
        {
            trigger: `div[title="${SHEETNAME}"]`,
            content: "Select Test Sheet",
            run: "click",
        },
        {
            trigger: `button.o_switch_view.o_list`,
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: `img[title="${SHEETNAME}"]`,
            content: "Open the sheet",
            run: "click",
        },
        {
            trigger: "div.o_topbar_filter_icon",
            content: "Open Filters",
            run: "click",
        },
        {
            trigger: "div.pivot_filter",
            content: "",
            run: function (actions) {
                const pivots = document.querySelectorAll("div.pivot_filter");
                assert(pivots.length, 1, "There should be one filter");
                const pivot = pivots[0];
                assert(
                    pivot.querySelector("div.o_side_panel_title").textContent,
                    "MyFilter1",
                    "Invalid filter name"
                );
                assert(
                    Boolean(
                        pivot.querySelector(
                            'div.o_multi_record_selector span.badge[title="AdminDude"]'
                        )
                    ),
                    true,
                    "Wrong default filter value"
                );
                actions.click(pivot.querySelector(".o_side_panel_filter_icon.fa-cog"));
            },
        },
        {
            trigger: ".o_spreadsheet_filter_editor_side_panel",
            content: "Check filter values",
            run: function () {
                const defaultFilterValue = document.querySelectorAll(
                    'div.o_multi_record_selector span.badge[title="AdminDude"]'
                );
                assert(
                    defaultFilterValue.length,
                    1,
                    "There should be a default value in the filter..."
                );
                assert(
                    document.querySelector(".o_side_panel_related_model input").value,
                    "User",
                    "Wrong model selected"
                );

                const fieldsValue = document.querySelector(
                    "div.o_model_field_selector_value span.o_model_field_selector_chain_part"
                );
                assert(fieldsValue.textContent.trim(), "Users");
            },
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Sheet is visible in Documents",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/**************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/save_multipage.js  *
*  Lines: 83                                                              *
**************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/save_multipage', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils, TourError } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_save_multipage", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
        },
        {
            trigger: ".o_cp_buttons:contains('Upload') .dropdown-toggle.dropdown-toggle-split",
            content: "Open dropdown",
        },
        {
            trigger: ".o_documents_kanban_spreadsheet",
            content: "Open template dialog",
        },
        {
            trigger: ".o-spreadsheet-create",
            content: "Create new spreadsheet",
        },
        {
            trigger: ".o-add-sheet",
            content: "Add a sheet",
        },
        {
            trigger: ".o-sheet-list .o-ripple-container:nth-child(2)",
            content: "Check that there are now two sheets",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first .o_kanban_stack ",
            content: "Check is rendered as multipage",
            isCheck: true,
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Reopen the sheet",
        },
        {
            trigger: ".o-sheet .o-sheet-icon",
            content: "Open sheet dropdown",
        },
        {
            trigger: '.o-popover .o-menu-item[title="Delete"]',
            content: "Delete sheet",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Confirm delete sheet",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first",
            content: "Check is rendered as single page",
            run: () => {
                const card = document.querySelectorAll(
                    ".o_kanban_renderer .o_kanban_record:first-child > div.o_kanban_stack"
                );
                if (card.length > 1) {
                    throw new TourError("The card should not be rendered as multipage.");
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************************************
*  Filepath: /documents_spreadsheet_account/static/tests/tours/spreadsheet_account_tours.js  *
*  Lines: 11                                                                                 *
*********************************************************************************************/
odoo.define('@documents_spreadsheet_account/../tests/tours/spreadsheet_account_tours', ['@documents_spreadsheet/../tests/utils/tour'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registerTemplateTour } = require("@documents_spreadsheet/../tests/utils/tour");

registerTemplateTour("spreadsheet_template_features", "Template with special characters");

return __exports;
});
;

/*********************************************************************************
*  Filepath: /documents_spreadsheet_crm/static/tests/tours/insert_pivot_tour.js  *
*  Lines: 43                                                                     *
*********************************************************************************/
odoo.define('@documents_spreadsheet_crm/../tests/tours/insert_pivot_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "insert_crm_pivot_in_spreadsheet",
    {
        test: true,
        url: "/web",
        steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: "Open CRM app",
            run: "click",
        },
        {
            trigger: 'button[data-tooltip="Pivot"]',
            content: "Open Pivot view",
            run: "click",
        },
        {
            trigger: ".o_pivot_add_spreadsheet",
            content: "Insert pivot in the spreadsheet",
            run: "click",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Insert in a new spreadsheet",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet",
            content: "Redirected to spreadsheet",
            isCheck: true,
        },
    ]
});

return __exports;
});
;

/**************************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_plan_change_warnings.js  *
*  Lines: 1127                                                            *
**************************************************************************/
odoo.define('odoo.test.trial.tours.plan.change.warnings', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

function checkPricingChangeWarningShown(options) {
    const modalTitle = (options || {}).modal_title || "You are about to modify your pricing plan";
    return {
        content: "Check that a warning about plan change is shown",
        trigger: ".modal-header:contains(" + modalTitle + ")",
        run: function() {}, // this is a check
        variant: (options || {}).variant,
        warning_step: true,
        plan: (options || {}).plan,
    };
}

function confirmPricingChange(options) {
    const btnText = (options || {}).button || "Confirm";
    return {
        content: "Click on Confirm",
        trigger: ".modal-footer .btn-primary:contains(" + btnText + ")",
        run: "click",
        variant: (options || {}).variant,
        warning_step: true,
    };
}

/**
 * Filter steps for a those matching specific conditions
 * @param {*} steps TourStep
 * @param {*} filterFn Function that return True if step should be kept otherwise False
 */
function filterSteps(steps, filterFn) {
    return steps.filter(filterFn).map((step) => {
        // clone step and remove non standard keys (mandatory since saas~17.4)
        const keysToDiscard = ['variant', 'warning_step', 'display_step', 'version'];
        return Object.fromEntries(Object.entries(step).filter(e => !keysToDiscard.includes(e[0])));
    });
}

/* ----------------------------------------------------------------------
 * Test Studio promote dialog warning
 */

function preparePromoteStudioTour() {

    const removeIframeNode = function (template) {
        const iframe_node = template ? template.querySelector("iframe") : null;
        if (iframe_node) {
            iframe_node.parentNode.removeChild(iframe_node);
        }
    };

    const patchStudioDialogTemplateInline = function (app) {
        removeIframeNode(app.rawTemplates["web_enterprise.PromoteStudioDialog"]);
        delete app.templates["web_enterprise.PromoteStudioDialog"]; /// remove it from compiled template cache
    };

    // Remove embedded YT video inside Promote Studio dialog, we don't need it
    // (for saas~17.2+ we add an extension template as the template inheritance is
    // done in the browser or for older version we patch it directly)
    if (odoo.loader && odoo.loader.modules.get("@web/core/templates")) { // >= saas-17.2
        const registerTemplateExtension = odoo.loader.modules.get("@web/core/templates").registerTemplateExtension;
        registerTemplateExtension(
            "web_enterprise.PromoteStudioDialog", "--test-install-studio-tours--",
            `
                <t t-inherit="web_enterprise.PromoteStudioDialog" t-inherit-mode="extension">
                    <xpath expr="//iframe" position="replace"/>
                </t>
            `
        );
    } else if (odoo.loader) { // >= 17.0
        patchStudioDialogTemplateInline(odoo.loader.modules.get("@web/core/utils/render").renderToString.app);
    } else { // >=16.0
        patchStudioDialogTemplateInline(odoo.__DEBUG__.services["@web/core/utils/render"].renderToString.app);
    }
}

var tourPromoteStudioInstallWarnSteps = [
    {
        content: "Prepare tour",
        trigger: "body",
        run: preparePromoteStudioTour,
    },
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        run: "click",
    },
    {
        content: "Switch to List view",
        trigger: '.o_switch_view.o_list',
        run: "click",
    },
    {
        content: "Open optional fields dropdown",
        trigger: '.o_list_view .o_optional_columns_dropdown_toggle, ' +
                 '.o_list_view .o_optional_columns_dropdown .dropdown-toggle',
        run: "click",
    },
    {
        content: "Click on 'Add Custom field'",
        trigger:
            '.o-overlay-container .o-dropdown--menu .dropdown-item-studio,' + // >=saas~17.2
            '.o_list_view .o_optional_columns_dropdown.dropdown-menu .dropdown-item-studio, ' +
            '.o_list_view .o_optional_columns_dropdown .dropdown-menu .dropdown-item-studio',
        run: "click",
    },
    {
        content: "Click on 'Install Odoo Studio'",
        trigger: "button.o_install_studio",
        run: "click",
    },
    checkPricingChangeWarningShown({plan: 'trial'}),
    checkPricingChangeWarningShown({plan: 'standard', modal_title: "Pricing Upgrade"}),
    confirmPricingChange(),
    {
        content: "Check that page reloads and we're still on the list view",
        trigger: "body:not(:has(.modal)) .o_list_view",
        run: function() {}, // this is a check
    }
];

tour.register('trial_user_install_studio_warning_trial', {test: true},
    filterSteps(tourPromoteStudioInstallWarnSteps, step => !step.plan || step.plan === 'trial')
);
tour.register('trial_user_install_studio_warning_std', {test: true},
    filterSteps(tourPromoteStudioInstallWarnSteps, step => !step.plan || step.plan === 'standard')
);
tour.register('trial_user_install_studio_no_warning', {test: true},
    filterSteps(tourPromoteStudioInstallWarnSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test User invitation warning from Settings dashboard
 */

var tourInviteUserFromSettingDashboardSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Fill new users to invite",
        trigger: "input.o_user_emails",
        run: function(helpers) {
            const users_list = "user1@example.net,user2@example.net";
            if (helpers.edit) { /* saas~17.3+ version detection */
                // saas~17.3: normal helpers.edit() methods simulate user input
                // using keypress events but this trigger the confirmation
                // dialog as soon as the comma key is press - i.e before we can
                // input the second email; so here directly update the value and
                // trigger a change event.
                const element = this.anchor;
                helpers.click(element);
                element.value = users_list;
                element.dispatchEvent(new Event("input"));
                element.dispatchEvent(new Event("change"));
            } else {
                helpers.text(users_list);
            }
        }
    },
    {
        content: "Click on 'Invite'",
        trigger: ".o_web_settings_invite",
        run: "click",
    },
    checkPricingChangeWarningShown({modal_title: "Users Invitation"}),
    confirmPricingChange({button: "Invite User(s)"}),
    {
        content: "Check that page reloads and we're still on settings dahsboard",
        trigger: ".oe_form_configuration",
        run: function() {}, // this is a check
    }
];

tour.register('trial_user_invite_from_setting_dashboard_warning', {test: true},
    filterSteps(tourInviteUserFromSettingDashboardSteps, step => true),
);
tour.register('trial_user_invite_from_setting_dashboard_no_warning', {test: true},
    filterSteps(tourInviteUserFromSettingDashboardSteps, step => !step.warning_step),
);

function getTourCheckUserSeatsDisplay(alertType) {
    return [{
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: `Check that the user seats widget is displayed in ${alertType}`,
        trigger: `div.o_user_seats_display > p.alert.alert-${alertType}`,
        display_step: true,
        run: function() {}, // this is a check
    },
    {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]',
        run: "click",
    },
    {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: "click",
    },
    {
        content: "Check that the user seats widget is displayed ${alertType}",
        trigger: `div.o_user_seats_display > p.alert.alert-${alertType}`,
        display_step: true,
        run: function() {}, // this is a check
    },
    {
        content: "Access the user form view",
        trigger: 'td.o_data_cell',
        run: "click",
    },
    {
        content: "Check that the user seats widget is displayed ${alertType}",
        trigger: `div.o_user_seats_display > p.alert.alert-${alertType}`,
        display_step: true,
        run: function() {}, // this is a check
    }];
}

tour.register('trial_user_seats_no_display', {test: true},
    filterSteps(getTourCheckUserSeatsDisplay('success'), step => !step.display_step),
);

for (const alertType of ['success', 'warning', 'danger']) {
    tour.register(`trial_user_seats_display_${alertType}`, {test: true},
        filterSteps(getTourCheckUserSeatsDisplay(alertType), step => true),
    );
}

var tourCheckUserSeatsSettingsNoDisplay = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: 'Check that the user seats widget is not displayed',
        trigger: '.o_user_seats_display:empty',
        version: '16.0',
        run: function() {}, // this is a check
    },
    {
        content: 'Check that the user seats widget is not displayed',
        trigger: '.o_user_seats_display:empty',
        allowInvisible: true,
        version: '17.0',
        run: function() {}, // this is a check
    },
    {
        content: 'Check that the user seats widget is not displayed',
        trigger: '.o_user_seats_display:empty:not(:visible)',
        version: '18.0',
        run: function() {}, // this is a check
    },
    {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]',
        run: "click",
    },
    {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: "click",
    },
    {
        content: "Check that the user seats widget is displayed in alert-info",
        trigger: `div.o_user_seats_display > p.alert.alert-info`,
        run: function() {}, // this is a check
    },
    {
        content: "Access the user form view",
        trigger: 'td.o_data_cell',
        run: "click",
    },
    {
        content: "Check that the user seats widget is displayed in alert-info",
        trigger: `div.o_user_seats_display > p.alert.alert-info`,
        run: function() {}, // this is a check
    }
];

tour.register(`trial_user_seats_settings_no_display_16`, {test: true},
    filterSteps(tourCheckUserSeatsSettingsNoDisplay, step => !step.version || step.version === '16.0')
);
tour.register(`trial_user_seats_settings_no_display_17`, {test: true},
    filterSteps(tourCheckUserSeatsSettingsNoDisplay, step => !step.version || step.version === '17.0')
);
tour.register(`trial_user_seats_settings_no_display_18`, {test: true},
    filterSteps(tourCheckUserSeatsSettingsNoDisplay, step => !step.version || step.version === '18.0')
);

/* ----------------------------------------------------------------------
 * Test User invitation warning from res.user Form
 */

var tourInviteUserFromUserMenuSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]',
        run: "click",
    },
    {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: "click",
    },
    {
        content: "Get an empty form",
        trigger: 'button.o_list_button_add',
        run: "click",
    },
    {
        content: "Fill new user form",
        trigger: "input[name=name],div[name=name]>input",
        run: "text Jean-Michel Folklore",
    },
    {
        content: "Fill new user email",
        trigger: "input[name=login],div[name=login]>input",
        run: "text jm@folklore.be",
    },
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save, button.btn-primary[type=button][name=execute]",
        run: "click",
    },
    checkPricingChangeWarningShown({modal_title: "Users Invitation"}),
    confirmPricingChange({button: "Confirm"}),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
    }
];

tour.register('trial_user_invite_from_user_form_warning', {test: true},
    filterSteps(tourInviteUserFromUserMenuSteps, step => true),
);
tour.register('trial_user_invite_from_user_form_no_warning', {test: true},
    filterSteps(tourInviteUserFromUserMenuSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from General Settings
 */

var tourSettingsInstallModuleSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Wait for 'General Settings' to be displayed",
        trigger: ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function() {}, // this is a check
    },
    {
        content: "Enable OAuth module",
        trigger: 'label[for*="module_auth_oauth"]',
        run: "click",
    },
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save",
        run: "click",
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled)",
        run: function() {}, // this is a check
    },
];

tour.register('trial_settings_install_module_on_save_warning', {test: true},
    filterSteps(tourSettingsInstallModuleSteps, step => true),
);
tour.register('trial_settings_install_module_on_save_no_warning', {test: true},
    filterSteps(tourSettingsInstallModuleSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from General Settings in Accounting
 * (sign module exception)
 */

var tourSettingsInstallModuleSignSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Wait for 'General Settings' to be displayed",
        trigger: ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function() {}, // this is a check
    },
    {
        content: "Click on 'Accounting' tab",
        trigger: 'a.tab[data-key="account"]',
        run: "click",
    },
    {
        content: "Wait for tab 'Accounting Settings' to be displayed",
        trigger: ".app_settings_block[string='Accounting']",
        run: function() {}, // this is a check
    },
    {
        content: "Ensure 'Sign' feature is really disabled",
        trigger: 'input[id*="sign_invoice"]:not(:checked)',
        run: function() {}, // this is a check
    },
    {
        content: "Scroll because wtf is the tour even doing",
        trigger: 'input[id*="sign_invoice',
        run: function() { this.anchor.scrollIntoView(); },
    },
    {
        content: "Ensure 'Sign' feature is really disabled",
        trigger: 'input[id*="sign_invoice"]:not(:checked)',
        run: function() {}, // this is a check
    },
    {
        content: "Enable Sign module",
        trigger: 'label.o_form_label[for*="sign_invoice"]',
        run: "click",
    },
    {
        content: "Ensure 'Sign' feature is enabled",
        trigger: 'input[id*="sign_invoice"]:checked',
        run: function() {}, // this is a check
    },
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save",
        run: "click",
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled)",
        run: function() {}, // this is a check
    },
];

tour.register('trial_settings_install_module_sign_on_save_warning', {test: true},
    filterSteps(tourSettingsInstallModuleSignSteps, step => true),
);
tour.register('trial_settings_install_module_sign_on_save_no_warning', {test: true},
    filterSteps(tourSettingsInstallModuleSignSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from Apps
 */

var tourAppsModuleInstallSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        run: "click",
    },
    // For kanban
    {
        content: "Click on 'Install' button",
        trigger: '.o_kanban_record .button_immediate_install',
        run: "click",
        variant: 'view_kanban',
    },
    // For form
    {
        content: "Open app record dropdown",
        trigger: '.o_kanban_record:has(.button_immediate_install):first .dropdown-toggle',
        run: "click",
        variant: 'view_form',
    },
    {
        content: "Open app 'Module info'",
        trigger: [
            // >= 18.0
            '.o_popover .oe_kanban_action[name=more_info]',
            // >= saas~17.2
            '.o_kanban_record:has(.button_immediate_install):first .oe_kanban_action_a',
            // >= saas~17.1
            '.o-overlay-container .o-dropdown--kanban-record-menu:first .oe_kanban_action_a',
        ].join(", "),
        run: "click",
        variant: 'view_form',
    },
    {
        content: "Click on 'Install' button",
        trigger: '.o_form_view .button_immediate_install',
        run: "click",
        variant: 'view_form',
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for completion",
        // saas_trial custom. will force button text to "Installed" after
        // button_immediate_install() returns, wait for it
        trigger: "body:not(.o_ui_blocked) .button_immediate_install:contains(Installed)",
        run: function() {}, // this is a check
        // compat. because the target element is disabled:
        isCheck: true,          // for <= saas~17.3
        allowDisabled: true,    // for >= saas~17.4+
    }
];

tour.register('trial_apps_install_module_kanban_warning', {test: true},
    filterSteps(tourAppsModuleInstallSteps, step => (step.variant || 'view_kanban') == 'view_kanban'),
);
tour.register('trial_apps_install_module_kanban_no_warning', {test: true},
    filterSteps(tourAppsModuleInstallSteps,
                step => (step.variant || 'view_kanban') == 'view_kanban' && !step.warning_step),
);
tour.register('trial_apps_install_module_form_warning', {test: true},
    filterSteps(tourAppsModuleInstallSteps, step => (step.variant || 'view_form') == 'view_form'),
);
tour.register('trial_apps_install_module_form_no_warning', {test: true},
    filterSteps(tourAppsModuleInstallSteps,
                step => (step.variant || 'view_form') == 'view_form' && !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test ConfirmModal dismiss and cancel behaviour
 */

var tourAppsModuleInstallAbortSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        run: "click",
    },
    // For kanban
    {
        content: "Click on 'Install' button",
        trigger: '.o_kanban_record .button_immediate_install',
        run: "click",
    },
    checkPricingChangeWarningShown(),
    {
        content: "Click on Cancel",
        trigger: ".modal-footer .btn-secondary:contains('Cancel')",
        run: "click",
        variant: 'btn_cancel'
    },
    {
        content: "Click on X",
        trigger: ".modal-header .btn-close[aria-label='Close']",
        run: "click",
        variant: 'btn_dismiss'
    },
    {
        content: "Check nothing is disabled",
        // Install button should have been re-enabled
        trigger: "body:not(.o_ui_blocked) .button_immediate_install:not([disabled])",
        run: function() {}, // this is a check
        // compat. because the target element is disabled:
        isCheck: true,          // for <= saas~17.3
        allowDisabled: true,    // for >= saas~17.4+
    }
];

tour.register('trial_apps_install_module_cancel', {test: true},
    filterSteps(tourAppsModuleInstallAbortSteps, step => (step.variant || 'btn_cancel') == 'btn_cancel'),
);
tour.register('trial_apps_install_module_dismiss', {test: true},
    filterSteps(tourAppsModuleInstallAbortSteps, step => (step.variant || 'btn_dismiss') == 'btn_dismiss'),
);

/* ----------------------------------------------------------------------
* Test base_automation Install
*/
var tourAppsModuleInstallBaseAutomationSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        run: "click",
    },
    {
        content: "Disable app filter",
        trigger: '.o_facet_remove',
        run: "click",
    },
    {
        content: "Search for 'base_automation'",
        trigger: '.o_searchview_input',
        run: 'text base_automation',
    },
    {
        content: "Click on first autocompletion",
        trigger: [
            // <= saas~18.1
            '.o_menu_item:contains("Module")',
            // >= saas~18.2
            '.o_searchview_autocomplete .o-dropdown-item:contains(Module)',
        ].join(', '),
        run: "click",
    },
    {
        content: "Open app record dropdown",
        trigger: [
            // >= 18.0
            '.o_kanban_record:has(main[title="Automation Rules"]) .dropdown-toggle',
            // <= saas~17.4
            '.o_kanban_record:has(.o_kanban_record_title:contains("Automation Rules")) .dropdown-toggle',
        ].join(', '),
        run: "click",
    },
    {
        content: "Open app 'Module info'",
        trigger: [
            // >= 18.0
            '.o_popover .oe_kanban_action[name=more_info]',
            // >= saas~17.2
            '.o_popover .oe_kanban_action_a[name=more_info]',
            // >= 17.0
            '.o_kanban_record .dropdown-menu .oe_kanban_action_a:first',
        ].join(', '),
        run: "click",
    },
    {
        content: "Click on 'Install' button",
        trigger: '.o_form_view .button_immediate_install',
        run: "click",
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for completion",
        // saas_trial custom. will force button text to "Installed" after
        // button_immediate_install() returns, wait for it
        trigger: "body:not(.o_ui_blocked) .button_immediate_install:contains(Installed):disabled," +
                 "body:not(.o_ui_blocked) .button_immediate_install:contains(Installed):enabled",
        run: function () { }, // this is a check
        // compat. becauuse the target element is disabled:
        isCheck: true,          // for <= saas~17.3
        allowDisabled: true,    // for >= saas~17.4+
    }
];

tour.register('trial_apps_install_base_automation_warning', { test: true },
    filterSteps(tourAppsModuleInstallBaseAutomationSteps, step => true),
);
tour.register('trial_apps_install_base_automation_no_warning', { test: true },
    filterSteps(tourAppsModuleInstallBaseAutomationSteps, step => !step.warning_step),
);
/* ----------------------------------------------------------------------
 * Test Company creation warning
 */

var tourCompanyCreationSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Click on 'Users & Companies' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="base.menu_users"]',
        run: "click",
    },
    {
        content: "Click on 'Companies' menu",
        trigger: '.dropdown-item[data-menu-xmlid="base.menu_action_res_company_form"]',
        run: "click",
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
        run: "click",
    },
    {
        content: "Fill company name",
        trigger: 'div[name="name"] input',
        run: function (actions) {
            const companyName = "MyNewCompany-" + Date.now();
            actions.text_blur(companyName);
        }
    },
    {
        content: "Click on 'Save' button",
        trigger: '.o_form_button_save',
        run: function (actions) {
            if (!window.localStorage.getItem("running_tour")) {
                // >= saas~16.3: ensure "running_tour" is set in local storage
                // to avoid the page being reloaded once the company is created
                window.localStorage.setItem("running_tour", "_dummy_to_skip_page_reload_");
            }
            actions.click();
        }
    },
    checkPricingChangeWarningShown({plan: 'trial'}),
    checkPricingChangeWarningShown({plan: 'standard', modal_title: "Pricing Upgrade"}),
    confirmPricingChange(),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
    }
];

tour.register('trial_company_creation_warning_trial', {test: true},
    filterSteps(tourCompanyCreationSteps, step => !step.plan || step.plan === 'trial'),
);
tour.register('trial_company_creation_warning_std', {test: true},
    filterSteps(tourCompanyCreationSteps, step => !step.plan || step.plan === 'standard'),
);
tour.register('trial_company_creation_no_warning', {test: true},
    filterSteps(tourCompanyCreationSteps, step => !step.warning_step),
);

// Same as above, but via the child_ids m2o field instead
var tourCompanyChildCreationSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        run: "click",
    },
    {
        content: "Click on 'Users & Companies' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="base.menu_users"]',
        run: "click",
    },
    {
        content: "Click on 'Companies' menu",
        trigger: '.dropdown-item[data-menu-xmlid="base.menu_action_res_company_form"]',
        run: "click",
    },
    {
        content: "Click on the first (and only) company",
        trigger: '.o_data_row .o_data_cell[name="name"]',
        run: "click",
    },
    {
        content: "Click on 'Branches' tab",
        trigger: 'a[name="branches"]',
        run: "click",
    },
    {
        content: "Click on 'Add a line'",
        trigger: '.o_field_x2many_list_row_add > a',
        run: "click",
    },
    {
        content: "Fill child company (branch) name",
        trigger: '.modal-body div[name="name"] input',
        run: function (actions) {
            const companyName = "MyNewCompanyBranch-" + Date.now();
            actions.text_blur(companyName);
        }
    },
    {
        content: "Click on modal's 'Save' button",
        trigger: 'footer > .o_form_button_save',
        run: "click",
    },
    {
        content: "Click on main 'Save' button",
        trigger: 'div > .o_form_button_save',
        run: function (actions) {
            if (!window.localStorage.getItem("running_tour")) {
                // >= saas~16.3: ensure "running_tour" is set in local storage
                // to avoid the page being reloaded once the company is created
                window.localStorage.setItem("running_tour", "_dummy_to_skip_page_reload_");
            }
            actions.click();
        }
    },
    checkPricingChangeWarningShown({plan: 'trial'}),
    checkPricingChangeWarningShown({plan: 'standard', modal_title: "Pricing Upgrade"}),
    confirmPricingChange(),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
    }
];

tour.register('trial_company_child_creation_warning_trial', {test: true},
    filterSteps(tourCompanyChildCreationSteps, step => !step.plan || step.plan === 'trial'),
);
tour.register('trial_company_child_creation_warning_std', {test: true},
    filterSteps(tourCompanyChildCreationSteps, step => !step.plan || step.plan === 'standard'),
);
tour.register('trial_company_child_creation_no_warning', {test: true},
    filterSteps(tourCompanyChildCreationSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Cron creation warning, must have debug=1
 */

var tourCronCreationSteps = [
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
        run: "click",
    },
    {
        content: "Fill Cron name",
        trigger: 'div[name="name"] input',
        run: function (actions) {
            const cronName = "TestCron-" + Date.now();
            actions.text_blur(cronName);
        }
    },
    {
        content: "Open Model autocomplete (required)",
        trigger: 'div[name="model_id"] input',
        run: "click",
    },
    {
        content: "Fill Model with first autocomplete element (required)",
        trigger: '.o-autocomplete--dropdown-item:nth-child(1) > a:not(:has(.fa-spin))',
        run: "click",
    },
    {
        content: "Click on 'Save' button",
        trigger: '.o_form_button_save',
        run: function (actions) {
            if (!window.localStorage.getItem("running_tour")) {
                // >= saas~16.3: ensure "running_tour" is set in local storage
                // to avoid the page being reloaded once the company is created
                window.localStorage.setItem("running_tour", "_dummy_to_skip_page_reload_");
            }
            actions.click();
        }
    },
    checkPricingChangeWarningShown({plan: 'trial'}),
    checkPricingChangeWarningShown({plan: 'standard', modal_title: "Pricing Upgrade"}),
    confirmPricingChange(),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
    }
];

tour.register('trial_cron_creation_warning_trial', {test: true},
    filterSteps(tourCronCreationSteps, step => !step.plan || step.plan === 'trial'),
);
tour.register('trial_cron_creation_warning_std', {test: true},
    filterSteps(tourCronCreationSteps, step => !step.plan || step.plan === 'standard'),
);
tour.register('trial_cron_creation_no_warning', {test: true},
    filterSteps(tourCronCreationSteps, step => !step.warning_step),
);

/* ----------------------------------------------------------------------
* Test Module installation warning from Helpdesk Team
*/

function getTourHelpdeskConfigSteps(moduleName, fieldName) {
    return [
    {
        content: "Open 'Helpdesk' app",
        trigger: '.o_app[data-menu-xmlid="helpdesk.menu_helpdesk_root"]',
        run: "click",
    },
    {
        content: "Open 'Configuration' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="helpdesk.helpdesk_menu_config"]',
        run: "click",
    },
    {
        content: "Open 'Helpdesk Team' menu",
        trigger: '.dropdown-item[data-menu-xmlid="helpdesk.helpdesk_team_menu"]',
        run: "click",
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
        run: "click",
    },
    {
        content: "Fill Helpdesk Team's name",
        trigger: 'div[name=name] textarea, input#name, input[name=name]',
        run: function (actions) {
            // append epoch to ensure team name is unique
            // (required to avoid duplicated mail.alias error   )
            actions.text("warning_team" + "_" + Date.now());
        },
    },
    {
        content: `Enable ${moduleName} option (${moduleName})`,
        trigger: `label[for=${fieldName}], div[name=${fieldName}] input`,
        run: 'click',
    },
];}

// The python test will try to start a tour for each module returned by `_get_field_modules`.
// If the python test then fails, it means a new module has been added to `_get_field_modules`
// but is not present in the dict below.
const knownHelpdeskModules = {
    'use_website_helpdesk_form': 'website_helpdesk',
    'use_website_helpdesk_livechat': 'website_helpdesk_livechat',
    'use_website_helpdesk_forum': 'website_helpdesk_forum',
    'use_website_helpdesk_slides': 'website_helpdesk_slides',
    'use_website_helpdesk_knowledge': 'website_helpdesk_knowledge',
    'use_helpdesk_timesheet': 'helpdesk_timesheet',
    'use_helpdesk_sale_timesheet': 'helpdesk_sale_timesheet',
    'use_credit_notes': 'helpdesk_account',
    'use_product_returns': 'helpdesk_stock',
    'use_product_repairs': 'helpdesk_repair',
    'use_coupons': 'helpdesk_sale_loyalty',
    'use_fsm': 'helpdesk_fsm'
};

for (const [fieldName, moduleName] of Object.entries(knownHelpdeskModules)) {
    const tourHelpdeskTeamModuleOptionSteps = getTourHelpdeskConfigSteps(moduleName, fieldName);

    // Add Confirm step to the tour
    const fullHelpdeskTour = tourHelpdeskTeamModuleOptionSteps.concat([
        {
            content: "Click on 'Save'",
            trigger: ".o_form_button_save",
            run: "click",
        },
        checkPricingChangeWarningShown(),
        confirmPricingChange(),
        {
            content: "Wait for record save to complete",
            trigger: '.o_form_saved, .o_form_button_edit',
            run: function() {}, // this is a check
        }
    ]);

    tour.register(`trial_helpdesk_team_install_module_${moduleName}_on_save_warning`, {test: true},
        filterSteps(fullHelpdeskTour, step => true),
    );

    tour.register(`trial_helpdesk_team_install_module_${moduleName}_on_save_no_warning`, {test: true},
        filterSteps(fullHelpdeskTour, step => !step.warning_step),
    );
}

// Ensure the cancel button is correctly preventing a module installation
const helpdeskFieldName = Object.keys(knownHelpdeskModules)[0];
const helpdeskMappedModuleName = knownHelpdeskModules[helpdeskFieldName];
const tourHelpdeskTeamModuleOptionSteps = getTourHelpdeskConfigSteps(helpdeskMappedModuleName, helpdeskFieldName);
const fullHelpdeskTour = tourHelpdeskTeamModuleOptionSteps.concat([
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save",
        run: "click",
    },
    checkPricingChangeWarningShown(),
    {
        content: "Click on Cancel",
        trigger: ".modal-footer .btn-secondary:contains('Cancel')",
        run: "click",
    },
    {
        content: "Ensure save button is still there",
        trigger: ".o_form_button_save",
        run: function() {}, // this is a check
    },
    {
        content: "Discard the changes",
        trigger: ".o_form_button_cancel",
        run: "click",
    },
    {
        content: "Check that we are back a the Teams ListView",
        trigger: ".o_list_renderer",
        run: function() {}, // this is a check
    }
]);
tour.register(`trial_helpdesk_team_install_module_on_save_cancel`, {test: true},
    filterSteps(fullHelpdeskTour, step => true),
);


/* ----------------------------------------------------------------------
* Test Module installation warning from PoS Config
*/

function getTourPosConfigSteps(moduleName, fieldName) {
    return [
    {
        content: "Open 'Point of Sale' app",
        trigger: '.o_app[data-menu-xmlid="point_of_sale.menu_point_root"]',
        run: "click",
    },
    {
        content: "Open the PoS config dropdown",
        trigger: '.o_kanban_record',
        version: '18.0',
        run: "hover",
    },
    {
        content: "Open the PoS config dropdown",
        trigger: '.o_kanban_record .o_dropdown_kanban:not(:visible) .dropdown-toggle:not(:visible)',
        version: '18.0',
        run: "click",
    },
    {
        content: "Open the PoS config dropdown",
        trigger: '.fa-ellipsis-v',
        allowInvisible: true,
        version: 'lt_18.0',
        run: "click",
    },
    {
        content: "Click on 'Edit' button",
        trigger: 'a[name="action_pos_config_modal_edit"]',
        run: "click",
    },
    {
        content: `Enable ${fieldName} option (${moduleName} module)`,
        trigger: `label[for*=${fieldName}], div[name*=${fieldName}] input`,
        run: 'click',
    },
    {
        content: `Ensure ${moduleName} module is enabled`,
        trigger: `input[id*=${fieldName}]:checked, div[name*=${fieldName}] input:checked`,
        run: function() {}, // this is a check
    },
];}

// The python test will try to start a tour for each module returned by `_get_field_modules`.
// If the python test then fails, it means a new module has been added to `_get_field_modules`
// but is not present in the dict below.
const knownPosModules = {
    // 'module_pos_restaurant': 'pos_restaurant', -> Exception, will not exit 1-App Free
    // 'module_pos_avatax': 'pos_avatax',       |
    // 'module_pos_discount': 'pos_discount',   | -> Not activable from the pos.config modal
    // 'module_pos_sms': 'pos_sms',             |
    'module_pos_hr': 'pos_hr',

};

for (const [fieldName, moduleName] of Object.entries(knownPosModules)) {
    const tourPosConfigModuleOptionSteps = getTourPosConfigSteps(moduleName, fieldName);

    // Add Confirm step to the tour
    const fullPosConfigTour = tourPosConfigModuleOptionSteps.concat([
        {
            content: "Click on 'Save'",
            trigger: "footer > .btn-primary",
            run: "click",
        },
        checkPricingChangeWarningShown(),
        confirmPricingChange(),
        {
            content: "Wait for record save to complete",
            trigger: 'body:not(.modal-open)',
            run: function() {}, // this is a check
        }
    ]);

    tour.register(`trial_pos_config_install_module_${moduleName}_on_save_warning`, {test: true},
        filterSteps(fullPosConfigTour, step => !step.version || step.version !== '18.0'),
    );

    tour.register(`trial_pos_config_install_module_${moduleName}_on_save_warning_18`, {test: true},
        filterSteps(fullPosConfigTour, step => !step.version || step.version === '18.0'),
    );

    tour.register(`trial_pos_config_install_module_${moduleName}_on_save_no_warning`, {test: true},
        filterSteps(fullPosConfigTour, step => !step.warning_step && (!step.version || step.version !== '18.0')),
    );
    tour.register(`trial_pos_config_install_module_${moduleName}_on_save_no_warning_18`, {test: true},
        filterSteps(fullPosConfigTour, step => !step.warning_step && (!step.version || step.version === '18.0')),
    );
}

// Ensure the cancel button is correctly preventing a module installation
const posFieldName = Object.keys(knownPosModules)[0];
const posMappedModuleName = knownPosModules[posFieldName];
const tourPosConfigSteps = getTourPosConfigSteps(posMappedModuleName, posFieldName);
const fullPosConfigTour = tourPosConfigSteps.concat([
    {
        content: "Click on 'Save'",
        trigger: "footer > .btn-primary",
        run: "click",
    },
    checkPricingChangeWarningShown(),
    {
        content: "Click on Cancel",
        trigger: ".modal-footer .btn-secondary:contains('Cancel')",
        run: "click",
    },
    {
        content: "Check that the modal is still open",
        trigger: ".modal-dialog",
        run: function() {}, // this is a check
    },
    {
        content: "Close the pos.config modal",
        trigger: 'footer > .btn-secondary',
        run: "click"
    },
    {
        content: "Ensure the modal is closed",
        trigger: 'body:not(.modal-open)',
        run: function() {}, // this is a check
    }
]);
tour.register(`trial_pos_config_install_module_on_save_cancel`, {test: true},
    filterSteps(fullPosConfigTour, step => !step.version || step.version !== '18.0'),
);
tour.register(`trial_pos_config_install_module_on_save_cancel_18`, {test: true},
    filterSteps(fullPosConfigTour, step => !step.version || step.version === '18.0'),
);

});
;

/************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_trials.js  *
*  Lines: 163                                               *
************************************************************/
odoo.define('odoo.test.trial.tours', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

tour.register('trial_resend_activation_email_backend', {url: '/web', test: true}, [
    {
        content: "Click on navbar Pending Activation button",
        trigger: ".o_main_navbar .oe_expiration_tag a",
        run: "click",
    },
    {
        content: "Fill the modal",
        trigger: 'input[name=email]',
        run: 'text customer@example.net',
    },
    {
        content: "Click on modal resend button",
        trigger: 'input[type=submit], button:contains(Resend)',
        run: "click",
    },
    {
        content: "Check that email was successfully sent.",
        trigger: '.modal-dialog *:contains(An activation email has been successfully sent)',
        run: function () {}, // this is a check
        isCheck: true,
    }
]);

tour.register('trial_my_subscriptions_menuitem', {url: '/web', test: true}, [
    {
        content: "Click on the user menu",
        trigger: ".o_user_menu .dropdown-toggle",
        run: "click",
    },
    {
        content: "Click on the  'My Subscriptions' menuitem",
        trigger: 'span[data-menu="odoo_subscription"]',
        run: function() {}, // this is a check
        isCheck: true,
    },
]);

tour.register('trial_rr_upgrade_available_user', {url: '/web', test: true}, [
    // Employee should see that an upgrade is available (in the statusbar) but should see any upgrade button
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
        run: "click",
    },
    {
        content: "Check that there is no button",
        trigger: ".o_main_navbar .o_rr_widget .rr-widget-dropdown",
        run: function () {
            const anchor = this.anchor || this.$anchor.get(0);
            let buttons = null;
            if (window.$ !== undefined) {
                buttons = $(anchor).find('a.btn:visible, button:visible').get();
            } else {
                // no JQuery anymore, so the modal are now rendered in Owl
                // and we don't need to check for visibility ("hidden" elements
                // should not be added to the DOM at all)
                buttons = anchor.querySelectorAll('a.btn, button');
            }
            if (buttons.length !== 0) {
                console.error('User should not see any upgrade button (' + buttons.length + ' found)');
            }
        }
    },
    {
        content: "Check that user should ask their admin for upgrade",
        trigger: ".o_main_navbar .o_rr_widget .rr_users_only:contains(Contact the administrator)",
        run: function () {}, // this is a check
    },
]);


tour.register('trial_rr_upgrade_available_admin', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade availabe, open upgrade and cancel it (not sure as he has not tested yet)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
        run: "click",
    },
    {
        content: "Check release notes button link is valid",
        trigger: '.o_main_navbar .o_rr_widget .o_release_notes_link[href*="https://www.odoo.com/r/rr-release-notes-"]',
        run: function () {}, // this is a check
    },
    {
        content: "Click on Upgrade Now",
        trigger: 'button.o_prod_upgrade',
        run: "click",
    },
    {
        content: "Hum, not sure yet, click on Cancel",
        trigger: '.o_prod_upgrade_cancel',
        run: "click",
    },
    // Admin has now propertly tested the upgrade (don't they?) and start real production upgrade
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
        run: "click",
    },
    {
        content: "Click on 'Upgrade Now'",
        trigger: 'button.o_prod_upgrade',
        run: "click",
    },
    {
        content: "Click on 'Confirm Upgrade'",
        trigger: '.o_prod_upgrade_confirm',
        run: "click",
    },
    {
        content: "Check that upgrade has been queued",
        trigger: '.modal-body:contains(Production upgrade requested successfully)',
        run: function() {}, // this is a check
        isCheck: true,
    },
]);

tour.register('trial_rr_upgrade_dismiss', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade available, open upgrade but dismiss it
    // (he want to stay on LTS version-for now)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
        run: "click",
    },
    {
        content: "Click on 'Upgrade Later'",
        trigger: "button.o_prod_dismiss",
        run: "click",
    },
    {
        // dummy check only to ensure dismiss RPC are completed
        trigger: ".o_main_navbar",
        run: function () {},
        isCheck: true,
    },
]);

tour.register('trial_edu_eol_warning', {url: '/web', test: true}, [
    {
        content: "Check that the edu EOL warning is displayed",
        trigger: ".o_edu_eol_warning:contains(Your education database is on an unsupported version of Odoo)",
        run: function () {}, // this is a check,
        isCheck: true,
    }
]);

tour.register('trial_edu_expires_warning', {url: '/web', test: true}, [
    {
        content: "Check that the edu expiration warning is displayed",
        trigger: ".oe_instance_expires:contains(Your education database is reaching its expiration date)",
        run: function () {}, // this is a check,
        isCheck: true,
    }
]);

});
;

/******************************************************************
*  Filepath: /saas_website/static/tests/tours/tour_activation.js  *
*  Lines: 29                                                      *
******************************************************************/
odoo.define('odoo.saas_website.test.tours', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

tour.register('trial_resend_activation_email_frontend', {url: '/', test: true}, [
    {
        content: "Click on navbar Pending Activation button",
        trigger: ".o_main_navbar .oe_expiration_tag a",
        run: "click",
    },
    {
        content: "Fill the modal",
        trigger: 'input[name=email]',
        run: 'text customer@example.net',
    },
    {
        content: "Click on modal resend button",
        trigger: 'input[type=submit], button:contains(Resend)',
        run: "click",
    },
    {
        content: "Check that email was successfully sent.",
        trigger: '*:contains(An activation email has been successfully sent)',
        run: function () { }, // this is a check
    }
]);

});
;

/****************************************************************************
*  Filepath: /saas_website/static/tests/tours/tour_website_configurator.js  *
*  Lines: 102                                                               *
****************************************************************************/
odoo.define('@saas_website/../tests/tours/tour_website_configurator', ['web_tour.tour'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

const unselectAllFeatures = function() {
    return {
        content: "Unselect all features",
        trigger: ".page_feature_selection.o_configurator_show",
        run: async function (actions) {
            const anchor = this.anchor || this.$anchor.get(0);
            const features = anchor.querySelectorAll(".o_configurator_feature_status.fa-check-circle");
            for (const e of features) {
                await actions.click(e);
            }
        }
    };
};

const selectionFeature = function(name) {
    return {
        content: "Selecting feature: " + name,
        trigger: ".card .card-title:contains(" + name + ")",
        run: "click",
    };
};

tour.register('trial_website_configurator', {url: "/website/configurator", test: true}, [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
        run: "click",
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
        run: "click",
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("abbey")',
        run: "click",
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
        run: "click",
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
        run: "click",
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
        run: "click",
    },
    // Features screen
    {
        content: "Check that we're on Free Plan by default",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is check
    },
    // - check for app that force out of 1-app-free mode (to trial mode)
    unselectAllFeatures(),
    selectionFeature("Appointment"),
    {
        content: "Check that Appointment force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // - check for single free app
    unselectAllFeatures(),
    selectionFeature("Shop"),
    {
        content: "Check that selecting only Shop keep in 1-app-free mode",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is a check
    },
    selectionFeature("Events"),
    {
        content: "Check that selecting both Shop and Events force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // Exit configurator
    {
        content: "Check button 'Build my website' is available",
        trigger: "button:contains(Build my website)",
        run: function() {}, // this is a check
    },
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /social_twitter/static/tests/tours/tour_social_twitter_spam.js  *
*  Lines: 114                                                                *
*****************************************************************************/
odoo.define('@social_twitter/../tests/tours/tour_social_twitter_spam', ['@web/core/utils/patch', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { patch } = require('@web/core/utils/patch');
const { registry } = require("@web/core/registry");

let uniqueSeed = 0;

odoo.loader.bus.addEventListener("module-started", (e) => {
    if (e.moduleName === "@social_twitter/js/stream_post_comments_reply") {
        patch(e.module.StreamPostCommentsReplyTwitter.prototype, "social_twitter_spam", {
            get authorPictureSrc() { return '' }
        });
    }
})


const triggerEnterEvent = (element) => {
    const ev = new window.KeyboardEvent('keydown', { bubbles: true, key: "Enter" });
    element.dispatchEvent(ev);
};

function createReplies(textareaSelector) {
    const maximumAllowedReplies = 3;
    uniqueSeed += 1;

    let tourSteps = [];

    // must be able to post "maximumAllowedReplies" replies
    for (let i = 0; i < maximumAllowedReplies; i++) {
        const message = `__social_twitter_test_tour_${uniqueSeed}_${i}__`;

        tourSteps.push(
            {
                trigger: '.o_social_comments_modal textarea',
                content: `Reply number ${i}`,
                run: () => {
                    const $inputComment = $(textareaSelector);
                    $inputComment.val(message);
                    triggerEnterEvent($inputComment[0]);
                }
            },
            {
                trigger: `.o_social_comment_text[data-original-message*="${message}"]`,
                content: 'Check if the comment has been posted',
            },
        );
    }

    // the next reply must fail
    const message = `__social_twitter_test_tour_${uniqueSeed}_last__`;
    tourSteps.push(
        {
            trigger: '.o_social_comments_modal textarea',
            content: 'Write the last comment that will fail',
            run: () => {
                const $inputComment = $(textareaSelector);
                $inputComment.val(message);
                triggerEnterEvent($inputComment[0]);
            },
        },
        {
            trigger: '.o_social_comments_modal',
            extra_trigger: '.o_social_textarea_message.text-danger',
            content: 'Should not be able to spam',
            run: () => {
                const $fourthComment = $(`.o_social_comment_text[data-original-message*="${message}"]`);
                if ($fourthComment.length) {
                    console.error('Should not be able to spam (message detected)');
                }
            },
        },
    );

    return tourSteps;
}

/**
  * Twitter has a spam detection and will take measures against spamming accounts.
  * We now have a spam check mechanism to prevent any potential issues.
  * This will test that:
  * - Users can't spam when replying to a stream.post
  * - Users can't spam when replying to another comment (on a stream.post)
  *
  * The spam detection is set to maximum 3 comments.
  **/
registry.category("web_tour.tours").add(
    'social_twitter/static/tests/tours/tour_social_twitter_spam.js',
    {
        url: '/web',
        test: true,
        steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="social.menu_social_global"]',
            content: 'Open the Social App',
            run: 'click',
        },
        {
            trigger: '.o_social_stream_post_message',
            content: 'Open the tweet comments',
            run: 'click',
        },
        // Test comments spam
        ...createReplies('.o_social_comments_modal textarea.o_social_add_comment:not([data-is-comment-reply])'),
        // Test replies spam
        // TODO awa: not sure how this one worked, as we have no textarea to reply already opened
        // ...createReplies('.o_social_comment:first textarea[name="message"]'),
    ]
});

return __exports;
});
;

/**********************************************************************************************************
*  Filepath: /spreadsheet_dashboard_documents/static/tests/tours/add_document_to_dashboard_group_tour.js  *
*  Lines: 112                                                                                             *
**********************************************************************************************************/
odoo.define('@spreadsheet_dashboard_documents/../tests/tours/add_document_to_dashboard_group_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

let startingNumberOfSheetsInGroup = 0;

function assertNSheetsInGroup(number) {
    const actualNumber = document.querySelectorAll(".o_list_table tr.o_data_row").length;
    if (actualNumber !== number) {
        throw new TourError(`Expected ${number} sheets in the dashbord group, got ${actualNumber}`);
    }
}

function focusFirstSheetInModal() {
    const sheetImg = document.querySelector("img.o-sp-dialog-item-img");
    sheetImg.dispatchEvent(new MouseEvent("focus"));
}

registry.category("web_tour.tours").add(
    "spreadsheet_dashboard_document_add_document_to_dashboard_group",
    {
        test: true,
        url: "/web",
        steps: () => [
        {
            trigger:
                '.o_app[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_root"]',
            content: "Open dashboard app",
            run: "click",
        },
        {
            trigger:
                'button[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration"]',
            content: "Open configuration menu",
            run: "click",
        },
        {
            trigger:
                'a[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration_dashboards"]',
            content: "Open dashboard configuration menu",
            run: "click",
        },
        {
            trigger: 'tbody tr td[name="name"]',
            content: "Open a dashboard group from list view",
            run: "click",
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            run: () => {
                startingNumberOfSheetsInGroup = document.querySelectorAll(
                    ".o_list_table tr.o_data_row"
                ).length;
            },
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "button.btn-primary",
            content: "Click confirm button",
            run: "click",
        },
        {
            trigger: '.breadcrumb-item :contains("Sales")',
            content: 'Go back to the dashboard group config'
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 1),
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Double click a spreadsheet",
            run: "dblclick",
        },
        {
            trigger: '.breadcrumb-item :contains("Sales")',
            content: 'Go back to the dashboard group config'
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 2),
        },
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website_livechat/static/tests/tours/lazy_frontend_bus_tour.js  *
*  Lines: 52                                                                 *
*****************************************************************************/
odoo.define('@website_livechat/../tests/tours/lazy_frontend_bus_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_livechat.lazy_frontend_bus", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: ".o-livechat-LivechatButton",
            async run() {
                await odoo.__WOWL_DEBUG__.root.env.services["mail.messaging"].isReady;
                if (odoo.__WOWL_DEBUG__.root.env.services.bus_service.isActive) {
                    throw new Error("Bus service should not start when loading the page");
                }
            },
        },
        {
            trigger: ".o-livechat-LivechatButton",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text Hello, I need help!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                if (odoo.__WOWL_DEBUG__.root.env.services.bus_service.isActive) {
                    throw new Error("Bus service should not start for temporary live chat");
                }
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Message:contains(Hello, I need help!)",
            run() {
                if (!odoo.__WOWL_DEBUG__.root.env.services.bus_service.isActive) {
                    throw new Error("Bus service should start after first live chat message");
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_as_portal.js  *
*  Lines: 35                                                                     *
*********************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_as_portal', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_livechat_as_portal_tour", {
    test: true,
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: ".o-livechat-LivechatButton",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text Hello, I need help!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Message:contains('Hello, I need help!')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/********************************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_chatbot_after_reload.js  *
*  Lines: 36                                                                                *
********************************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_chatbot_after_reload', ['@web/core/registry', '@website_livechat/../tests/tours/website_livechat_common'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { endDiscussion } = require("@website_livechat/../tests/tours/website_livechat_common");

const messagesContain = (text) => `.o-mail-Message:contains("${text}")`;

registry.category("web_tour.tours").add("website_livechat_chatbot_after_reload_tour", {
    test: true,
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: messagesContain("Hello! I'm a bot!"),
        },
        {
            content: "Reload the page",
            trigger: messagesContain("How can I help you?"),
            run: () => location.reload(),
        },
        ...endDiscussion,
        {
            trigger: ".o-livechat-LivechatButton",
            run: "click",
        },
        {
            trigger: messagesContain("Hello! I'm a bot!"),
            run: () => {},
        },
    ],
});

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_chatbot_flow.js  *
*  Lines: 236                                                                       *
************************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_chatbot_flow', ['@web/core/registry', '@web/core/utils/timing', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { debounce } = require("@web/core/utils/timing");
const { contains } = require("@web/../tests/utils");

const messagesContain = (text) => `.o-mail-Message:contains("${text}")`;

registry.category("web_tour.tours").add("website_livechat_chatbot_flow_tour", {
    test: true,
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: messagesContain("Hello! I'm a bot!"),
            run: () => {
                // make chat bot faster for this tour
                const chatbotService = odoo.__WOWL_DEBUG__.root.env.services["im_livechat.chatbot"];
                chatbotService.debouncedProcessUserAnswer = debounce(
                    chatbotService._processUserAnswer.bind(chatbotService),
                    500
                );
            },
        },
        {
            trigger: messagesContain("I help lost visitors find their way."),
            run: () => {}, // check second welcome message is posted
        },
        {
            trigger: messagesContain("How can I help you?"),
            // check question_selection message is posted and reactions are not
            // available since the thread is not yet persisted
            run() {
                if (
                    this.$anchor[0].querySelector(
                        ".o-mail-Message-actions [title='Add a Reaction']"
                    )
                ) {
                    console.error("Reactions should not be available before thread is persisted.");
                }
            },
        },
        {
            trigger: 'li:contains("I want to buy the software")',
            run: "click",
        },
        {
            trigger: ".o-mail-ChatWindow",
            // check selected option is posted and reactions are available since
            // the thread has been persisted in the process
            async run() {
                await contains(".o-mail-Message-actions [title='Add a Reaction']", {
                    target: this.$anchor[0].getRootNode(),
                    parent: [".o-mail-Message", { text: "I want to buy the software" }],
                });
            },
        },
        {
            trigger: messagesContain("Can you give us your email please?"),
            run: () => {}, // check ask email step following selecting option A
        },
        {
            trigger: ".o-mail-Composer-input ",
            run: "text No, you won't get my email!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain(
                "'No, you won't get my email!' does not look like a valid email. Can you please try again?"
            ),
            run: () => {}, // check invalid email detected and the bot asks for a retry
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text okfine@fakeemail.com",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain("Your email is validated, thank you!"),
            run: () => {}, // check that this time the email goes through and we proceed to next step
        },
        {
            trigger: messagesContain("Would you mind providing your website address?"),
            run: () => {}, // should ask for website now
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text https://www.fakeaddress.com",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain("Great, do you want to leave any feedback for us to improve?"),
            run: () => {}, // should ask for feedback now
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text Yes, actually, I'm glad you asked!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text I think it's outrageous that you ask for all my personal information!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text I will be sure to take this to your manager!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain("Ok bye!"),
            run: () => {}, // last step is displayed
        },
        {
            trigger: ".o-mail-ChatWindow-command[title='Restart Conversation']",
            run: "click",
        },
        {
            trigger: messagesContain("Restarting conversation..."),
            run: () => {}, // check that conversation is properly restarting
        },
        {
            trigger: messagesContain("Hello! I'm a bot!"),
            run: () => {}, // check first welcome message is posted
        },
        {
            trigger: messagesContain("I help lost visitors find their way."),
            run: () => {}, // check second welcome message is posted
        },
        {
            trigger: messagesContain("How can I help you?"),
            run: () => {}, // check question_selection message is posted
        },
        {
            trigger: 'li:contains("Pricing Question")',
            run: "click",
        },
        {
            trigger: messagesContain(
                "For any pricing question, feel free ton contact us at pricing@mycompany.com"
            ),
            run: () => {}, // the path should now go towards 'Pricing Question (first part)'
        },
        {
            trigger: messagesContain("We will reach back to you as soon as we can!"),
            run: () => {}, // the path should now go towards 'Pricing Question (second part)'
        },
        {
            trigger: messagesContain("Would you mind providing your website address?"),
            run: () => {}, // should ask for website now
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text no",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain("Great, do you want to leave any feedback for us to improve?"),
            run: () => {}, // should ask for feedback now
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text no, nothing so say",
        },
        {
            trigger: ".o-mail-Composer-input",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: messagesContain("Ok bye!"),
        },
        {
            // wait for chatbot script to finish.
            trigger: ".o-mail-ChatWindow-command[title='Restart Conversation']",
            run() {},
        },
    ],
});

return __exports;
});
;

/*********************************************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_chatbot_fw_operator_matching_lang.js  *
*  Lines: 27                                                                                             *
*********************************************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_chatbot_fw_operator_matching_lang', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("chatbot_fw_operator_matching_lang", {
    test: true,
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: `.o-mail-Message:contains("Hello! I'm a bot!")`,
        },
        {
            trigger: "li:contains(I want to speak with an operator)",
            run: "click",
        },
        {
            trigger: ".o-mail-Composer-input:enabled",
            run: () => {},
        },
    ],
});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_chatbot_redirect.js  *
*  Lines: 55                                                                            *
****************************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_chatbot_redirect', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_livechat.chatbot_redirect", {
    shadow_dom: ".o-livechat-root",
    test: true,
    url: "/contactus",
    steps: () => [
        {
            trigger: ".o-livechat-LivechatButton",
        },
        {
            trigger: ".o-mail-Message:contains(Hello, were do you want to go?)",
        },
        {
            trigger: "li:contains(Go to the #chatbot-redirect anchor)",
        },
        {
            trigger: ".o-mail-Message:contains(Tadam, we are on the page you asked for!)",
            run() {
                const url = new URL(location.href);
                if (url.pathname !== "/contactus" || url.hash !== "#chatbot-redirect") {
                    throw new Error(
                        "Chatbot should have redirected to the #chatbot-redirect anchor."
                    );
                }
            },
        },
        {
            trigger: "button[title='Restart Conversation']",
        },
        {
            trigger: "li:contains(Go to the /chatbot-redirect page)",
        },
        {
            trigger:
                ".o-mail-Message:contains('Go to the /chatbot-redirect page') + .o-mail-Message:contains('Tadam')",
            run() {
                const url = new URL(location.href);
                if (url.pathname !== "/chatbot-redirect") {
                    throw new Error(
                        "Chatbot should have redirected to the /chatbot-redirect page."
                    );
                }
            },
        },
    ],
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_common.js  *
*  Lines: 144                                                                 *
******************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_common', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/*******************************
 *         Common Steps
 *******************************/

const start = __exports.start = [
    {
        content: "click on livechat widget",
        trigger: ".o-livechat-LivechatButton",
    },
    {
        content: "Say hello!",
        trigger: ".o-mail-Composer-input",
        run: "text Hello Sir!",
    },
    {
        content: "Send the message",
        trigger: ".o-mail-Composer-input",
        run() {
            this.$anchor[0].dispatchEvent(
                new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
            );
        },
    },
    {
        content: "Verify your message has been typed",
        trigger: ".o-mail-Message:contains('Hello Sir!')",
    },
    {
        content: "Verify there is no duplicates",
        trigger: ".o-mail-Thread",
        run() {
            if (this.$anchor.find(".o-mail-Message:contains('Hello Sir!')").length === 1) {
                $("body").addClass("no_duplicated_message");
            }
        },
    },
    {
        content: "Is your message correctly sent ?",
        trigger: "body.no_duplicated_message",
        shadow_dom: false,
        isCheck: true,
    },
];

const endDiscussion = __exports.endDiscussion = [
    {
        content: "Close the chat window",
        trigger: ".o-mail-ChatWindow-command[title*=Close]",
        run: "click",
    },
];

const feedback = __exports.feedback = [
    {
        content: "Patching Livechat",
        trigger: "textarea[placeholder='Explain your note']",
        run: function() {
            document.body.classList.add("feedback_sent");
        }
    },
    {
        content: "Type a feedback",
        trigger: "textarea[placeholder='Explain your note']",
        run: "text ;-) This was really helpful. Thanks ;-)!",
    },
    {
        content: "Send the feedback",
        trigger: "button:contains(Send):not(:disabled)",
    },
    {
        content: "Thanks for your feedback",
        trigger: "p:contains('Thank you for your feedback')",
        isCheck: true,
    },
];

const transcript = __exports.transcript = [
    {
        content: "Type your email",
        trigger: "input[placeholder='mail@example.com']",
        run: "text deboul@onner.com",
    },
    {
        content: "Send the conversation to your email address",
        trigger: "button[data-action=sendTranscript]",
    },
    {
        content: "Check conversation is sent",
        trigger: ".form-text:contains(The conversation was sent)",
    },
];

const close = __exports.close = [
    {
        content: "Close the conversation with the x button",
        trigger: ".o-mail-ChatWindow-command[title*=Close]",
        run: "click",
    },
    {
        content: "Check that the button is not displayed anymore",
        trigger: ".o-mail-ChatWindowContainer",
        allowInvisible: true,
        run() {
            if (this.$anchor.find(".o-livechat-livechatButton").length === 0) {
                $("body").addClass("tour_success");
            }
        },
    },
    {
        content: "Is the Test succeded ?",
        trigger: "body.tour_success",
        shadow_dom: false,
        isCheck: true,
    },
];

const goodRating = __exports.goodRating = [
    {
        content: "Choose Good Rating",
        trigger: `img[src*=rating][alt=5]`,
    },
];

const okRating = __exports.okRating = [
    {
        content: "Choose ok Rating",
        trigger: `img[src*=rating][alt=3]`,
    },
];

const sadRating = __exports.sadRating = [
    {
        content: "Choose bad Rating",
        trigger: `img[src*=rating][alt=1]`,
    },
];

return __exports;
});
;

/******************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_rating.js  *
*  Lines: 61                                                                  *
******************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_rating', ['@website_livechat/../tests/tours/website_livechat_common', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const {
    start,
    endDiscussion,
    goodRating,
    okRating,
    sadRating,
    feedback,
    transcript,
    close,
} = require("@website_livechat/../tests/tours/website_livechat_common");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_livechat_complete_flow_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start, endDiscussion, okRating, feedback, transcript, close),
});

registry.category("web_tour.tours").add("website_livechat_happy_rating_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start, endDiscussion, goodRating, feedback),
});

registry.category("web_tour.tours").add("website_livechat_ok_rating_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start, endDiscussion, okRating, feedback),
});

registry.category("web_tour.tours").add("website_livechat_sad_rating_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start, endDiscussion, sadRating, feedback),
});

registry.category("web_tour.tours").add("website_livechat_no_rating_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start, endDiscussion, transcript, close),
});

registry.category("web_tour.tours").add("website_livechat_no_rating_no_close_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(start),
});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_request.js  *
*  Lines: 93                                                                   *
*******************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_request', ['@web/core/utils/patch', '@website_livechat/../tests/tours/website_livechat_common', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { patch } = require("@web/core/utils/patch");
const { endDiscussion, okRating, feedback, transcript, close } = require("@website_livechat/../tests/tours/website_livechat_common");
const { registry } = require("@web/core/registry");

odoo.loader.bus.addEventListener("module-started", (e) => {
    if (e.detail.moduleName === "@im_livechat/embed/common/livechat_service") {
        const { LivechatService, ODOO_VERSION_KEY } = e.detail.module;
        // Livechat sessions are deleted if they come from a different odoo version than
        // the current one. Since each test is run with a different browser the version
        // is never set. This patch sets the version to the current one.
        patch(LivechatService.prototype, {
            async initialize() {
                try {
                    const response = await fetch("/web/webclient/version_info", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({}),
                    });
                    const { server_version: serverVersion } = (await response.json()).result;
                    localStorage.setItem(ODOO_VERSION_KEY, serverVersion);
                } catch {
                    // Could be intentional (tour ended successfully while version still loading)
                }

                return super.initialize(...arguments);
            },
        });
    }
});

const chatRequest = [
    {
        content: "Answer the chat request!",
        trigger: ".o-mail-Composer-input",
        run: "text Hi ! What a coincidence! I need your help indeed.",
    },
    {
        content: "Send the message",
        trigger: ".o-mail-Composer-input",
        run() {
            this.$anchor[0].dispatchEvent(
                new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
            );
        },
    },
    {
        content: "Verify your message has been typed",
        trigger: ".o-mail-Message:contains('Hi ! What a coincidence! I need your help indeed.')",
    },
    {
        content: "Verify there is no duplicates",
        trigger: ".o-mail-Thread",
        run() {
            if (
                this.$anchor.find(
                    ".o-mail-Message:contains('Hi ! What a coincidence! I need your help indeed.')"
                ).length === 1
            ) {
                $("body").addClass("no_duplicated_message");
            }
        },
    },
    {
        content: "Is your message correctly sent ?",
        shadow_dom: false,
        trigger: "body.no_duplicated_message",
        isCheck: true,
    },
];

registry.category("web_tour.tours").add("website_livechat_chat_request_part_1_no_close_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(chatRequest),
});

registry.category("web_tour.tours").add("website_livechat_chat_request_part_2_end_session_tour", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [].concat(endDiscussion, okRating, feedback, transcript, close),
});

return __exports;
});
;

/********************************************************************************************
*  Filepath: /website_livechat/static/tests/tours/website_livechat_session_user_changes.js  *
*  Lines: 111                                                                               *
********************************************************************************************/
odoo.define('@website_livechat/../tests/tours/website_livechat_session_user_changes', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_livechat_login_after_chat_start", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: ".o-livechat-LivechatButton",
            run: "click",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text Hello!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: function () {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Message-content:contains('Hello!')",
        },
        {
            trigger: "a:contains(Sign in)",
            run: "click",
            shadow_dom: false,
        },
        {
            trigger: "input[name='login']",
            run: "text admin",
            shadow_dom: false,
        },
        {
            trigger: "input[name='password']",
            run: "text admin",
            shadow_dom: false,
        },
        {
            trigger: "button:contains(Log in)",
            run: "click",
            shadow_dom: false,
        },
        {
            trigger: ".o_main_navbar",
            shadow_dom: false,
            run() {
                window.location = "/";
            },
        },
        {
            content:
                "Livechat button is present since the old livechat session was linked to the public user, not the current user.",
            trigger: ".o-livechat-LivechatButton",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("website_livechat_logout_after_chat_start", {
    test: true,
    url: "/",
    shadow_dom: ".o-livechat-root",
    steps: () => [
        {
            trigger: ".o-livechat-LivechatButton",
            run: "click",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: "text Hello!",
        },
        {
            trigger: ".o-mail-Composer-input",
            run: function () {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", which: 13, bubbles: true })
                );
            },
        },
        {
            trigger: ".o-mail-Message-content:contains('Hello!')",
        },
        {
            trigger: "header#top a:contains(Mitchell Admin)",
            run: "click",
            shadow_dom: false,
        },
        {
            trigger: "a:contains(Logout)",
            shadow_dom: false,
        },
        {
            content:
                "Livechat button is present since the old livechat session was linked to the logged user, not the public one.",
            trigger: ".o-livechat-LivechatButton",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/*******************************************************************************************************
*  Filepath: /website_event_booth_exhibitor/static/tests/tours/website_event_booth_exhibitor_steps.js  *
*  Lines: 20                                                                                           *
*******************************************************************************************************/
odoo.define('@website_event_booth_exhibitor/../tests/tours/website_event_booth_exhibitor_steps', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

class FinalSteps {

    _getSteps() {
        return [{
            trigger: 'h3:contains("Booth Registration completed!")',
            run: function() {},
        }];
    }

}

__exports[Symbol.for("default")] = FinalSteps;

return __exports;
});
;

/*************************************************************************************************
*  Filepath: /website_event_booth_exhibitor/static/tests/tours/website_event_booth_exhibitor.js  *
*  Lines: 51                                                                                     *
*************************************************************************************************/
odoo.define('@website_event_booth_exhibitor/../tests/tours/website_event_booth_exhibitor', ['@web/core/registry', '@website_event_booth_exhibitor/../tests/tours/website_event_booth_exhibitor_steps'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const FinalSteps = require("@website_event_booth_exhibitor/../tests/tours/website_event_booth_exhibitor_steps")[Symbol.for("default")];


    registry.category("web_tour.tours").add("webooth_exhibitor_register", {
        test: true,
        url: "/event",
        steps: () => [{
        content: 'Go on "Online Reveal" page',
        trigger: 'a[href*="/event"]:contains("Online Reveal"):first',
    }, {
        content: 'Browse Booths',
        trigger: 'a:contains("Get A Booth")',
    }, {
        content: 'Wait for the first item to be properly selected before proceeding',
        trigger: 'label.d-block:has(input:checked) h5[name=booth_category_name]',
        run() {},
    }, {
        content: 'Choose Premium Booths',
        trigger: 'img[alt="Premium Booth"]',
    }, {
        content: 'Choose Booth',
        trigger: '.o_wbooth_booths div:contains("OpenWood Demonstrator 2") input',
    }, {
        content: "Validate attendees details",
        trigger: 'button:enabled:contains("Book my Booth(s)")',
        run: 'click',
    }, {
        content: "Fill booth details",
        trigger: 'form[id="o_wbooth_contact_details_form"]',
        run: function () {
            $("input[name='sponsor_name']").val("Patrick Sponsor");
            $("input[name='sponsor_email']").val("patrick.sponssor@test.example.com");
            $("input[name='sponsor_phone']").val("+32456001122");
            $("input[name='sponsor_slogan']").val("Patrick is Your Sponsor");
            $("textarea[name='sponsor_description']").text("Really eager to meet you !");
        },
    }, {
        content: "Validate booth details",
        extra_trigger: "input[name='sponsor_name'], input[name='sponsor_email'], input[name='sponsor_phone']",
        trigger: 'button.o_wbooth_registration_confirm',
        run: 'click',
    }, ...new FinalSteps()._getSteps()].filter(Boolean)});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website_links/static/tests/tours/website_links.js  *
*  Lines: 122                                                    *
*****************************************************************/
odoo.define('@website_links/../tests/tours/website_links', ['@web/core/registry', '@web/core/browser/browser'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { browser } = require("@web/core/browser/browser");

function fillSelect2(inputID, search) {
    return [
        {
            content: "Click select2 form item",
            trigger: `.o_website_links_utm_forms div:has(+ #${inputID}) > .select2-choice`,
        },
        {
            content: "Enter select2 search query",
            trigger: '.select2-drop .select2-input',
            run: `text ${search}`,
        },
        {
            content: "Select found select2 item",
            trigger: `.select2-drop li:only-child .select2-match:containsExact("${search}")`,
        },
        {
            content: "Check that select2 is properly filled",
            trigger: `.o_website_links_utm_forms div:has(+ #${inputID}) .select2-chosen:containsExact("${search}")`,
            run: () => null,
        },
    ];
}

const campaignValue = 'Super Specific Campaign';
const mediumValue = 'Super Specific Medium';
const sourceValue = 'Super Specific Source';

registry.category("web_tour.tours").add('website_links_tour', {
    test: true,
    url: '/r',
    steps: () => [
        // 1. Create a tracked URL
        {
            content: "check that existing links are shown",
            trigger: '#o_website_links_recent_links .btn_shorten_url_clipboard',
            run: function () {}, // it's a check
        },
        {
            content: "fill the URL form input",
            trigger: '#o_website_links_link_tracker_form input#url',
            run: function () {
                var url = window.location.host + '/contactus';
                $('#o_website_links_link_tracker_form input#url').val(url);
            },
        },
        ...fillSelect2('campaign-select', campaignValue),
        ...fillSelect2('channel-select', mediumValue),
        ...fillSelect2('source-select', sourceValue),
        {
            content: "Copy tracker link",
            trigger: '#btn_shorten_url',
            run: function () {
                // Patch and ignore write on clipboard in tour as we don't have permissions
                const oldWriteText = browser.navigator.clipboard.writeText;
                browser.navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
                $('#btn_shorten_url').click();
                browser.navigator.clipboard.writeText = oldWriteText;
            },
        },
        // 2. Visit it
        {
            content: "check that link was created and visit it",
            extra_trigger: '#o_website_links_recent_links .truncate_text:first():contains("Contact Us")',
            trigger: '#o_website_links_link_tracker_form #generated_tracked_link:contains("/r/")',
            run: function () {
                window.location.href = $('#generated_tracked_link').text();
            },
        },
        {
            content: "check that we landed on correct page with correct query strings",
            trigger: '.s_title h1:containsExact("Contact us")',
            run: function () {
                const enc = c => encodeURIComponent(c).replace(/%20/g, '+');
                const expectedUrl = `/contactus?utm_campaign=${enc(campaignValue)}&utm_source=${enc(sourceValue)}&utm_medium=${enc(mediumValue)}`;
                if (window.location.pathname + window.location.search !== expectedUrl) {
                    console.error("The link was not correctly created. " + window.location.search);
                }
                window.location.href = '/r';
            },
        },
        // 3. Check that counter got incremented and charts are correctly displayed
        {
            content: "filter recently used links",
            trigger: '#filter-recently-used-links',
        },
        {
            content: "visit link stats page",
            trigger: '#o_website_links_recent_links a:containsExact("Stats"):first',
        },
        {
            content: "check click number and ensure graphs are initialized",
            extra_trigger: '.website_links_click_chart .title:contains("1 clicks")',
            trigger: 'canvas',
            run: function () {}, // it's a check
        },
        {
            content: "click on Last Month tab",
            trigger: '.o_website_links_chart .graph-tabs a:contains("Last Month")',
        },
        {
            content: "ensure tab is correctly resized",
            trigger: '#last_month_charts #last_month_clicks_chart',
            run: function () {
                var width = $('#last_month_charts #last_month_clicks_chart').width();
                if (width < 50) {
                    console.error("The graphs are probably not resized on tab change.");
                }
            },
        },
    ]
});

return __exports;
});
;

/*********************************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/snippet_newsletter_block_with_edit.js  *
*  Lines: 86                                                                                 *
*********************************************************************************************/
odoo.define('@website_mass_mailing/../tests/tours/snippet_newsletter_block_with_edit', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour('snippet_newsletter_block_with_edit', {
    test: true,
    url: '/',
    edition: true,
}, () => [
    // Put a Newsletter block.
    wTourUtils.dragNDrop({
        id: 's_newsletter_block',
        name: 'Newsletter Block',
    }),
    {
        content: 'Wait for the list id to be set.',
        trigger: 'iframe .s_newsletter_block[data-list-id]:not([data-list-id="0"]) .s_newsletter_subscribe_form',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave(),
    // Subscribe to the newsletter.
    {
        content: 'Wait for the email to be loaded in the newsletter input',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
        extra_trigger: 'iframe .s_newsletter_block input:propValue(admin@yourcompany.example.com)',
    },
    // Change the link style.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Click on the Subscribe button',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
    },
    {
        content: 'Toggle the option to display the Thanks button',
        trigger: 'we-button[data-toggle-thanks-button] we-checkbox',
    },
    {
        content: 'Click on the Thanks button',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn',
    },
    {
        content: 'Click on the link style button',
        trigger: '.dropdown:has([name="link_style_color"]) > button',
    },
    {
        content: 'Click on the primary style button',
        trigger: '[data-value="primary"]',
    },
    {
        content: 'Verify that the shape option is not available for primary while the size option appeared',
        trigger: 'we-customizeblock-option:not(:has([name="link_style_shape"]))',
        extra_trigger: 'we-customizeblock-option:has([name="link_style_size"])',
        isCheck: true,
    },
    {
        content: 'Click on the link style button',
        trigger: '.dropdown:has([name="link_style_color"]) > button',
    },
    {
        content: 'Click on the custom style button',
        trigger: '[data-value="custom"]',
    },
    {
        content: 'Change the shape of the button',
        trigger: '.dropdown:has([name="link_style_shape"]) > button',
    },
    {
        content: 'Click on the flat shape button',
        trigger: '[data-value="flat"]',
    },
    ...wTourUtils.clickOnSave(),
    // Check if the button style is correct (make sure that the 'btn-success'
    // class which is not suggested as a valid style in the editor panel did not
    // prevent to edit the button).
    {
        content: 'Check that the link style is correct',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn.btn.btn-custom.flat:not(.btn-success)',
        isCheck: true,
    },
]);

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/snippet_newsletter_popup_edition.js  *
*  Lines: 33                                                                               *
*******************************************************************************************/
odoo.define('@website_mass_mailing/../tests/tours/snippet_newsletter_popup_edition', ['@website/js/tours/tour_utils', '@website_mass_mailing/../tests/tours/snippet_newsletter_popup_use'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];
const snippetNewsletterPopupUseTour = require("@website_mass_mailing/../tests/tours/snippet_newsletter_popup_use")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour("snippet_newsletter_popup_edition", {
    test: true,
    url: "/",
    edition: true,
}, () => [
    wTourUtils.dragNDrop({
        id: 's_newsletter_subscribe_popup',
        name: 'Newsletter Popup',
    }),
    {
        content: "Check the modal is opened for edition",
        trigger: 'iframe .o_newsletter_popup .modal:visible',
        in_modal: false,
        run: () => null,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check the modal has been saved, closed",
        trigger: 'iframe body:has(.o_newsletter_popup)',
        run: snippetNewsletterPopupUseTour.ensurePopupNotVisible,
    }
]);

return __exports;
});
;

/***************************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/snippet_newsletter_popup_use.js  *
*  Lines: 54                                                                           *
***************************************************************************************/
odoo.define('@website_mass_mailing/../tests/tours/snippet_newsletter_popup_use', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

function ensurePopupNotVisible() {
    const $modal = this.$anchor.find('.o_newsletter_popup .modal');
    if ($modal.length !== 1) {
        // Avoid the tour to succeed if the modal can't be found while
        // it should. Indeed, if the selector ever becomes wrong and the
        // expected element is actually not found anymore, the test
        // won't be testing anything anymore as the visible check will
        // always be truthy on empty jQuery element.
        console.error("Modal couldn't be found in the DOM. The tour is not working as expected.");
    }
    if ($modal.is(':visible')) {
        console.error('Modal should not be opened.');
    }
}

registry.category("web_tour.tours").add('snippet_newsletter_popup_use', {
    test: true,
    url: '/',
    steps: () => [
    {
        content: "Check the modal is not yet opened and force it opened",
        trigger: 'body:has(.o_newsletter_popup)',
        run: ensurePopupNotVisible,
    },
    {
        content: "Check the modal is now opened and enter text in the subscribe input",
        trigger: '.o_newsletter_popup .modal input',
        in_modal: false,
        run: 'text hello@world.com',
    },
    {
        content: "Subscribe",
        trigger: '.modal-dialog .btn-primary',
    },
    {
        content: "Check the modal is now closed",
        trigger: 'body:not(.modal-open)',
        run: ensurePopupNotVisible,
    }
]});

__exports[Symbol.for("default")] = {
    ensurePopupNotVisible: ensurePopupNotVisible,
};

return __exports;
});
;

/************************************************************************
*  Filepath: /website_blog/static/tests/tours/blog_search_with_date.js  *
*  Lines: 34                                                            *
************************************************************************/
odoo.define('@website_blog/../tests/tours/blog_search_with_date', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/**
 * Makes sure that blog search can be used with the date filtering.
 */
registry.category("web_tour.tours").add("blog_autocomplete_with_date", {
    test: true,
    url: '/blog',
    steps: () => [{
    content: "Select first month",
    trigger: 'select[name=archive]',
    run: 'text option 2',
}, {
    content: "Enter search term",
    trigger: '.o_searchbar_form input',
    extra_trigger: '#o_wblog_posts_loop span:has(i.fa-calendar-o):has(a[href="/blog"])',
    run: 'text a',
}, {
    content: "Wait for suggestions then click on search icon",
    extra_trigger: '.o_searchbar_form .o_dropdown_menu .o_search_result_item',
    trigger: '.o_searchbar_form button:has(i.oi-search)',
}, {
    content: "Ensure both filters are applied",
    trigger: '#o_wblog_posts_loop:has(span:has(i.fa-calendar-o):has(a[href="/blog?search=a"])):has(span:has(i.fa-search):has(a[href^="/blog?date_begin"]))',
    run: () => {}, // This is a check.
}]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /website_blog/static/tests/tours/blog_sidebar_with_date_and_tag.js  *
*  Lines: 51                                                                     *
*********************************************************************************/
odoo.define('@website_blog/../tests/tours/blog_sidebar_with_date_and_tag', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("@website/js/tours/tour_utils")[Symbol.for("default")];

wTourUtils.registerWebsitePreviewTour(
    "blog_sidebar_with_date_and_tag",
    {
        test: true,
        url: "/blog",
    },
    () => [
        {
            content: "Click on the 'Nature' blog category to filter blog posts.",
            trigger: "iframe b:contains('Nature')",
        },
        {
            content: "Check if the archive dropdown contains exactly 1 option: February.",
            trigger: "iframe select[name=archive]",
            run: function () {
                const optionEls = this.$anchor[0].querySelectorAll("optgroup option");
                const length = optionEls.length;
                const monthName = optionEls[0].textContent;
                if (length !== 1 || !monthName.includes("February")) {
                    throw new Error("Expected 1 option in the select with February");
                }
            },
        },
        {
            content: "Click on the 'Space' blog category to switch filters.",
            trigger: "iframe b:contains('Space')",
        },
        {
            content: "Verify that the archive dropdown now contains only 1 option: January.",
            trigger: "iframe select[name=archive]",
            run: function () {
                const optionEls = this.$anchor[0].querySelectorAll("optgroup option");
                const length = optionEls.length;
                const monthName = optionEls[0].textContent;
                if (length !== 1 || !monthName.includes("January")) {
                    throw new Error("Expected 1 option in the select with January");
                }
            },
        },
    ]
);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website_blog/static/tests/tours/blog_tags_tour.js  *
*  Lines: 71                                                     *
*****************************************************************/
odoo.define('@website_blog/../tests/tours/blog_tags_tour', ['@website/js/tours/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('@website/js/tours/tour_utils')[Symbol.for("default")];


/**
 * Makes sure that blog tags can be created and removed.
 */
wTourUtils.registerWebsitePreviewTour('blog_tags', {
    test: true,
    url: '/blog',
}, () => [{
        content: "Go to the 'Post Test' blog",
        trigger: "iframe article[name=blog_post] a:contains('Post Test')",
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet('#o_wblog_post_top .o_wblog_post_page_cover'),
    {
        content: "Open tag dropdown",
        trigger: "we-customizeblock-option:contains(Tags) .o_we_m2m we-toggler",
    }, {
        content: "Enter tag name",
        trigger: "we-customizeblock-option:contains(Tags) we-selection-items .o_we_m2o_create input",
        run: "text testtag",
    }, {
        content: "Click Create",
        trigger: "we-customizeblock-option:contains(Tags) we-selection-items .o_we_m2o_create we-button",
    }, {
        content: "Verify tag appears in options",
        trigger: "we-customizeblock-option:contains(Tags) we-list input[data-name=testtag]",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Verify tag appears in blog post",
        trigger: "iframe #o_wblog_post_content .badge:contains(testtag)",
        isCheck: true,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet('#o_wblog_post_top .o_wblog_post_page_cover'),
    {
        content: "Remove tag",
        trigger: "we-customizeblock-option:contains(Tags) we-list tr:has(input[data-name=testtag]) we-button.fa-minus",
    }, {
        content: "Verify tag does not appear in options anymore",
        trigger: "we-customizeblock-option:contains(Tags) we-list:not(:has(input[data-name=testtag]))",
        isCheck: true,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Verify tag does not appear in blog post anymore",
        trigger: "iframe #o_wblog_post_content div:has(.badge):not(:contains(testtag))",
        run: () => {}, // it's a check
    }, {
        content: "Go back to /blog",
        trigger: "iframe .top_menu a[href='/blog'] span",
    }, {
        content: "Click on the adventure tag",
        trigger: "iframe a[href^='/blog/tag/adventure']",
    }, {
        content: "Verify we are still on the backend",
        trigger: "iframe span:contains(adventure) i.fa-tag",
        run: () => {}, // it's a check
    }]
);

return __exports;
});
;

/**********************************************************************************
*  Filepath: /website_appointment/static/tests/tours/website_appointment_tour.js  *
*  Lines: 133                                                                     *
**********************************************************************************/
odoo.define('@website_appointment/../tests/tours/website_appointment_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('website_appointment_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: 'Click on appointment app',
        trigger: '.o_app[data-menu-xmlid="appointment.main_menu_appointments"]',
    }, {
        content: 'Click on Create button',
        trigger: '.o-kanban-button-new',
    }, {
        content: 'Set name of appointment type',
        trigger: '#name_0',
    }, {
        content: 'Set max scheduled days',
        trigger: '#max_schedule_days_0',
        run: 'text 45',
    }, {
        content: 'Open the options tab',
        trigger: 'a[name="options"]',
    }, {
        content: 'Checked the allow_guests',
        trigger: '#allow_guests_0',
    }, {
        content: 'Save appointment type',
        trigger: '.o_form_button_save',
    }, {
        content: 'Publish the appointment',
        trigger: 'button[name="action_toggle_published"]',
        extra_trigger: 'button.o_form_button_create',
    }, {
        content: 'Go to the front end',
        trigger: 'button[name="action_customer_preview"]',
    }, {
        content: 'Click on first date available',
        trigger: '.o_slots_list > div > button',
    }, {
        content: 'Fill tel field',
        trigger: 'input[name="phone"]',
        run: 'text 0123456789',
    }, {
        content: 'Click on the add guest link',
        trigger: 'button.btn-link',
    }, {
        content: 'Enter the emails of the guests',
        trigger: '#o_appointment_input_guest_emails',
        run:()=>{
            document.querySelector('#o_appointment_input_guest_emails').value = 'test1@gmail.com\r\nportal@example.com\r\naaaa'
        }
    }, {
        content: 'Click on the add guest button',
        trigger: '.o_appointment_form_confirm_btn',
    }, {
        content: 'Check the error msg',
        trigger: '.o_appointment_error_text:contains("Invalid Email")',
        isCheck: true,
    }, {
        content: 'Removing the Invalid Email from the text area',
        trigger: '#o_appointment_input_guest_emails',
        run:()=>{
            document.querySelector('#o_appointment_input_guest_emails').value =
                '"Raoul" <hello@gmail.com>\r\ntest1@gmail.com\r\nnew_zeadland2@test.example.com\r\n\r\nportal@example.com\r\napt_manager@test.example.com'
        }
    }, {
        content: 'Confirm the appointment',
        trigger: '.o_appointment_form_confirm_btn',
    }, {
        trigger: 'div:contains("test1@gmail.com")',
        isCheck: true
    }, {
        trigger: 'div:contains("Portal User")',
        isCheck: true
    }, {
        trigger: 'div:contains("new_zeadland2@test.example.com")',
        isCheck: true
    }, {
        trigger: 'div:contains("Raoul")',
        isCheck: true
    }, {
        trigger: '.o_appointment_guest_addition_open',
        content: 'Adding the guest at the validation page'
    }, {
        content: 'Check the email validation on validation page',
        trigger: '#o_appointment_input_guest_emails',
        run:()=>{
            document.querySelector('#o_appointment_input_guest_emails').value = 'test2@gmail.com\r\nabc@gmail.com def@gmail.example.com\r\ntest1tttt'
        }
    }, {
        content: 'Click on the add guest button',
        trigger: '.o_appointment_guest_add',
    }, {
        content: 'Checking the error msg on the validation page',
        trigger: '.o_appointment_error_text:contains("Invalid Email")',
        isCheck: true,
    }, {
        content: 'Remove the invalid email from the input',
        trigger: '#o_appointment_input_guest_emails',
        run: ()=>{
            document.querySelector('#o_appointment_input_guest_emails').value = 'test2@gmail.com\r\nabc@gmail.com def@gmail.example.com\r\ntest1@gmail.com'
        },
    }, {
        content: 'Click on the add guest button',
        trigger: '.o_appointment_guest_add',
    }, {
        trigger: 'div:contains("test2@gmail.com")',
        isCheck: true
    }, {
        trigger: 'div:contains("abc@gmail.com")',
        isCheck: true
    }, {
        trigger: 'div:contains("def@gmail.example.com")',
        isCheck: true
    }, {
        content: 'Clicking on the back to edit mode link',
        trigger: 'a:contains("Back to edit mode")',
    }, {
        content: 'Check that the appointment is booked or not',
        trigger: 'div[name="appointment_count"] > span.o_stat_value:contains("1")',
        isCheck: true,
    },
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /appointment_crm/static/tests/tours/appointment_crm.js  *
*  Lines: 45                                                         *
*********************************************************************/
odoo.define('@appointment_crm/../tests/tours/appointment_crm', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const oldWriteText = navigator.clipboard.writeText;

registry.category("web_tour.tours").add('appointment_crm_meeting_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
        run: 'click',
    }, {
        trigger: '.o_kanban_record:contains("Test Opportunity")',
        extra_trigger: '.o_opportunity_kanban',
        run: 'click',
    }, {
        trigger: 'button[name="action_schedule_meeting"]',
        run: 'click',
    }, {
        trigger: 'button.dropdownAppointmentLink',
        run: 'click',
    }, {
        trigger: '.o_appointment_button_link:contains("Test AppointmentCRM")',
        run: () => {
            // Patch and ignore write on clipboard in tour as we don't have permissions
            navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
            $('.o_appointment_button_link:contains("Test AppointmentCRM")').click();
        },
    }, {
        trigger: '.o_appointment_discard_slots',
        run: () => {
            $('.o_appointment_discard_slots').click();
            // Re-patch the function with the previous writeText
            navigator.clipboard.writeText = oldWriteText;
        },
    }],
});

return __exports;
});


//# sourceMappingURL=/web/assets/62/0722f03/web.assets_tests.js.map